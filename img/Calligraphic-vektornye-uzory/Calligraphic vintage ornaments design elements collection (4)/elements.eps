%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: elements.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Yulia
%%CreationDate: 4/5/2015
%%BoundingBox: 0 0 720 735
%%HiResBoundingBox: 0 0 720 734.3345
%%CropBox: 0 0 720 734.3345
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 16580 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD1AFFA87C767DFD7AFFA17D767C4B4B767DA8FD78FFA17D527651
%5127A1FD79FFA87D27524B4B52FFA87D7CFD77FF7D277D4B52A8A8274B52
%FD2CFFCFA8FD19FFA8CAFD23FFA8FD09FFA84B525227A8764B2752A8FD29
%FFA852274B76FD05FFA87D4B527CFFFFFF7C524B7DA8FD05FF764B2776A8
%FD17FFA8A8A8A7FFFFFFA87D5252517C7DFD06FFA8277D4B52FFFF5276A8
%FD2AFF7D52A8524BA8FD04FF7D274B274B52FF524B274B277DFD04FFA84B
%52A84B7DFD14FFA8767D7DA8A1A8A7A8524B76A8A8FFA87D4BA7FD04FF52
%517C4B52FFFFA8767D527DA8FD27FF27A87D2727FD04FFCA27517C7D274B
%524B277D7C5127CAFD04FF27277DA827FD13FFA152A8FD06FF7C52A8FD07
%FF51A8FFFFA8527D7D27FFA8762751515227517DFD25FFA852A8FF7DFD05
%FFA84B52FFFFA152A852A1FFFF524BA8FD05FF7DFFA852FD12FF7652FD07
%FF7D52A8FFFFFFA8FD05FF4BFFFFA1517D277D7D4B277DA8FFFFA852277D
%FD1AFFA87DFD09FF527CFD07FFCF2752FD09FF5227CAFD07FF7652FD09FF
%7DA8FD06FF7D7DFD08FF767DFFFFA1527D52A8FFFFFFA876FF7D524B7652
%4B52FD07FF524BA8FD18FFA8274B52FD08FFA827A8FFFFA8FD04FF7627CA
%FD07FFCA2776FD04FFCAFFFFA827A8FD08FF4B4B4BA8FD04FF7D52FD09FF
%4BA8FFA876FFFFA84BA8FFFFFF7CA87D27524B2752FD09FF277DFD18FF52
%274B7DFD07FFA17DA826A1FFFF7DFFFFFF7C277DFFFFA827A8FFFF7D277C
%FFFFFF7DFFFF7D27A87D7DFD07FF7D4B2752FD04FF51CAFD04FFA8CFFFFF
%FF52A8FF7DFD04FFA87DFFFFFF7DA87C52524B7CFD0AFF7D4BFD18FF7D26
%7DFD06FF7CA1FF7DA1FF4B7DFFFF7DFFFFFF4B52FFFF762776FFFF524BFF
%FFFF7DFFFF7D4BFFA17DFFA17DFD06FF7D277DFFFFFF7D51FFFFFF7D274B
%2776A8FF4BA8FFA8A1FFA8FFA876FFFFFFA87D7D274B52FD0BFF7D4BA8FD
%17FFA8522076A8FFFFFFA84B7DFFA1277DFF5252A8FF76A8FF7D26A8FF52
%2752FFA8267DFFA876FFA85252CA7D4BA7FF7D52A8FFFFFFA8522052A8FF
%FFFF7D52FFFFA827514B52277DFFA152FFFFA8A7A8FFA77DFFFFFFA8A87D
%4B51FD0CFFA827A8FD19FFA85252527DA1FF7D7D7DA87D5252A77D527DFF
%76A8FF7652FF4B5151FF4B76FFA776FF7D527DA752527DA87D7D7DFFA77D
%525252A8FD05FF517DA8FF524B27A8A85227FFFF5276FD04FFA827A8FFFF
%FFA87D5226A8FD0CFFA84B7DFD17FFFD05A8FFA8A87DA87D7D527D76764B
%76767652A8527DA8527D5227527D52A87D52A852767652277C767D527D7D
%A87DA8A8FFFD05A8FFFFFF7D7DA1FF7D2751A8FF7C4BA8FFA85252A8A17D
%4BA8FD04FFA152277DFD0DFFA827FD17FF7652517DA8FFFFA15252274B27
%525176527D7C76527D7CA8527DA87D524B527DA87D76A8767D5276767D76
%764B524B4B275252A1FFFFA87D4B527DFFFF52FF51A8FF7DA7FFFF5227FD
%04FFA1767D7CCFFD05FF7C2652A8FD0DFF7D52A8FD15FF522752FFFFFFA1
%52264B52FD057D51512776767D527D7CA8527CA87C527DA87652A87C7C52
%7D76522752517D7DA17D7D524B2651A1FFFFFF522752FF52FFA84BA1FFFF
%A87C26A8FFA8767652A8FD07FFA82751A8FD0EFF767DFD15FF7D4B52FFFF
%FFA851277DA8FD07FFCAA87652527D527D7DA84B7DCAFFA87D51A87D7D76
%7D51527CA8A8FD07FFA87D2751A8FFFFFF514BA151A8FFA84B4B274B277D
%FFA8527D7D762652A8FD04FFA8272776FD05FFA87D76A8FD05FFA827FD16
%FF7D2076FFFFFF522676FD0CFFA8A852524B7CA7A826A8FFA826A8A7764B
%5252A8A8FD0CFF762652FFFFFF52207D7D52FFFFFFA8A8A8FD08FFA827A8
%FD04FF524B52FD05FFA85227514BCAFD04FF4BA7FD16FF7D4B52FFFFFF4B
%51A8FD0FFFA87D517CA87D52FF517DCF76517DA8FD0FFFA8514BFFFFFF52
%4BA8A82751FD09FF7DFD04FF517DFFFFFF514B4BFD06FFA72752274B7DFF
%FFFF517CFD18FF7DFFFFFFA85127A8FD11FFA852767D51764B7D7652A8FD
%11FFA8274BA8FFFFA8A1FFFF524B4B7DA8FFFFFFA87D52FD05FF27A8FFFF
%524B4BFD07FFA8767D5252FFFFA84B7DFD1EFF4B5152A87DFD11FF7D7DA7
%A8A87D7DFD11FFA1A8515152FD07FF7D27525252275127527DFD05FF517D
%FFA7272727A8FD08FF7D527DA87D7C4BA7FD1FFF7D264B272752FD11FFA8
%A852A8A8FD11FF5227274B26A1FD07FFA852277DA8FFA8FD07FF527DA87D
%274B52FFFFA8A7A87D7D7DFFA87D4B4B277DA7FD22FFA74B5127A1FD11FF
%7D517D527DFD11FFA127514BA7FD09FF7D7D26527DFD05FFA87D4B525252
%264B7CFF7D51274B27524B4B527C275227A1A8FD25FFA8A8FD12FFA8FFA8
%FFA8FD12FFA8A8FD0BFFA7FFA84B274B5252764B5127524B4B277CA8CA4B
%524B5227524B7D4B51A8FF7D7D764B52FD5CFF7DFFFFFF7D52274B202727
%4B275276A8FFA8277D7651274B2751514B4BFFFF7C7652274BA8FD5BFFA8
%FD05FF7D7CA87DA8A7FD04FFCA7DFFA8524B524B524B7652FFFFFF7D514B
%4B52FD5BFFCFA1FD06FF7DA8FD07FFA8FFA85227512751274BA8FD05FF76
%5252FD5CFFA8FD07FFA87DFD0AFF524B275127517DFD64FFA8FFFFA85252
%52A8FFFF52CAFD08FF5252527D767DA8FD67FFCF274B275127A8FF7DA8FD
%07FF7D7DFD6DFF5227527D272752FF52A8FD06FFA8A8FD6EFF7627FFFF7D
%4BA8A852FD77FF5227A1FD04FF5252FD77FFA82752A1FFA8524BFD79FFA8
%2727274B52FD7CFFA8A8A8FD50FFA87D7DA8FFFFFFA87DFD04FFA87D7DA8
%FD3BFFA87D7D7D52FD2EFF7D52A87D767DFFFFA820A8FFFF7D7C7DA852A1
%FD39FFA7522751275276A8FD2BFFCA7DFF7DA8A87DFFFF7D4BA8FFCF7DFF
%A87DFF7DCAFD33FF7D7D76FF762727512752274B517DFD2AFF7DA8A87DA1
%A876A87DA127A87DA876CF7D7DA8CA7DFD32FF7D7C7DFFA8524B524BFD04
%52767DFD2AFFA8A8FF52A87D7DA85152FF5251A87D7DA852FFA8A8FD27FF
%A8A1767D767D767D7DFD04A8A17DA827512751275276A1527DFD2AFFA8A1
%FFA8767DA8FFA8767D76A8FFA87D76A8FF7DA8FD26FF7D767DCAFD06FFA1
%A17DFFFF7D7D524B5227A7FD04FF7DFD1DFFA8FD0DFFA8FD07FFA87DA8FD
%06FFCFA8FD26FF7652A8FD04FFCF7D7D527D7D764B7DA8A82751277DFD05
%FFCAFD1AFF7DA87DA87DA8A1FD08FFCA7DA7527DA8FFFFFFA8FFA8FFA8FF
%FFFFA87D52A17DFD09FFA1A87DA87DA17DFD14FFA152FD04FFCA7C4B7D7D
%A8A8A87D7D4B52A1764B7D7DA87DFD1CFFA87DA8FD06FFA8FD05FFA77C52
%7D7DCAA8A87DA8FFA8A8FFFD04A87DA8A7CAA17D527CA8FD05FFA8FD06FF
%A87DA8FD08FFCAA8CAA8FD06FF527DFFFFFFA85152FFFFFFA87D51765252
%264B27A87D7D7C767DFD1AFFA176FFFF7D7DFD09FF524B7DFD07FFA8A8A8
%A1FFA1A8A8A8FD07FF7D5152FD08FFCA7DA1FFFF76A8FD09FFA8CFA8FD05
%FF4BFD04FF527CFFFFFFA8767DFFFFFFA8A8524B51A8A85151A8FD19FFA8
%76FFA876A1FFFFA87DA8FD04FF5152CAFFFFA15276527DA8FFA8FF7DFF7D
%FFA8FFA87D527652A7FFFFCA5251FD04FFA87DA8FFFFA176A8FF7CA8FD05
%FF7D7D527DA8FFA1A7A8FFA8517DFFFFA127FFFFFFA876A8FD07FF7D2752
%FF7D7DFD1AFF52FFA852A1FF7D527DA87DA8FFFF2752FFFF7D52277DA8FF
%A87D7DA1A176A87CA17D7D7DA8CAA87D27517DFFFF5227FFFFA17DA87D52
%7DFFA152A8FF52FFFFFFA8527D7DA8525152FFA87DA8FF5252FFFF527CFF
%FFFFA1A7FD09FFA84B7DFD1BFFA17DFF7D7CFFA852A1A87D76FFFF5152CA
%FF7D274BFD05FFCAA17D5276FF52527DA1A8FD05FF4B277DFFFF5251FFFF
%527DA8A752A8FF7D7DFF7DA8FF7D52FD05FFA85226A8FF7DA8A8267DFF76
%52FFFFFF7DFFFFFFA87D7DFD05FF764BA8FD1AFF7D7DFF51A8FF7D7DFF7D
%7D52A8524BA8FF7D2752A8A852277DFFFF7D52207DFF7D20527DFFFF7D27
%51A8A852277DFFA82752A8527D7DFF7C7DFFA851FF7DA1A876FD08FFA827
%7DFFFD04A8FF7D51A8FFFFA8FFFFFF52274B52FD05FF27A1FD1AFF7DA8FF
%52A8FF7D7DFFCAA8FF5151A8FFA74B7DA8A1A8277D4BFFFFCA2752A8FFA8
%5227CAFFFF4B7D27A8A7CA764BA8FFA85152FFA1CAFF7D7DFFA852FFA87D
%7DFD0AFFA82752A8A7A8FFFFFF4B51A8FFA1FFFFFF2752A85276FD04FF76
%51FD1AFF7D7DFF527DFFA827A1A8A12751A7FFA84B52A8A8767D7D5252A8
%FFA84B527D277D5251A8FFA852527D7D7DA8A8524BA8FFA752277DA8A127
%A8FF7D52FF7D7DA1FD0BFFA82752A8A87DFFFFFF517CFFFFA8FFFFA776FF
%A852FD04FF7D52FD1AFF7D7DFFA827A8FFCA52524BA1A8A8A85252A87DCA
%A8765252A8FFFFFFA8FF512752FFA8FFFFFFA7525276A8CA7DA85152A8A8
%A8A1515252CAFFA827A8FF7D7D7DFD0BFFA876274BA8A87DFFFFFFA8FFFF
%FFA87D52FFFFFF4BFD04FF7D27FD1BFF4BCAFF7D277DA8FFA8A87D7DA852
%27A87CA876FFFFA8A8FD06FFA852A8FD06FFA8CAFFFF76A87CA82776A87D
%7DA8A8FFA87D277DFFCA4BFD0CFFA17D52A85252A8A87DFD06FF7D274B7D
%FFA87CFD04FF7C52FD1BFF7D52FFFFA85252527652A8FF7C27CF767DA87D
%52A8FD13FFA8517DA87D76CF277CFFA87676525252A8FFFF52A1FFA8FFFF
%FFA8FD05FFA84B274B7DFF2751A8A876CFFD04FF7D2720A8FF7D7DFD04FF
%5252FD1CFF5251FD07FFA8524BA852767CFD04A8FD13FFFD04A87C5252A8
%4B51A8FD07FF5176FD06FFA1A8FFFFFFA8762752277CFFFF2752FFFF7DA8
%A8FFFFFFA1A8FFA17DFD04FFA826A8FD1DFF7D277DA7A8A7A151517CA852
%52A87DFD1BFF7DA85252A87D5151A1A8A87D7D4B7DFD07FFA7767DA17651
%2751274B52FFFFA8274BA8FFA77D7DA8A1A87D7C7DFD05FF2751A8FD1EFF
%A852524B524B7D7D7D2752A8FFA8FD1BFFA8FFA852277D7D7D4B524B5252
%A8FD08FFA85276FD04524B52277DFD04FF4B4B7DFFFFFFA8A8A1A8CAFD05
%FF524BA8FD26FFA14BA8FD23FFA84BA1FD0FFFA75227514B512751274BA8
%FD05FF52274BA8FD08FFA87D274B7DFD60FFA87C4B512751277DA8FD07FF
%7D52265276A17DA8A7A152522752A8FD63FF7D4B7D527DFD0AFFA87D514B
%27272627264B52A8FD65FFCAFD12FFCAA7A8A8A8CAFDFCFFFDFCFFFDFCFF
%FD8AFFA8FD33FFA87D7D7DA8FD13FFA87D7D7DA8FD21FFA852FD0BFF7DA8
%FD33FF7DA1A87D7DFD06FFA8FD05FFA8FD06FF7D7DA8A17DFD20FF7D767D
%7DFD07FFA8A8527DA8FD32FFA8A7A852A87CFD05FF7C7CFD05FF767CFD05
%FF7CA852A8A7A8FD1DFFA8A1A8A8767DFFFFA8A8767D527D7DFFA8A8FD32
%FFA8FFA77D7D7DFD04FFA87D76FD05FF767DA8FD04FF7D7D7DA1FFA8FD10
%FFA8A87CA8FD08FF76A77DA87D7DFFFF7D524B7D7C7D7DA8A17DA8FD33FF
%A1FF7D7DA8FFFFFFA7A152A8FD05FFA8527DA7FFFFFFA8A17DFFA1FD12FF
%A87D4B7DA8FFA8A8A8FFFFFF52A7A87DFFFF7D4B277D7DA87DA176A1FD30
%FFFD077DFFFFFFA8FFA87D7DA7A8FD05FFA8A77D7DA8FFA8FFFFFFFD077D
%FD0EFFA876274B274B27272752A7FF7DA87DFFA14B27A1A8A8767C7DFFFF
%A87D7D52524B52527D7DA8A8FD21FFA876527DA1FD04A8A77CA8FFA87D7C
%7DA87DFFFFA77DA1FFFF7DA87D7D7DA8FFA87DA1FD04A8A17D5252A8FD0E
%FFA8A87DA87D76274B7DFF7DA8FF524BA87D5276A8FFFF7D76275151FD05
%7D525276A8A8FD1AFFA8A1FFFFFF7C527DFFA8A8A8CFA8FFA8FF7DA8A852
%A8A852FFFFFF7DA8A1FFFFFF76A8A852FFA87DFFFFFFA8CFA8A8A8FFA152
%7CFFFFFF7DA8FD0EFFA82727A7A87DA8277D4B76A8FFA87D274B52A8A8A8
%7DA87D7D7DA87D5227A8FD19FF76277DFFFF5152A8A87DA87D7D7C7D7DA8
%A8FFA1524BFF52A8FD04FF7DFD04FFA852FF4B52A8FFA8A87D7D7C7D7DA8
%7DA8A85251FFFF7D277DFD0EFFA8277CA8FF7D4B4BA8FFFF7D52277DA8FF
%A8A77DA8A1A77DA8767DA8A727A8FD17FFA851FFFFFF5276FFA87DA8527D
%7DA8A8FFFFA8A8FF52A776527D7DA8FFFF7DFFFFA17D7D5276A752FFA7A8
%FFFFA8A87D7D52A87DA8FF7652FFFFFF51A8FD04FFCAA1FD04A8FD04FF76
%27A8A8514BA8FFFF524B4BA8FFA87CA8A8FFA8A8A8A77DA87D52A8A727A8
%FD16FF527DFFFFA87DA8A17D7651A8A8FFA8FFFFFF52527D5252767DA87D
%527DFF27FF7D527DA87D5252527D5152FFFFFFA8FFA8A8517C7DA1A87DA8
%FFFF7D52FFFFA8A8A7FFFFFFA8A8A8FFFFFF7D51FFA14BFFFFA851517DFF
%FFA77DFD09FF52A87D76FF7C52FD16FFA152FD04FF7D7C5276FFA1A87DA8
%FD04FF515252A87D7D277DA8767C4B7676A87D277D7DA8515252FD04FFA8
%7DA8A8FF52527D7DFD04FF52A1FFA87DA8FFA87D7CA8A8A8A1FFFF7C51A8
%4BFFFFA12752A1FFA87DA8FD07FFA8FFFFFF4BA852A8A84BA8FD14FFA87D
%5252A87D767D5252FF7D7D52A17C76A8FFFFFF7D52A87D7DA827A84B52A1
%4B4BA827A87DA7A8527DFFFFFFA8767C7D527D7DFF52767D527DA852527D
%A8A8A8FFA8527DFFA8A8A8FFFFFF51A17DFFFF7D4B7DFFFFA7A8FD06FFA8
%7D7DA8FFFFFFA87DA77DFF4BA8FD14FF7DA8FFA17CA1A8A84BFF7DFF7DA8
%FFFF52FD05FF76767DFF7D52A8527DFF7D52A8527DFFA1767CFD05FF52FF
%FFA87DFF7DFF4BA8A8A17DA1FFA87D7DFFFF767DFFA17D7DA8FFFF7C527D
%FFA85227A1FFFF7DA8FD06FF7D7DA8A8A8FFFFFFFD047DFF527DFD14FFCA
%52A8FFFFA8FFCFFFFF7DA8FFA8A851A1FD06FF76524B52A8A827FFFFCA27
%CAA8524B5276FD06FFA751A8A8FFA87DFFFFCAFFA8FFFFA852FFA8FFFF4B
%FFFF5176FFA8A87D7DA1A87C5252A8FFFFA8FD07FFA87DFF7D7DA8A8FFFF
%7D76A17DFF27CAFD16FF7DA1A7FD05FFA87D7C7C52A8FD0CFFCF5252A852
%52A8FD0CFFA8527C767DA8FD05FF7DA17DFFFF76FFFF7D4BFF7DA1FFFFA1
%A8767D515152FFFFA8A8FD08FF7DA8A17DFD04FFA827A84BCA7D51A8FD1F
%FFA8FFA8FD0FFFA8522776A8FD0FFFA8FFA8FD0BFF7DA8FFFF7D4B7C767D
%7D7D527D5276A7FD0DFF7DA87DFFCA52527D4BA87C7DFF527DFD54FFA87D
%A1FFFFFFA8A17DA77D7C52A1CAFD0EFF7DA17D52FFA77D7DA87D52A87D27
%FD56FFA87D7C7D7DA8A1A1767D7DFD11FFA87DFF7652CFA8A85276FFA826
%A8FD59FFA1A17DA7A1FD15FF527DFF7D527652A8FF7D267DFD75FF527CA8
%FFFFFF7D5227A8FD77FF7D524B524B5176FD7CFFA8FDFCFFFDFCFFFDFCFF
%FD78FFA8FD7FFF764BFFFFA8FD04FF7DFD04FFA87D7D7DA8A8FD68FFA8A8
%7DA8A87C51FF7DA8FFA82752A8A8524B275251525252277DA8FD2DFFA8FD
%17FFA8FD1EFFFD047D5152A17DA1FF7DFF51A8A8762776A1FD06FFCF7D52
%7DFD1DFFCFFD0CFFA87DA87DA8A8FD11FFA8A87DA87DA8FD0CFFA8FD0DFF
%A87DA8FD04FF7D4B76A1A87D7DA87D4B4BA8FD0AFFA87651FD1AFFA1FD04
%7DA1FD08FFA17DFFFFFFA87D7DFD0FFF7D7DA8FFFFFF7D7DFD08FFA1FD04
%7DA8FD0BFFA8FFFFA8A8FFFFFFA14BA1FF52FF7D2776FD0EFF7D51FD19FF
%FD047D5276FD08FF7DFFFFFFA8FFFFA87DFD0DFFA1A8FFFFA8FFFFFF7DFD
%08FF7651FD047DFD0CFF764B274B27527DFF5276A8527D277DFF7DA8FD0D
%FF7D52FD18FFA827524B52A1FD07FFA8A87D7D767D52767652A8FD0BFFA8
%527652527D767D7DA8A8FD07FFA1524B5227A8FD0BFF524B7DA8A8A8764B
%76A84B7D4B4B7DFF7DFFFFFFA8FD0CFF7DA8FD16FFA8A17D2752277DFD08
%FF52A8FD05FFA1277CFD0BFF7C4BA1A8FD04FFA852FD08FF7D2752277D7D
%A8FD09FF76277DFD05FFA84B4B52274B52FF7DA8FFA8A8FFA8A87DA8A8FD
%07FFA77DFD15FFA852FFFF7D274B7DFF7DA8FD04FFA8A87DFFFFA87DFFFF
%FF4B7DFD09FF764BFFFFFF7DFFFFFF7DA8A8FD04FFA87DFF7D4B277DFFFF
%52A8FD07FFA8517DFF7D7C52A7FFFFA84B27524BFFA8A1FF7DFFFF765252
%7D76527DFD07FF52FD15FFA87651FFFF7627A77C5227A8FD05FFCA7DA8A8
%FF7DA7FFFF27A7FFFFA87DA8FFFFA727FFFFA77DFFA8A8A1CAFD05FFA827
%5276A12776FFFF5176A8FD07FFA826FFA876A8A84B7DFFFF524B277DFF76
%A8A1A8CA277DA8FFFFFFA85252FD06FF7D7DFD15FFA8A8FFFFA1274BA1A8
%2776FF7D7D7DA8A1A8A8FFFFFF7D7DA87627FF5276527652A8277DA87D7D
%FFFFFFA8A8A1A87D7D7DFF764BA87D4B4BA1FFFFA8A8FD08FF7D4BFFA8A8
%FFFFA84BFFFFA82752A8A87DFF7DFF4BA8FD07FF76A1FD05FF7DA8FD17FF
%A8A7FFFD04527DA176CAFFA87DA17DA8A8FF7DFFA87DA17C7C7D7DA87D7D
%767CA87DA8FFA1FFA8A87DA17DA8FFCA52A17DFD0452FFA1A8FD0AFFA827
%A8CA7DA8FFA852A8FFA82752FF52CA7DA8767DFFFFA87D7DA1A8FF7D7CFD
%05FFA87DFD15FF7D51527D765227A152A852FFFF7652A17D7D76A8A8FF52
%FF767D7D7DFFA120A8FF767D7D76FF52FFA7A1767D7D7D527DFFFF52A852
%7D2752767D52527DFD06FFA8FFFF7D27FD04FF7652FFFFCF27A8A87DFF7D
%A176CAFFFF7D52A1A8A8FFFF52FD05FF7DA8FD14FFA8527DFFA8A8A1527C
%FF7D7DFFA752FF527D7DA852A8A87DA7A851A852FFFF52CFFF52A84BA8A7
%7DA8A876A87D7D52FF51A8FF7D7DFF7C527DA8A8FF7D52FFFFFFA87D767D
%7DA8A852267C765127FFFFFF7D4BA8A176FF52A752FFFFA852FFA8A87DFF
%A876A8FD04FF7DA8FD14FFA8277D4B7DA8A8A8767DA152FF7652A17DA8A1
%A8A876A87D7DA852A852A8A827CAA852A852A87D7DA852A8A87DA87DA152
%76FF52A17D76A8A8A87D4B7C27A8FFA17DA8FFFFFFFD04A876767DFD04FF
%7C52FF52A8A87D7D7DFFFF527DFFA8A8CFFF7D7DFD05FF7DFD16FF7C2727
%52FFA87DA1A176A8FFFF4B517DA876FFFF7DA87D7CFF51FF52FF7D517DFF
%52CF4BFF7D7DA87DFFFF52A8A1514BFFFFA876A1A17DA8FF5227267CFFA8
%76FFFFFFA851FD0452FD07FF277DFF52A87D76A852FFA8A776A8FFFFFFA7
%51FD05FF7DA8FD16FFA87D7DFFFFFFA17D7DA17DA8A8A87DA8A1277DFF7D
%A827A77D51A87DA87D7D7CA87DA84B7DA727A87DFF7C277DA87DA8A8A8FD
%047DA1FFFFFF7D7DA8FF7DA8FFFFFF4B7DFFFFFFA14BFFFFFF7D7D7C4BA8
%A852FF527DFF52FFFFA8FF527D7D7D52FD06FF7DFD1EFF7DA87D7D7DA1A8
%FFA8A827A8FF7DA852A87C52FF7D7C7DFF7D7C7DFF527CA852A87DFFA827
%A8A8FFA8A17C7D7DA87DFD08FF51FFFFFF527DFFA7527DA87C7DFFFFFF7D
%2751FF527DFF517DFF527DFFA1FFFFA7A8A8FD06FF7C7DFD1FFF7DA8A87D
%52765252277DFFA17DFFFFA727A7A87D27FFFFFF277DA8A827A7FFFF7DA1
%FF7D2752527C527DA8A87DFD09FF7DFFFFFF76FFFF52FFA8A87D7DFD04FF
%27A8FF52A8FF27A8FFFF4BFFA8A8FD09FF7D7DFD1FFFA8FF7DA8A8FFA8A8
%A8FFFFA87C7D7CA827A8FFA152A1FFFFFFA152A1FFA827A87C7D76A8FFFF
%A8A8A8FFA8A8A7FFA8FD08FF51FFFFFF52FFA876A8A8A8527DFFFFFF5251
%FFA127FF7D4BA8A87DA74BFF7DA8FD06FFA85276FD20FFA87DA8A8A87DA7
%7DA87D7D52522752527DA87D4BA87CFFFFFF7CA84BA8A87C52522752527D
%7DA87DA87DA8A8A87CA8FD08FF52A8FFFF76A8FF7D7C7D7C7CFFFFFFA727
%7DFF517DFF7C52FF764BFFA851A77DA8A8FFA8A75252A1FD23FF7C767DA7
%7D7D76764B52525152FFA8A8A8A7A8A7A8FF7DA7FFFD04A8FF4B5152524B
%767C7D7DA77D7676FD0AFF7D7CFFFF767DFFFF7D7D7DFFFFFFA84B52FF7D
%4BA8A8207DFFA8267CFFFF527652765252527DA8FD25FFA87D5252515252
%7DA87D277DFD04FFA87DFF7D7D7DFF7DA8FD04FF7D277DA87D5252515252
%7DA8FD0CFF4BA8FFFF4BA8FD06FFA85252FFFF527DFF5252FFFFFFA8277D
%FD04FFA8A8A8FD30FFA876A8A8FD05FF7DA8A852A8A8A1FD05FFA8A876A8
%FD14FFA8277DFFFF4B7DA8FFA8A8522752FFFFFFA8FFFF7D7DFD04FFA851
%5152A17DA17DFD31FFA8FFA8FD07FF7D7D4B7C7DFD07FFA8FFA8FD15FFCF
%4B527DA852514B512752A1FD0FFFA8A87DA8A8FD3DFF7D277DFD22FF7D52
%4B52275152A1A8FD52FFCA52FD1EFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151805, 2013/04/09-12:08:21        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/"
   dc:format="application/postscript"
   xmp:MetadataDate="2015-04-07T09:22:14+03:00"
   xmp:ModifyDate="2015-04-05T01:36:55+03:00"
   xmp:CreateDate="2015-04-05T01:36:55+03:00"
   xmp:CreatorTool="Adobe Illustrator CC 2014 (Windows)"
   xmpMM:InstanceID="xmp.iid:9374deea-92c4-3542-8d7c-f651e6cc3c44"
   xmpMM:DocumentID="xmp.did:3f086175-71ca-5940-bf93-714cfdf61d80"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 11.00"
   photoshop:Headline="calligraphic  elements">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">calligraphic  elements</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Yulia</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Vector set: calligraphic  elements and page decoration for your design.</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>calligraphy</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>elements</rdf:li>
     <rdf:li>calligraphy</rdf:li>
     <rdf:li>design</rdf:li>
     <rdf:li>swirl</rdf:li>
     <rdf:li>decorative</rdf:li>
     <rdf:li>set</rdf:li>
     <rdf:li>scroll</rdf:li>
     <rdf:li>element</rdf:li>
     <rdf:li>elegant</rdf:li>
     <rdf:li>flower</rdf:li>
     <rdf:li>illustration</rdf:li>
     <rdf:li>curl</rdf:li>
     <rdf:li>vintage</rdf:li>
     <rdf:li>border</rdf:li>
     <rdf:li>ornament</rdf:li>
     <rdf:li>decorations</rdf:li>
     <rdf:li>collection</rdf:li>
     <rdf:li>style</rdf:li>
     <rdf:li>motive</rdf:li>
     <rdf:li>filigree</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="252"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqtk9T02&#xA;9MgSUPAsCRWm1QKbYq8Z/NS187pZ3E179eu9Jj5GSa2jsmtoxuC5tCsk3Cnd5TQdSMhK2yNMB8s/&#xA;m55t8sWcdr9ZbUtMaWOW1eU8mVY2HqwVbkVBQ0K/smhU0+1ESIZmIL6UuvMugWemxale38FpZT09&#xA;KaeRY1JIrxHI/a9sstppG2t3a3dvHc2syT28qhopomDoynurLUEYUKuKuxV2KuxV2KuxV2KuxV2K&#xA;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&#xA;dir/AP/Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:d961a50c-9949-764b-ae74-11ed7be0ddd2"
    stRef:documentID="xmp.did:d961a50c-9949-764b-ae74-11ed7be0ddd2"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:e49da1d2-d741-1044-b0c9-9729b9dc9c3c"
      stEvt:when="2015-04-04T16:36:19+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2014 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:3f086175-71ca-5940-bf93-714cfdf61d80"
      stEvt:when="2015-04-05T01:36:55+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2014 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:493a3ef1-173b-de49-b730-abe93d219c18"
      stEvt:when="2015-04-06T22:48:55+03:00"
      stEvt:softwareAgent="Adobe Bridge CC (Windows)"
      stEvt:changed="/metadata"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:9374deea-92c4-3542-8d7c-f651e6cc3c44"
      stEvt:when="2015-04-07T09:22:14+03:00"
      stEvt:softwareAgent="Adobe Bridge CC (Windows)"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="800.000000"
    stDim:h="800.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Группа образцов по умолчанию"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="Белый"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Черный"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="35"
         xmpG:green="31"
         xmpG:blue="32"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Цвета графического объекта"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="R=89 G=74 B=66"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="89"
         xmpG:green="74"
         xmpG:blue="66"/>
        <rdf:li
         xmpG:swatchName="R=255 G=255 B=255"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                    
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -734.334 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 734.334 li
720 734.334 li
720 0 li
cp
clp
151.729 141.422 mo
155.152 142.408 158.273 144.312 160.624 147.343 cv
164.595 152.465 165.262 159.788 162.592 165.551 cv
162.484 165.864 162.357 166.168 162.235 166.474 cv
163.104 166.246 163.901 166.004 164.574 165.772 cv
169.671 164.018 174.417 160.053 175.504 154.573 cv
178.169 141.141 161.722 136.335 151.729 141.422 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.34902 .290196 .258824 rgb
f
135.668 142.583 mo
129.726 144.459 123.375 147.842 118.489 151.708 cv
112.421 156.509 108.998 166.127 100.19 166.149 cv
100.069 166.149 100.041 166.323 100.168 166.34 cv
110.67 167.757 117.598 157.663 126.946 155.133 cv
128.744 154.646 130.465 154.57 132.143 154.765 cv
129.114 157.121 126.09 159.736 123.48 162.457 cv
123.287 162.659 123.585 163.033 123.826 162.894 cv
126.372 161.427 128.826 160.36 131.512 159.929 cv
131.325 160.103 131.136 160.266 130.943 160.415 cv
128.426 162.351 125.208 164.232 122.367 165.679 cv
119.335 167.223 116.91 168.806 115.649 172.106 cv
115.479 172.551 116.018 172.955 116.396 172.659 cv
119.397 170.307 123.011 170.184 126.366 171.642 cv
126.531 171.713 126.692 171.776 126.856 171.844 cv
122.751 173.553 118.731 175.85 115.755 179.147 cv
112.074 183.225 110.495 190.522 104.223 191.417 cv
104.109 191.434 104.123 191.585 104.225 191.608 cv
110.183 192.933 113.194 187.464 117.491 184.55 cv
123.448 180.511 131.515 181.701 138.33 181.139 cv
145.765 180.525 153.067 177.896 157.705 171.743 cv
158.913 170.14 159.882 168.281 160.566 166.3 cv
163.236 160.538 162.569 153.215 158.597 148.093 cv
153.152 141.07 143.573 140.087 135.668 142.583 cv
cp
f
199.832 145.584 mo
200.074 145.366 200.325 145.16 200.572 144.949 cv
201.105 144.565 201.584 144.173 202.009 143.776 cv
203.307 142.765 204.658 141.823 206.043 140.931 cv
237.39 133.721 258.929 96.7164 246.354 66.0927 cv
243.293 58.6391 238.497 51.9475 231.76 47.4045 cv
224.11 42.2455 214.663 41.3106 205.819 43.4363 cv
188.794 47.5285 175.037 60.7354 164.176 73.7921 cv
161.886 76.5455 159.694 79.3756 157.532 82.2291 cv
160.357 73.7174 167.476 67.2317 173.418 60.8082 cv
176.451 57.5286 179.115 53.9567 181.093 50.0674 cv
186.217 41.4229 188.908 31.3223 188.525 21.1907 cv
188.518 20.9956 188.247 20.9549 188.161 21.1177 cv
187.109 23.1065 186.034 25.0799 184.941 27.042 cv
184.955 26.6796 184.971 26.3174 184.979 25.9547 cv
185.141 18.3883 182.824 10.4823 177.249 5.19759 cv
176.994 4.95643 176.456 5.17219 176.529 5.55228 cv
177.172 8.91067 177.602 12.3109 177.83 15.725 cv
177.808 15.6972 177.785 15.6704 177.764 15.6427 cv
177.451 15.0999 177.145 14.5848 176.871 14.1145 cv
175.074 11.0307 172.522 8.10798 169.809 5.80001 cv
164.923 1.64451 158.329 -.937126 151.899 .31913 cv
151.66 .365898 151.673 .702888 151.926 .703346 cv
156.516 .71212 160.352 2.68539 163.365 5.69869 cv
161.772 5.23772 160.118 4.91248 158.404 4.7586 cv
150.286 4.03022 142.04 6.42875 135.648 11.5089 cv
135.357 11.7407 135.642 12.1711 135.969 11.9897 cv
151.785 3.20495 173 13.5038 174.927 31.7494 cv
175.343 35.6866 175.114 39.6373 173.669 43.357 cv
171.857 48.0204 168.723 52.2384 165.916 56.3398 cv
163.475 59.9051 160.963 63.4951 159.02 67.2668 cv
159.767 63.7503 160.599 60.2714 161.865 56.8839 cv
163.429 52.6998 166.162 49.4279 168.613 45.7626 cv
171.096 42.0489 172.653 37.8035 172.645 33.3085 cv
172.633 26.1227 168.748 19.2509 162.72 15.4404 cv
156.339 11.4063 147.513 11.8988 140.824 14.8997 cv
140.678 14.9652 140.71 15.186 140.881 15.1804 cv
147.902 14.953 154.989 17.3547 159.32 23.1667 cv
163.402 28.6442 163.595 33.7571 161.107 39.9828 cv
158.367 46.8411 156.232 54.3661 154.957 61.6408 cv
154.328 65.2226 154.054 68.7554 154.229 72.3879 cv
154.377 75.4531 154.56 79.0513 155.612 82.0419 cv
155.666 82.6777 155.747 83.3211 155.859 83.9728 cv
155.879 84.0911 155.932 84.1842 155.997 84.2638 cv
152.504 88.9419 149.1 93.6886 145.658 98.4047 cv
148.093 92.1519 149.218 85.3363 148.905 78.6562 cv
148.274 65.199 142.036 51.7193 131.347 43.3224 cv
119.024 33.6427 101.547 32.0539 87.6477 39.2955 cv
81.7838 42.3505 76.151 47.0576 72.8882 52.9047 cv
70.333 57.4835 68.5265 62.5241 68.2755 67.8089 cv
68.0666 72.2086 68.5249 76.7953 70.1122 80.9389 cv
72.1642 86.2955 75.1847 91.1191 79.5824 94.8409 cv
87.7379 101.743 99.6916 103.007 109.167 98.1652 cv
113.613 95.8935 117.331 92.5366 119.711 88.1168 cv
123.191 81.6538 123.052 73.4418 119.368 67.092 cv
116.774 62.6216 112.66 59.1224 107.53 57.9665 cv
102.017 56.7246 96.0019 58.2363 91.8428 62.1014 cv
86.5847 66.9879 85.8577 75.3329 90.3981 80.9479 cv
92.6816 83.772 96.1172 85.3911 99.7655 85.125 cv
103.402 84.8595 107.077 82.6469 108.406 79.144 cv
109.533 76.1734 108.829 72.8844 106.722 70.5494 cv
109.367 74.0716 108.91 79.0717 105.303 81.7722 cv
101.639 84.5157 96.2976 84.2075 93.0719 80.9155 cv
89.7974 77.5737 89.0088 72.3886 90.9786 68.1784 cv
92.8697 64.1361 97.1531 61.6136 101.506 61.1621 cv
104.027 60.9006 106.591 61.3456 108.888 62.4129 cv
110.805 63.3036 112.245 64.6049 113.697 66.0999 cv
113.584 65.9837 113.806 66.2581 113.846 66.3127 cv
113.99 66.5096 114.14 66.7028 114.287 66.8973 cv
114.823 67.6029 115.293 68.3505 115.714 69.1317 cv
117.141 71.7806 117.816 74.8179 117.726 77.8206 cv
117.637 80.8304 116.752 83.6973 115.269 86.3036 cv
114.661 87.3733 113.887 88.3744 113.054 89.2796 cv
112.626 89.7434 111.916 90.1589 111.572 90.6888 cv
110.416 91.7985 108.853 92.734 107.418 93.442 cv
105.41 94.433 103.304 95.2086 101.089 95.5647 cv
95.0406 96.537 88.5873 95.1219 83.7329 91.2995 cv
83.1057 90.8056 82.4617 90.2697 81.908 89.6968 cv
81.5582 89.3347 80.9528 88.4003 80.4915 88.2136 cv
78.9953 86.6868 77.7346 84.5322 76.8028 82.6433 cv
75.8228 80.6568 75.093 78.6462 74.5283 76.5024 cv
72.5074 68.8302 74.3013 60.3556 78.7214 53.8706 cv
79.4951 52.7354 80.3502 51.6039 81.3144 50.6212 cv
81.6753 50.2534 82.0551 49.9026 82.4251 49.5438 cv
82.6214 49.3534 83.2827 48.9032 83.3677 48.6327 cv
85.375 46.7558 87.8248 45.2113 90.2313 43.9341 cv
94.3644 41.7406 98.9061 40.3557 103.563 39.8939 cv
112.868 38.9714 122.288 41.7673 129.651 47.5118 cv
135.533 52.1009 139.98 58.6185 142.794 65.4809 cv
146.328 74.0978 147.138 83.7818 145.253 92.8913 cv
144.41 96.9616 143.035 100.797 141.22 104.399 cv
138.605 107.866 135.925 111.283 133.116 114.599 cv
121.68 128.1 107.496 140.037 90.9615 146.75 cv
85.9942 148.767 80.8763 150.232 75.6945 151.131 cv
80.0264 149.757 84.1967 147.883 88.0203 145.459 cv
95.1227 140.956 102.177 133.685 103.658 125.104 cv
105.195 116.198 99.8829 108.486 91.4246 105.774 cv
81.1414 102.476 71.5669 107.179 63.6174 113.464 cv
63.0687 113.898 63.6677 114.761 64.2731 114.591 cv
72.9016 112.173 83.3857 108.898 91.5048 114.356 cv
94.8047 116.574 96.6098 120.182 96.6921 124.161 cv
96.8003 129.391 93.929 133.812 90.3999 137.42 cv
78.6541 149.428 61.9037 150.883 45.8232 149.846 cv
43.1498 149.127 40.5034 148.242 37.8974 147.182 cv
26.6758 142.62 17.1948 133.908 11.1757 123.329 cv
17.0577 131.556 25.8413 137.311 36.3364 138.836 cv
50.2894 140.864 65.5392 132.935 73.5653 121.705 cv
74.0815 120.983 72.9586 120.163 72.3555 120.771 cv
62.8175 130.399 50.5137 133.845 37.2323 132.217 cv
25.5434 130.783 13.8151 123.987 7.04321 114.25 cv
6.62191 113.043 6.23907 111.823 5.90772 110.591 cv
3.13108 100.262 4.19409 89.0205 7.98315 78.8538 cv
7.33091 82.5916 7.32671 86.4571 8.07134 90.2725 cv
10.2132 101.247 18.1799 110.699 28.6447 114.609 cv
39.815 118.783 52.4943 115.622 59.3211 105.61 cv
66.1241 95.6335 63.2325 82.1219 52.8785 75.8827 cv
39.5256 67.8364 21.7819 79.0448 24.8513 94.7308 cv
25.768 99.4159 31.4742 101.546 35.5063 99.8472 cv
40.0953 97.9137 41.3187 92.9256 39.2817 88.6471 cv
39.6262 89.3706 39.5308 87.7804 39.382 88.6449 cv
39.5638 87.5891 39.1811 88.4051 39.675 87.4001 cv
40.0335 86.6704 40.8212 85.6045 42.0344 85.1865 cv
44.3133 84.4012 47.0481 85.4194 48.9161 86.7611 cv
54.7877 90.9787 54.0222 98.8003 49.6721 103.86 cv
44.2014 110.224 34.9176 110.712 27.5277 107.729 cv
19.8426 104.628 13.905 97.6632 11.4891 89.8067 cv
9.03249 81.8182 10.3669 73.2381 14.5183 66.1687 cv
15.5836 64.5985 16.7157 63.0865 17.9167 61.6515 cv
29.6507 47.6307 47.8774 40.003 66.0807 41.0052 cv
70.6615 41.2575 75.3457 42.0666 79.8295 43.0217 cv
80.0298 43.0643 80.1878 42.7647 79.9779 42.6697 cv
64.8242 35.8159 45.8275 38.1608 31.3523 45.712 cv
16.3062 53.561 5.52839 68.7366 1.64373 85.1089 cv
-1.33677 97.6707 -.147116 110.523 4.26618 122.07 cv
4.69793 123.595 5.38313 125.068 5.93771 126.556 cv
6.87238 129.063 7.77555 131.583 8.60227 134.128 cv
10.1131 138.779 11.7662 143.494 12.7464 148.291 cv
14.685 157.778 14.8567 169.389 7.23867 176.535 cv
7.00933 176.751 7.34487 177.071 7.57909 176.876 cv
15.0445 170.649 16.2322 159.822 15.8252 150.7 cv
15.6663 147.136 15.2936 143.568 14.6341 140.058 cv
20.9146 147.808 28.964 154.107 38.286 158.108 cv
38.3188 158.151 38.3611 158.189 38.425 158.212 cv
39.0051 158.412 39.5771 158.632 40.1424 158.866 cv
40.175 158.879 40.2076 158.892 40.2401 158.904 cv
49.1375 162.618 56.1149 170.343 58.1854 179.892 cv
59.9272 187.925 58.1616 196.905 52.9807 203.373 cv
47.9989 209.593 39.6656 213.715 31.7792 210.846 cv
25.5084 208.566 21.01 202.121 24.0634 195.568 cv
25.0348 193.484 26.9204 191.257 29.2919 190.825 cv
30.5543 190.595 31.7631 191.139 32.4331 191.599 cv
33.3558 192.234 32.6226 191.71 33.2982 192.541 cv
32.745 191.86 33.4408 193.293 33.3867 192.494 cv
33.7063 197.222 37.2162 200.971 42.1641 200.409 cv
46.5116 199.916 50.4429 195.264 48.9475 190.73 cv
43.9406 175.551 22.9812 174.47 15.2806 188.025 cv
9.30952 198.536 13.4063 211.732 24.2241 217.098 cv
35.0798 222.483 47.6822 219.029 55.3766 209.919 cv
62.5851 201.384 64.9011 189.241 61.3933 178.624 cv
58.9136 171.119 53.6693 164.926 46.9693 161.058 cv
48.6378 161.482 50.3362 161.838 52.0643 162.117 cv
70.9507 165.166 90.0136 161.202 106.759 152.148 cv
123.126 143.298 136.406 129.546 147.473 114.805 cv
157.741 101.131 165.904 85.8918 177.237 73.011 cv
187.704 61.1137 205.844 46.0766 222.856 52.1855 cv
239.186 58.0494 243.484 78.4884 241.856 93.6828 cv
239.872 112.211 227.61 127.907 210.512 135.056 cv
209.06 135.663 207.572 136.207 206.063 136.699 cv
203.073 136.638 200.088 136.428 197.152 135.843 cv
193.015 135.019 187.662 132.77 185.598 128.804 cv
184.776 127.225 184.577 125.258 185.781 123.793 cv
186.125 123.375 186.56 123.085 186.935 122.924 cv
187.007 122.894 187.605 122.75 187.702 122.71 cv
187.967 122.713 188.69 122.736 188.669 122.705 cv
188.694 122.709 188.719 122.715 188.743 122.72 cv
188.369 124.476 188.637 126.424 189.565 127.782 cv
193.365 133.344 201.823 132.801 204.591 126.462 cv
206.892 121.193 204.296 115.476 199.269 113.008 cv
193.535 110.194 185.933 110.863 181.775 116.128 cv
178.356 120.459 177.465 126.392 181.212 130.812 cv
183.73 133.783 187.055 135.558 190.731 136.573 cv
189.938 136.723 189.131 136.904 188.315 137.12 cv
180.498 139.188 175.734 146.811 175.734 146.811 cv
175.734 146.811 183.644 151.081 191.462 149.013 cv
192.309 148.789 193.13 148.536 193.921 148.263 cv
191.292 151.01 189.352 154.23 188.709 158.061 cv
187.751 163.776 191.551 168.418 196.705 170.39 cv
202.97 172.787 209.845 169.474 213.332 164.122 cv
216.389 159.43 215.696 153.19 211.023 149.839 cv
205.402 145.808 197.856 149.669 197.437 156.391 cv
197.334 158.033 198.1 159.845 199.32 161.162 cv
199.301 161.178 199.283 161.196 199.264 161.213 cv
199.266 161.175 198.656 161.565 198.43 161.703 cv
198.327 161.718 197.74 161.901 197.662 161.911 cv
197.258 161.965 196.735 161.939 196.226 161.755 cv
194.442 161.112 193.606 159.32 193.505 157.543 cv
193.25 153.08 196.698 148.408 199.832 145.584 cv
cp
f
204.131 39.8106 mo
209.671 39.8106 214.161 35.32 214.161 29.7808 cv
214.161 24.2415 209.671 19.751 204.131 19.751 cv
198.592 19.751 194.102 24.2415 194.102 29.7808 cv
194.102 35.32 198.592 39.8106 204.131 39.8106 cv
cp
f
535.52 130.864 mo
530.402 125.868 524.328 121.782 518.345 117.887 cv
512.412 114.025 506.268 110.484 499.933 107.322 cv
488.248 101.489 475.866 96.5428 463.144 93.5076 cv
450.103 90.396 435.32 89.1354 422.517 93.9631 cv
410.576 98.4656 400.123 109.024 400.49 122.555 cv
400.689 129.897 403.909 136.341 409.861 140.657 cv
415.003 144.385 422.156 145.615 428.21 143.653 cv
431.967 142.436 434.012 138.848 433.132 134.985 cv
432.32 131.421 427.959 128.881 424.464 130.063 cv
423.98 130.227 423.494 130.358 423.003 130.474 cv
422.852 130.471 422.106 130.558 421.884 130.555 cv
421.636 130.553 421.389 130.541 421.143 130.525 cv
421.079 130.513 421.012 130.5 420.931 130.486 cv
420.389 130.326 419.827 130.175 419.281 130.029 cv
419.219 130.006 419.169 129.988 419.118 129.969 cv
418.854 129.839 418.591 129.709 418.335 129.565 cv
417.942 129.344 417.569 129.098 417.196 128.847 cv
417.847 129.272 416.722 128.424 416.542 128.247 cv
416.424 128.131 415.665 127.23 415.78 127.428 cv
415.404 126.887 415.058 126.317 414.737 125.75 cv
414.681 125.65 414.136 124.45 414.189 124.654 cv
413.959 124.01 413.77 123.349 413.615 122.683 cv
413.592 122.581 413.426 121.353 413.413 121.458 cv
413.342 120.429 413.345 119.396 413.433 118.369 cv
413.43 118.694 413.736 116.868 413.793 116.655 cv
413.949 116.065 414.147 115.492 414.339 114.913 cv
414.397 114.762 414.442 114.645 414.477 114.554 cv
414.633 114.219 414.794 113.887 414.965 113.56 cv
415.248 113.021 415.552 112.492 415.875 111.976 cv
416.155 111.527 416.45 111.076 416.768 110.649 cv
416.825 110.61 417.629 109.665 417.572 109.727 cv
419.135 108.019 420.465 106.897 422.168 105.8 cv
426.814 102.807 432.145 101.254 437.571 100.408 cv
449.411 98.5635 461.632 100.58 473.101 103.586 cv
484.112 106.472 494.839 110.38 505.152 115.193 cv
510.295 117.593 515.332 120.22 520.242 123.065 cv
525.138 125.902 529.794 129.112 534.681 131.951 cv
535.362 132.346 536.084 131.414 535.52 130.864 cv
cp
f
393.325 80.0475 mo
397.033 82.721 401.8 83.9343 406.224 84.8022 cv
416.544 86.8268 427.129 86.4832 437.595 86.4394 cv
437.802 86.4386 437.86 86.1013 437.645 86.0687 cv
426.411 84.3602 414.565 82.2147 404.391 76.8842 cv
402.636 75.9648 400.893 74.8655 399.65 73.2864 cv
399.09 72.5765 398.744 71.9086 398.532 71.3041 cv
398.124 70.1426 398.183 70.4843 398.215 69.2507 cv
398.189 70.232 398.349 68.8073 398.421 68.5203 cv
398.449 68.4501 398.472 68.392 398.494 68.3351 cv
398.499 68.3265 398.503 68.318 398.508 68.3095 cv
398.506 68.3113 398.504 68.313 398.502 68.3148 cv
398.526 68.2535 398.545 68.2028 398.563 68.1575 cv
398.597 68.1236 398.628 68.0936 398.67 68.053 cv
398.681 68.0425 398.688 68.0353 398.699 68.0253 cv
398.91 67.9102 399.021 67.8435 399.031 67.8251 cv
399.449 67.6384 399.997 67.3643 400.5 67.1396 cv
399.834 67.4545 401.028 67.1646 400.745 67.1205 cv
400.869 67.1171 400.994 67.1147 401.114 67.1052 cv
405.814 66.7302 408.291 61.5324 404.932 57.8881 cv
403.149 55.9542 400.253 55.0655 397.669 55.0486 cv
391.646 55.0092 386.436 61.1064 386.287 66.878 cv
386.149 72.1996 389.112 77.0095 393.325 80.0475 cv
cp
f
398.566 68.2069 mo
398.547 68.2411 398.528 68.2753 398.508 68.3095 cv
398.714 68.142 398.926 67.9443 398.566 68.2069 cv
cp
f
407.261 91.3861 mo
398.317 90.4836 389.051 89.8969 380.86 94.3014 cv
376.84 96.4629 373.181 99.947 371.459 104.221 cv
369.762 108.431 369.469 113.326 370.983 117.64 cv
372.244 121.233 375.895 123.296 379.549 121.753 cv
383.302 120.17 384.17 116.187 382.585 112.749 cv
382.963 113.569 382.541 112.329 382.338 111.694 cv
382.398 111.695 382.225 110.211 382.212 109.987 cv
382.269 109.362 382.267 109.215 382.206 109.537 cv
382.264 109.198 382.33 108.861 382.41 108.526 cv
382.601 107.73 382.823 106.925 383.062 106.142 cv
383.712 104.007 385.457 101.74 387.537 99.9971 cv
393.038 95.3886 400.621 94.0799 407.445 92.7455 cv
408.274 92.5835 407.975 91.4581 407.261 91.3861 cv
cp
f
446.352 86.7001 mo
451.124 87.8681 455.911 88.9748 460.683 90.1446 cv
470.072 92.4466 479.445 94.9853 488.408 98.6495 cv
505.897 105.799 520.48 117.269 535.264 128.75 cv
535.529 128.956 535.884 128.63 535.642 128.372 cv
529.788 122.13 523.243 116.547 516.395 111.426 cv
503.741 101.962 489.804 95.0167 474.72 90.3562 cv
466.9 87.9402 458.948 85.992 451.02 83.9687 cv
447.483 83.0658 442.597 82.5536 439.929 79.8216 cv
438.821 78.687 437.974 76.8877 438.978 75.404 cv
439.87 74.0864 441.888 74.4201 441.728 76.1645 cv
441.542 78.1862 444.774 78.5509 445.219 76.637 cv
446.147 72.6415 441.864 69.0589 438.075 70.8646 cv
434.198 72.7127 433.583 77.7942 435.87 81.1114 cv
438.288 84.6175 442.435 85.7413 446.352 86.7001 cv
cp
f
468.654 71.9978 mo
486.109 85.3373 506.647 94.0996 523.302 108.591 cv
523.549 108.806 523.883 108.399 523.672 108.169 cv
516.97 100.832 509.297 94.6504 501.29 88.804 cv
494.075 83.5355 486.771 78.3972 479.585 73.0879 cv
472.934 68.1735 465.529 63.0114 461.312 55.7002 cv
457.637 49.3278 456.67 39.453 464.338 35.5539 cv
467.021 34.1898 470.86 34.0971 472.882 36.707 cv
474.201 38.4094 473.334 42.5903 470.739 40.7503 cv
467.02 38.1133 463.154 43.9392 466.806 46.5988 cv
471.816 50.2471 479.041 47.2812 480.515 41.4034 cv
482.12 35.0063 477.569 29.1568 471.382 27.8325 cv
460.815 25.5703 451.889 35.4784 451.957 45.5294 cv
452.034 57.0122 460.081 65.4454 468.654 71.9978 cv
cp
f
451.956 69.6321 mo
453.9 69.6321 455.476 68.0561 455.476 66.1121 cv
455.476 64.168 453.9 62.5921 451.956 62.5921 cv
450.012 62.5921 448.436 64.168 448.436 66.1121 cv
448.436 68.0561 450.012 69.6321 451.956 69.6321 cv
cp
f
518.608 96.9946 mo
522.595 101.237 526.141 105.903 529.244 110.827 cv
530.873 113.411 532.365 116.081 533.711 118.823 cv
535.011 121.47 535.988 124.252 537.263 126.904 cv
538.996 130.512 544.81 127.926 543.645 124.213 cv
541.639 117.818 537.724 111.591 533.859 106.168 cv
527.031 96.5869 518.211 89.4512 508.778 82.5914 cv
499.627 75.9366 490.445 69.1354 484.271 59.4525 cv
484.249 59.4182 484.198 59.4482 484.216 59.4842 cv
486.987 64.8839 490.706 69.6589 494.885 74.0386 cv
502.487 82.0074 511.063 88.9665 518.608 96.9946 cv
cp
f
473.779 81.932 mo
468.355 79.5022 463.553 76.8024 459.943 71.992 cv
457.515 68.7551 452.412 71.4963 454.402 75.231 cv
457.387 80.8333 463.759 83.908 469.396 86.1193 cv
475.792 88.6283 482.344 90.6454 488.66 93.379 cv
502.099 99.1955 514.503 106.671 526.226 115.428 cv
526.37 115.536 526.547 115.298 526.416 115.181 cv
516.01 105.859 504.324 97.7635 492.134 90.9466 cv
486.17 87.6114 480.011 84.7235 473.779 81.932 cv
cp
f
667.483 93.9631 mo
654.68 89.1354 639.897 90.396 626.856 93.5076 cv
614.134 96.5428 601.752 101.489 590.067 107.322 cv
583.732 110.484 577.588 114.025 571.655 117.887 cv
565.672 121.782 559.598 125.868 554.48 130.864 cv
553.916 131.414 554.638 132.346 555.319 131.951 cv
560.206 129.112 564.862 125.902 569.758 123.065 cv
574.668 120.22 579.705 117.593 584.848 115.193 cv
595.161 110.38 605.888 106.472 616.899 103.586 cv
628.368 100.58 640.589 98.5635 652.429 100.408 cv
657.855 101.254 663.186 102.807 667.832 105.8 cv
669.535 106.897 670.865 108.019 672.428 109.727 cv
672.371 109.665 673.175 110.61 673.232 110.649 cv
673.55 111.076 673.845 111.527 674.125 111.976 cv
674.448 112.492 674.753 113.021 675.035 113.56 cv
675.206 113.887 675.367 114.219 675.523 114.554 cv
675.558 114.645 675.603 114.762 675.661 114.913 cv
675.853 115.492 676.051 116.065 676.207 116.655 cv
676.264 116.868 676.57 118.694 676.567 118.369 cv
676.655 119.396 676.658 120.429 676.587 121.458 cv
676.574 121.353 676.408 122.581 676.385 122.683 cv
676.231 123.349 676.041 124.01 675.811 124.654 cv
675.864 124.45 675.319 125.65 675.263 125.75 cv
674.942 126.317 674.596 126.887 674.22 127.428 cv
674.335 127.23 673.576 128.131 673.458 128.247 cv
673.278 128.424 672.153 129.272 672.804 128.847 cv
672.431 129.098 672.058 129.344 671.665 129.565 cv
671.409 129.709 671.146 129.839 670.882 129.969 cv
670.831 129.988 670.781 130.006 670.719 130.029 cv
670.172 130.175 669.611 130.326 669.069 130.486 cv
668.987 130.5 668.921 130.513 668.857 130.525 cv
668.611 130.541 668.364 130.553 668.116 130.555 cv
667.894 130.558 667.148 130.471 666.997 130.474 cv
666.506 130.358 666.02 130.227 665.536 130.063 cv
662.041 128.881 657.68 131.421 656.868 134.985 cv
655.988 138.848 658.033 142.436 661.79 143.653 cv
667.844 145.615 674.997 144.385 680.14 140.657 cv
686.091 136.341 689.311 129.897 689.51 122.555 cv
689.877 109.024 679.424 98.4656 667.483 93.9631 cv
cp
f
688.886 67.1052 mo
689.006 67.1147 689.131 67.1171 689.255 67.1205 cv
688.972 67.1646 690.166 67.4545 689.5 67.1396 cv
690.003 67.3643 690.551 67.6384 690.969 67.8251 cv
690.979 67.8435 691.09 67.9102 691.301 68.0253 cv
691.312 68.0353 691.319 68.0425 691.33 68.053 cv
691.372 68.0936 691.403 68.1236 691.437 68.1575 cv
691.455 68.2028 691.474 68.2535 691.498 68.3148 cv
691.496 68.313 691.494 68.3113 691.492 68.3095 cv
691.497 68.318 691.501 68.3265 691.506 68.3351 cv
691.528 68.392 691.551 68.4501 691.579 68.5203 cv
691.651 68.8073 691.811 70.232 691.785 69.2507 cv
691.817 70.4843 691.876 70.1426 691.468 71.3041 cv
691.256 71.9086 690.91 72.5765 690.35 73.2864 cv
689.107 74.8655 687.364 75.9648 685.609 76.8842 cv
675.435 82.2147 663.589 84.3602 652.355 86.0687 cv
652.14 86.1013 652.198 86.4386 652.405 86.4394 cv
662.871 86.4832 673.456 86.8268 683.776 84.8022 cv
688.2 83.9343 692.967 82.721 696.675 80.0475 cv
700.888 77.0095 703.851 72.1996 703.713 66.878 cv
703.564 61.1064 698.354 55.0092 692.331 55.0486 cv
689.747 55.0655 686.851 55.9542 685.068 57.8881 cv
681.709 61.5324 684.186 66.7302 688.886 67.1052 cv
cp
f
691.492 68.3095 mo
691.472 68.2753 691.453 68.2411 691.434 68.2069 cv
691.074 67.9443 691.286 68.142 691.492 68.3095 cv
cp
f
718.541 104.221 mo
716.819 99.947 713.16 96.4629 709.14 94.3014 cv
700.949 89.8969 691.683 90.4836 682.739 91.3861 cv
682.025 91.4581 681.726 92.5835 682.555 92.7455 cv
689.379 94.0799 696.962 95.3886 702.463 99.9971 cv
704.543 101.74 706.288 104.007 706.938 106.142 cv
707.177 106.925 707.398 107.73 707.59 108.526 cv
707.67 108.861 707.736 109.198 707.794 109.537 cv
707.733 109.215 707.731 109.362 707.788 109.987 cv
707.775 110.211 707.602 111.695 707.662 111.694 cv
707.459 112.329 707.037 113.569 707.415 112.749 cv
705.83 116.187 706.698 120.17 710.451 121.753 cv
714.105 123.296 717.756 121.233 719.017 117.64 cv
720.531 113.326 720.238 108.431 718.541 104.221 cv
cp
f
648.272 76.1645 mo
648.112 74.4201 650.13 74.0864 651.022 75.404 cv
652.026 76.8877 651.179 78.687 650.071 79.8216 cv
647.404 82.5536 642.517 83.0658 638.979 83.9687 cv
631.052 85.992 623.1 87.9402 615.28 90.3562 cv
600.196 95.0167 586.259 101.962 573.605 111.426 cv
566.757 116.547 560.212 122.13 554.358 128.372 cv
554.116 128.63 554.471 128.956 554.736 128.75 cv
569.52 117.269 584.103 105.799 601.592 98.6495 cv
610.555 94.9853 619.928 92.4466 629.317 90.1446 cv
634.089 88.9748 638.876 87.8681 643.648 86.7001 cv
647.565 85.7413 651.712 84.6175 654.13 81.1114 cv
656.417 77.7942 655.802 72.7127 651.924 70.8646 cv
648.136 69.0589 643.852 72.6415 644.781 76.637 cv
645.226 78.5509 648.458 78.1862 648.272 76.1645 cv
cp
f
623.194 46.5988 mo
626.846 43.9392 622.98 38.1133 619.261 40.7503 cv
616.666 42.5903 615.799 38.4094 617.118 36.707 cv
619.14 34.0971 622.979 34.1898 625.662 35.5539 cv
633.33 39.453 632.363 49.3278 628.688 55.7002 cv
624.471 63.0114 617.066 68.1735 610.415 73.0879 cv
603.229 78.3972 595.925 83.5355 588.71 88.804 cv
580.703 94.6504 573.03 100.832 566.328 108.169 cv
566.117 108.399 566.451 108.806 566.698 108.591 cv
583.353 94.0996 603.891 85.3373 621.346 71.9978 cv
629.919 65.4454 637.966 57.0122 638.043 45.5294 cv
638.111 35.4784 629.185 25.5703 618.617 27.8325 cv
612.431 29.1568 607.88 35.0063 609.485 41.4034 cv
610.959 47.2812 618.184 50.2471 623.194 46.5988 cv
cp
f
634.524 66.1121 mo
634.524 68.0561 636.1 69.6321 638.044 69.6321 cv
639.988 69.6321 641.564 68.0561 641.564 66.1121 cv
641.564 64.168 639.988 62.5921 638.044 62.5921 cv
636.1 62.5921 634.524 64.168 634.524 66.1121 cv
cp
f
556.141 106.168 mo
552.276 111.591 548.361 117.818 546.355 124.213 cv
545.19 127.926 551.004 130.512 552.737 126.904 cv
554.012 124.252 554.989 121.47 556.289 118.823 cv
557.635 116.081 559.127 113.411 560.756 110.827 cv
563.859 105.903 567.405 101.237 571.392 96.9946 cv
578.937 88.9665 587.513 82.0074 595.115 74.0386 cv
599.294 69.6589 603.013 64.8839 605.784 59.4842 cv
605.802 59.4482 605.751 59.4182 605.729 59.4525 cv
599.555 69.1354 590.373 75.9366 581.222 82.5914 cv
571.789 89.4512 562.969 96.5869 556.141 106.168 cv
cp
f
563.774 115.428 mo
575.497 106.671 587.901 99.1955 601.34 93.379 cv
607.656 90.6454 614.208 88.6283 620.604 86.1193 cv
626.241 83.908 632.613 80.8333 635.598 75.231 cv
637.588 71.4963 632.485 68.7551 630.057 71.992 cv
626.447 76.8024 621.645 79.5022 616.221 81.932 cv
609.989 84.7235 603.83 87.6114 597.866 90.9466 cv
585.676 97.7635 573.99 105.859 563.584 115.181 cv
563.453 115.298 563.63 115.536 563.774 115.428 cv
cp
f
548.52 134.328 mo
548.52 132.384 546.944 130.808 545 130.808 cv
543.056 130.808 541.48 132.384 541.48 134.328 cv
541.48 136.272 543.056 137.848 545 137.848 cv
546.944 137.848 548.52 136.272 548.52 134.328 cv
cp
f
537.397 135.625 mo
534.837 135.335 532.456 136.939 531.979 139.513 cv
531.482 142.193 533.786 145.099 536.593 144.802 cv
539.214 144.525 540.17 142.194 539.471 140.411 cv
540.234 140.737 540.94 141.189 541.585 141.71 cv
542.886 142.76 543.738 144.149 544.784 145.426 cv
544.854 145.513 544.981 145.434 544.987 145.342 cv
545.251 141.364 541.481 136.088 537.397 135.625 cv
cp
f
552.603 135.625 mo
548.519 136.088 544.749 141.364 545.013 145.342 cv
545.019 145.434 545.146 145.513 545.216 145.426 cv
546.262 144.149 547.114 142.76 548.415 141.71 cv
549.06 141.189 549.765 140.737 550.529 140.411 cv
549.83 142.194 550.786 144.525 553.407 144.802 cv
556.214 145.099 558.518 142.193 558.021 139.513 cv
557.544 136.939 555.163 135.335 552.603 135.625 cv
cp
f
520.285 82.0832 mo
526.704 91.0954 534.908 98.4158 542.229 106.652 cv
542.57 107.035 543.242 106.529 542.947 106.098 cv
534.302 93.4717 527.014 79.1341 521.854 64.7173 cv
519.876 59.19 515.227 47.4834 520.742 42.7096 cv
523.238 40.5491 526.715 41.7956 529.017 43.6459 cv
531.941 45.9951 532.861 49.0203 536.794 50.0983 cv
539.438 50.8229 543.178 49.1992 543.633 46.215 cv
545.206 35.9158 531.9 28.2993 522.755 29.2103 cv
511.259 30.3555 506.089 41.586 507.458 52.0356 cv
508.882 62.8942 513.999 73.2575 520.285 82.0832 cv
cp
f
553.206 50.0983 mo
557.139 49.0203 558.059 45.9951 560.983 43.6459 cv
563.285 41.7956 566.762 40.5491 569.258 42.7096 cv
574.773 47.4834 570.124 59.19 568.146 64.7173 cv
562.986 79.1341 555.698 93.4717 547.053 106.098 cv
546.758 106.529 547.43 107.035 547.77 106.652 cv
555.092 98.4158 563.296 91.0954 569.715 82.0832 cv
576.001 73.2575 581.118 62.8942 582.542 52.0356 cv
583.911 41.586 578.741 30.3555 567.245 29.2103 cv
558.1 28.2993 544.794 35.9158 546.367 46.215 cv
546.822 49.1992 550.563 50.8229 553.206 50.0983 cv
cp
f
545 101.352 mo
549.71 101.352 553.529 92.5137 553.529 81.6106 cv
553.529 70.7076 545 61.8689 545 61.8689 cv
545 61.8689 536.471 70.7076 536.471 81.6106 cv
536.471 92.5137 540.29 101.352 545 101.352 cv
cp
f
28.9527 274.207 mo
47.7457 274.116 63.9253 284.778 77.4474 296.848 cv
90.7415 308.714 102.295 322.542 116.925 332.875 cv
130.507 342.467 148.337 349.531 164.958 344.103 cv
178.789 339.586 189.193 325.851 185.263 311.006 cv
183.185 303.154 176.021 294.724 167.119 295.736 cv
162.698 296.238 158.513 299.291 157.746 303.851 cv
156.983 308.384 159.731 313.004 164.229 314.181 cv
169.055 315.443 171.119 307.94 166.287 306.714 cv
164.271 306.203 165.722 303.832 166.929 303.195 cv
169.585 301.795 172.86 303.418 174.958 305.14 cv
179.675 309.014 181.605 315.383 181.1 321.321 cv
179.842 336.105 163.849 343.883 150.562 343.314 cv
134.604 342.629 120.32 333.509 108.528 323.424 cv
96.6348 313.253 86.3111 301.373 74.1514 291.5 cv
61.4567 281.192 45.6662 273.225 28.9527 273.855 cv
28.7273 273.863 28.7252 274.208 28.9527 274.207 cv
cp
f
226.941 230.262 mo
226.181 230.304 225.427 230.377 224.678 230.478 cv
227.561 228.675 230.62 227.133 233.9 225.84 cv
234.539 225.589 234.511 224.608 233.744 224.593 cv
226.106 224.445 218.282 227.044 211.942 231.324 cv
213.429 229.548 215.007 227.833 216.604 226.111 cv
217.079 225.598 216.624 224.881 215.971 224.983 cv
208.778 226.113 202.613 231.487 198.859 237.513 cv
198.551 238.008 198.26 238.514 197.977 239.024 cv
198.264 237.521 198.651 236.043 199.127 234.627 cv
199.371 233.899 198.409 233.445 197.898 233.904 cv
193.927 237.465 191.601 242.187 190.712 247.437 cv
190.543 248.431 190.435 249.479 190.381 250.552 cv
189.799 254.679 190.621 259.099 191.647 263.015 cv
192.764 267.28 194.45 271.276 196.628 274.967 cv
196.537 274.877 196.439 274.795 196.348 274.706 cv
193.629 271.557 190.098 268.898 186.837 266.506 cv
182.528 263.344 177.954 260.545 173.184 258.135 cv
163.542 253.262 153.142 249.932 142.439 248.434 cv
121.877 245.556 95.0906 249.493 86.7374 271.658 cv
84.8101 276.772 84.5994 282.526 85.8951 287.817 cv
87.1356 292.884 90.4997 300.413 96.3953 300.751 cv
98.3444 300.863 99.8556 298.725 99.314 296.92 cv
98.5893 294.505 97.0216 293.4 95.5112 291.514 cv
94.3428 290.056 93.3936 288.337 92.7503 286.585 cv
91.3351 282.728 91.0009 278.466 91.9342 274.457 cv
94.111 265.107 101.694 258.106 110.32 254.515 cv
120.12 250.435 131.257 250.248 141.666 251.428 cv
151.655 252.56 161.53 255.365 170.643 259.601 cv
173.902 261.116 177.068 262.828 180.139 264.695 cv
172.881 261.956 164.968 260.608 157.38 260.27 cv
146.94 259.804 135.829 261.145 126.63 266.43 cv
118.801 270.927 112.177 278.464 110.194 287.43 cv
108.3 295.997 110.988 305.558 117.552 311.523 cv
119.045 312.879 120.738 314.137 122.573 314.993 cv
124.822 316.043 128.713 315.527 128.809 312.393 cv
128.89 309.75 126.718 308.735 124.771 307.615 cv
123.109 306.66 121.655 305.38 120.453 303.885 cv
115.052 297.16 115.349 287.914 119.626 280.741 cv
124.762 272.127 134.142 267.336 143.752 265.557 cv
157.817 262.954 173.765 264.914 186.862 271.667 cv
186.254 271.474 185.645 271.281 185.029 271.114 cv
177.258 269 169.032 268.467 161.175 270.476 cv
154.43 272.2 148.156 275.881 143.728 281.298 cv
139.308 286.708 136.654 293.893 137.599 300.925 cv
138.09 304.586 139.343 308.065 141.436 311.118 cv
143.234 313.739 145.521 315.757 148.236 317.381 cv
146.056 315.734 144.177 313.843 142.735 311.507 cv
141.063 308.797 140.013 305.729 139.611 302.572 cv
138.291 292.205 144.991 282.238 154.104 277.76 cv
159.712 275.005 165.912 274.116 172.107 274.494 cv
174.518 274.641 176.942 275.037 179.291 275.597 cv
180.249 275.826 181.213 276.082 182.149 276.387 cv
182.932 276.643 183.716 276.887 184.489 277.175 cv
184.821 277.299 185.663 277.76 185.903 277.704 cv
186.076 277.664 186.561 277.985 186.702 278.049 cv
186.978 278.173 187.253 278.298 187.53 278.422 cv
198.469 283.317 206.813 292.916 210.308 304.366 cv
214.003 316.47 212.034 329.744 204.806 340.146 cv
201.328 345.151 196.643 349.238 191.434 352.349 cv
184.525 356.475 176.619 358.6 168.671 359.506 cv
165.923 359.82 163.111 359.947 160.344 359.894 cv
158.121 359.85 155.58 359.703 153.559 359.51 cv
152.768 359.415 151.975 359.326 151.186 359.218 cv
139.165 357.572 127.428 352.679 117.891 345.158 cv
111.601 340.198 106.146 334.348 100.694 328.507 cv
95.2432 322.665 89.6566 316.98 83.7221 311.626 cv
78.101 306.554 72.2546 301.727 66.227 297.146 cv
59.9644 292.388 53.4694 287.895 45.9305 285.408 cv
40.0057 283.454 33.7035 282.805 27.5806 284.181 cv
20.6648 285.736 14.5696 289.666 9.89145 294.944 cv
5.36615 300.05 2.03127 306.422 .681858 313.135 cv
-.701428 320.015 .0276371 326.901 2.79932 333.336 cv
1.50942 329.159 .908069 324.902 1.25017 320.528 cv
1.90226 312.19 5.76921 304.167 11.5173 298.135 cv
14.4241 295.084 17.881 292.474 21.7552 290.785 cv
23.814 289.887 25.9481 289.233 28.1604 288.843 cv
29.2884 288.645 30.4298 288.515 31.5735 288.449 cv
32.1466 288.416 32.7274 288.454 33.3011 288.461 cv
33.4867 288.463 34.0595 288.355 34.2129 288.47 cv
34.39 288.603 35.2747 288.564 35.5226 288.586 cv
35.9201 288.621 36.3106 288.678 36.7048 288.738 cv
37.5607 288.868 38.4154 289.021 39.2589 289.218 cv
46.7092 290.964 53.3281 295.214 59.1985 299.988 cv
61.9581 302.233 64.6804 304.522 67.3702 306.849 cv
71.2298 311.882 74.3449 317.655 76.3635 323.698 cv
74.8374 322.869 73.1004 322.427 71.2141 322.555 cv
67.9643 322.775 65.4178 324.695 63.5169 327.214 cv
61.8715 329.395 60.8354 331.949 59.3124 334.21 cv
57.7709 336.498 55.5577 338.091 53.1371 339.338 cv
47.9545 342.008 40.8482 342.472 35.643 339.817 cv
35.4645 339.725 35.2953 339.936 35.4253 340.089 cv
38.8081 344.074 43.4444 347.328 48.7856 347.622 cv
54.3623 347.929 59.7788 345.624 63.8731 341.932 cv
65.8913 340.112 67.4391 337.928 68.7434 335.563 cv
69.0225 335.057 69.5273 333.874 70.1305 332.894 cv
69.4666 334.898 68.8201 336.821 67.6762 338.713 cv
66.2335 341.1 64.4144 343.194 62.2306 344.936 cv
58.4371 347.963 53.4824 349.463 48.6576 349.42 cv
37.7767 349.323 28.6882 341.3 27.7365 330.351 cv
27.6821 329.726 26.6937 329.47 26.5614 330.185 cv
24.604 340.755 30.7501 350.601 39.8436 355.084 cv
33.224 354.412 26.9554 350.772 23.6755 344.76 cv
23.6348 344.686 23.5339 344.736 23.5455 344.811 cv
25.2391 355.83 35.9805 361.798 46.4816 361.301 cv
47.2415 361.265 47.9962 361.197 48.7454 361.102 cv
45.8495 362.883 42.7787 364.402 39.4893 365.671 cv
38.849 365.918 38.8699 366.898 39.6368 366.919 cv
47.273 367.124 55.1163 364.583 61.4874 360.351 cv
59.9876 362.115 58.3966 363.818 56.7874 365.529 cv
56.3081 366.038 56.7584 366.759 57.412 366.661 cv
64.6132 365.585 70.8174 360.257 74.6162 354.26 cv
74.9286 353.766 75.2234 353.263 75.51 352.755 cv
75.2116 354.256 74.814 355.731 74.3275 357.143 cv
74.0775 357.869 75.0359 358.33 75.5504 357.875 cv
79.5484 354.344 81.909 349.639 82.8376 344.396 cv
83.0135 343.403 83.1291 342.356 83.1918 341.283 cv
83.8044 337.161 83.0153 332.735 82.0184 328.812 cv
80.6517 323.434 78.3974 318.466 75.3541 314.015 cv
76.0033 314.619 76.6605 315.214 77.3038 315.825 cv
83.2491 321.471 88.8474 327.426 94.2935 333.55 cv
99.7572 339.695 105.26 345.865 111.593 351.139 cv
114.978 353.958 118.608 356.459 122.431 358.648 cv
129.512 362.702 137.238 365.62 145.227 367.275 cv
149.248 368.108 153.373 368.637 157.48 368.794 cv
160.678 368.917 163.848 368.887 167.041 368.675 cv
173.693 368.236 180.207 366.765 186.473 364.518 cv
189.734 363.349 192.914 361.792 195.868 359.986 cv
199.524 357.751 202.879 355.163 205.918 352.151 cv
208.432 349.659 210.63 346.908 212.552 343.938 cv
216.96 337.129 219.545 329.173 220.068 321.084 cv
220.591 312.993 219.065 304.83 215.722 297.453 cv
213.212 291.912 209.631 286.824 205.235 282.605 cv
205.514 277.098 208.665 271.827 214.067 269.647 cv
217.2 268.382 221.103 268.51 223.187 271.501 cv
224.976 274.069 224.968 278.526 221.699 279.988 cv
220.407 280.566 218.259 280.317 217.756 278.76 cv
217.567 278.174 217.639 277.362 218.075 276.896 cv
218.268 276.69 218.411 276.675 218.593 276.622 cv
218.649 276.682 218.731 276.72 218.731 276.829 cv
218.728 278.359 220.347 278.961 221.493 278.128 cv
222.737 277.225 222.949 275.555 222.242 274.249 cv
221.424 272.739 219.654 272.082 218.013 272.334 cv
214.877 272.817 213.125 276.007 213.528 278.985 cv
213.941 282.034 216.69 284.184 219.693 284.305 cv
222.756 284.428 225.506 282.526 226.813 279.813 cv
229.117 275.034 226.655 269.095 221.827 267.039 cv
216.534 264.784 210.376 267.97 207.023 272.101 cv
204.898 274.719 203.803 277.872 203.714 281.063 cv
201.064 277.03 198.896 272.634 197.34 268.086 cv
198.872 268.904 200.612 269.333 202.497 269.191 cv
205.745 268.946 208.277 267.008 210.16 264.474 cv
211.789 262.282 212.806 259.72 214.312 257.448 cv
215.836 255.148 218.038 253.539 220.449 252.274 cv
225.611 249.565 232.714 249.049 237.939 251.665 cv
238.118 251.755 238.286 251.543 238.155 251.391 cv
234.742 247.431 230.082 244.212 224.739 243.958 cv
219.16 243.692 213.761 246.037 209.694 249.76 cv
207.689 251.595 206.158 253.79 204.871 256.165 cv
204.596 256.673 204.1 257.86 203.504 258.845 cv
204.153 256.835 204.785 254.908 205.915 253.007 cv
207.34 250.609 209.143 248.502 211.314 246.744 cv
215.085 243.689 220.028 242.152 224.853 242.159 cv
235.735 242.175 244.882 250.13 245.916 261.071 cv
245.975 261.696 246.965 261.944 247.092 261.229 cv
248.971 250.644 242.751 240.845 233.625 236.429 cv
240.249 237.052 246.545 240.645 249.869 246.633 cv
249.911 246.707 250.011 246.656 249.999 246.581 cv
248.223 235.574 237.438 229.687 226.941 230.262 cv
cp
f
157.962 335.386 mo
162.956 335.386 167.005 331.337 167.005 326.343 cv
167.005 321.348 162.956 317.299 157.962 317.299 cv
152.967 317.299 148.918 321.348 148.918 326.343 cv
148.918 331.337 152.967 335.386 157.962 335.386 cv
cp
f
174.995 240.743 mo
176.425 239.915 176.932 238.118 176.128 236.731 cv
175.324 235.343 173.513 234.89 172.084 235.719 cv
170.654 236.547 170.147 238.343 170.951 239.731 cv
171.755 241.118 173.566 241.571 174.995 240.743 cv
cp
f
171.69 249.288 mo
173.502 247.974 173.241 245.903 171.989 244.928 cv
172.686 244.835 173.392 244.858 174.081 244.954 cv
175.392 245.138 176.537 245.704 177.751 246.159 cv
177.825 247.496 178.183 250.532 179.874 253.294 cv
182.122 256.969 185.874 258.767 185.874 258.767 cv
185.874 258.767 185.982 254.607 183.734 250.933 cv
182.035 248.156 179.479 246.453 178.331 245.785 cv
178.534 244.52 178.616 243.26 179.104 242.044 cv
179.362 241.398 179.694 240.774 180.121 240.216 cv
180.345 241.787 182.011 243.043 184.053 242.124 cv
186.24 241.139 186.732 238.084 185.259 236.383 cv
183.843 234.749 181.429 234.618 179.666 235.917 cv
177.052 237.842 176.362 242.618 177.756 245.471 cv
177.747 245.467 177.733 245.46 177.733 245.46 cv
177.733 245.46 177.732 245.478 177.732 245.498 cv
175.954 242.865 171.459 241.084 168.485 242.396 cv
166.482 243.28 165.395 245.439 166.109 247.48 cv
166.852 249.604 169.748 250.697 171.69 249.288 cv
cp
f
719.291 294.941 mo
717.53 285.949 712.813 277.73 706.173 271.446 cv
692.543 258.547 671.94 255.675 654.996 263.438 cv
652.999 264.353 651.074 265.41 649.216 266.581 cv
648.615 266.959 649.249 267.822 649.847 267.471 cv
665.89 258.072 687.646 258.371 701.971 270.887 cv
708.773 276.829 713.802 285.042 715.493 293.958 cv
717.194 302.925 715.398 312.181 710.794 320.031 cv
706.241 327.796 698.924 333.461 690.281 335.927 cv
680.895 338.605 670.636 337.346 661.808 333.401 cv
641.741 324.432 632.39 303.33 616.98 288.919 cv
608.891 281.354 597.851 275.148 586.404 276.398 cv
577.41 277.38 568.262 281.72 563.859 289.936 cv
563.512 290.583 564.552 291.254 564.968 290.631 cv
567.412 286.972 570.936 284.238 575.073 282.741 cv
579.376 281.184 583.593 281.104 588.076 281.725 cv
592.949 282.399 597.474 284.252 601.652 286.769 cv
606.192 290.438 608.953 296.49 607.262 302.297 cv
605.645 307.848 600.391 311.846 594.532 310.857 cv
592.097 310.446 589.772 309.175 588.387 307.091 cv
587.053 305.083 586.435 301.976 587.836 299.831 cv
588.851 298.276 591.177 297.188 592.981 297.915 cv
593.692 298.201 595.603 300.66 593.937 300.616 cv
589.834 300.506 588.762 306.033 592.926 307.028 cv
596.63 307.914 600.327 304.674 600.874 301.1 cv
601.446 297.361 598.937 293.672 595.532 292.284 cv
588.352 289.358 581.101 295.716 581.341 302.968 cv
581.586 310.418 588.346 315.618 595.451 315.687 cv
602.423 315.755 608.117 310.677 609.831 304.075 cv
611.097 299.202 609.795 294.264 606.918 290.401 cv
609.615 292.499 612.141 294.815 614.487 297.188 cv
622.322 305.116 628.499 314.51 636.062 322.691 cv
643.813 331.075 653.047 338.002 664.076 341.38 cv
673.833 344.368 684.349 344.463 693.959 340.824 cv
703.022 337.393 710.344 330.705 714.939 322.214 cv
719.391 313.989 721.094 304.146 719.291 294.941 cv
cp
f
656.941 343.075 mo
654.877 341.793 652.239 341.274 650.03 340.206 cv
647.849 339.152 645.799 337.906 643.81 336.527 cv
639.746 333.709 636.223 330.322 632.84 326.735 cv
625.897 319.373 620.566 310.635 615.248 302.08 cv
615.197 301.997 615.06 302.07 615.098 302.16 cv
619.152 312.005 623.289 322 629.443 330.758 cv
632.44 335.023 636.244 339.006 640.328 342.241 cv
642.44 343.915 644.731 345.396 647.084 346.708 cv
649.39 347.994 652.252 349.658 654.931 349.788 cv
654.913 349.739 li
655.21 349.788 655.523 349.814 655.848 349.812 cv
657.389 349.803 658.748 348.279 658.975 346.846 cv
659.24 345.175 658.282 343.908 656.941 343.075 cv
cp
f
611.88 308.802 mo
613.968 312.732 614.403 318.351 611.381 321.964 cv
610.357 323.189 608.927 324.079 607.338 323.427 cv
606.217 322.967 605.602 322.037 604.235 322.18 cv
603.121 322.296 602.341 322.945 601.835 323.91 cv
601.348 324.84 601.556 326.016 602.117 326.854 cv
603.739 329.276 607.299 329.68 609.911 328.883 cv
612.591 328.064 614.61 325.889 615.558 323.293 cv
617.414 318.213 615.999 312.372 612.396 308.437 cv
612.119 308.135 611.689 308.442 611.88 308.802 cv
cp
f
623.459 329.299 mo
621.711 326.848 620.457 324.213 619.449 321.382 cv
619.383 321.197 619.096 321.266 619.116 321.461 cv
619.423 324.462 620.029 327.456 620.798 330.373 cv
621.459 332.882 622.26 337.66 625.315 338.067 cv
626.501 338.225 627.446 337.449 627.713 336.322 cv
628.112 334.64 627.137 333.788 626.121 332.645 cv
625.175 331.579 624.286 330.46 623.459 329.299 cv
cp
f
675.527 297.537 mo
674.743 292.702 671.084 288.505 666.44 286.935 cv
663.787 286.037 660.831 285.97 658.316 287.32 cv
655.581 288.789 653.465 291.955 654.481 295.085 cv
655.474 298.142 659.569 297.181 660.227 294.498 cv
660.633 292.843 660.316 291.686 662.026 290.716 cv
663.614 289.815 665.63 289.789 667.379 290.15 cv
671.184 290.934 674.126 293.989 675.416 297.563 cv
675.438 297.624 675.537 297.603 675.527 297.537 cv
cp
f
666.25 295.627 mo
663.484 295.689 660.484 298.28 661.581 301.231 cv
662.461 303.598 666.096 303.247 666.47 300.731 cv
666.618 299.743 666.284 299.031 667.49 298.615 cv
669.241 298.011 671.028 299.949 672.416 300.781 cv
672.563 300.87 672.757 300.678 672.687 300.527 cv
671.575 298.139 669.077 295.562 666.25 295.627 cv
cp
f
699.435 301.969 mo
699.302 302.596 li
699.211 303.013 699.15 303.438 699.041 303.853 cv
698.671 305.09 li
697.581 308.359 695.643 311.428 693.068 313.926 cv
691.797 315.187 690.398 316.345 688.869 317.303 cv
688.13 317.82 687.319 318.219 686.546 318.678 cv
685.732 319.056 684.941 319.488 684.1 319.791 cv
683.26 320.158 682.464 320.385 681.669 320.655 cv
681.266 320.791 680.742 320.898 680.287 321.021 cv
679.581 321.198 li
679.543 321.208 li
679.505 321.214 li
679.34 321.242 li
679.01 321.297 li
678.571 321.371 678.133 321.446 677.696 321.52 cv
677.259 321.592 676.825 321.687 676.385 321.703 cv
675.507 321.757 674.636 321.89 673.766 321.907 cv
670.287 322.034 666.879 321.619 663.718 320.812 cv
660.552 320.018 657.626 318.885 654.993 317.652 cv
654.339 317.329 653.699 317.013 653.073 316.704 cv
652.455 316.377 651.869 316.025 651.278 315.709 cv
650.984 315.548 650.694 315.388 650.408 315.231 cv
650.131 315.059 649.858 314.889 649.588 314.721 cv
649.047 314.385 648.521 314.058 648.012 313.742 cv
647.022 313.055 646.096 312.413 645.24 311.819 cv
644.407 311.191 643.616 310.631 642.938 310.088 cv
642.268 309.538 641.663 309.048 641.126 308.627 cv
640.596 308.197 640.167 307.802 639.808 307.496 cv
639.089 306.883 638.706 306.557 638.706 306.557 cv
638.706 306.557 639.006 306.961 639.569 307.72 cv
639.857 308.093 640.195 308.566 640.627 309.099 cv
641.062 309.631 641.575 310.235 642.157 310.91 cv
642.743 311.58 643.43 312.279 644.162 313.068 cv
644.904 313.846 645.775 314.616 646.683 315.471 cv
648.569 317.093 650.749 318.911 653.396 320.545 cv
656.034 322.183 659.066 323.744 662.496 324.931 cv
665.918 326.121 669.756 326.899 673.79 326.972 cv
674.796 327.006 675.814 326.936 676.839 326.907 cv
677.354 326.904 677.863 326.822 678.376 326.76 cv
678.889 326.695 679.404 326.63 679.92 326.564 cv
680.308 326.514 li
680.502 326.489 li
680.599 326.476 li
680.783 326.438 li
681.495 326.29 li
681.983 326.181 682.421 326.116 682.954 325.97 cv
684.027 325.671 685.12 325.36 686.103 324.966 cv
687.125 324.62 688.095 324.136 689.087 323.695 cv
690.041 323.179 691.026 322.703 691.929 322.084 cv
693.788 320.934 695.512 319.544 697.094 318 cv
700.237 314.902 702.715 311.005 703.976 306.745 cv
704.12 306.21 704.264 305.675 704.408 305.142 cv
704.533 304.605 704.607 304.057 704.705 303.517 cv
704.836 302.705 li
704.854 302.568 li
704.857 302.523 li
704.865 302.432 li
704.879 302.25 li
704.909 301.886 li
704.946 301.397 704.997 300.95 705 300.353 cv
705.046 299.209 704.998 298.157 704.915 297.102 cv
704.853 296.576 704.806 296.05 704.723 295.531 cv
704.626 295.015 704.528 294.501 704.432 293.989 cv
703.538 289.905 701.624 286.299 699.349 283.391 cv
697.071 280.462 694.416 278.215 691.833 276.441 cv
689.232 274.682 686.667 273.412 684.34 272.481 cv
682.019 271.532 679.916 270.953 678.183 270.549 cv
676.453 270.127 675.061 269.974 674.126 269.841 cv
673.184 269.752 672.681 269.705 672.681 269.705 cv
672.681 269.705 673.158 269.864 674.053 270.162 cv
674.941 270.472 676.234 270.946 677.83 271.632 cv
679.425 272.318 681.31 273.255 683.374 274.449 cv
684.402 275.057 685.471 275.736 686.546 276.515 cv
687.633 277.276 688.724 278.137 689.813 279.077 cv
691.975 280.97 694.121 283.226 695.847 285.908 cv
697.585 288.574 698.908 291.652 699.444 294.958 cv
699.497 295.373 699.55 295.789 699.603 296.207 cv
699.632 296.627 699.662 297.048 699.692 297.471 cv
699.723 298.318 699.721 299.188 699.656 299.974 cv
699.65 300.344 699.575 300.859 699.517 301.337 cv
699.472 301.699 li
699.45 301.88 li
699.439 301.97 li
699.433 302.016 li
699.451 301.856 699.433 301.994 699.435 301.969 cv
cp
f
572.841 249.134 mo
577.842 251.298 583.964 250.103 587.102 245.411 cv
588.599 243.172 589.267 240.276 588.7 237.621 cv
588.031 234.49 585.584 231.896 582.483 231.087 cv
580.368 230.534 578.079 230.803 576.264 232.064 cv
573.715 233.835 572.45 237.495 574.004 240.322 cv
575.503 243.049 579.532 244.23 581.844 241.796 cv
582.823 240.764 583.28 239.178 582.79 237.815 cv
582.313 236.489 581.058 235.708 579.677 235.72 cv
581.599 235.91 582.891 237.626 582.386 239.532 cv
581.864 241.504 579.86 242.504 577.944 241.989 cv
576.162 241.51 574.84 239.879 574.841 238.018 cv
574.843 236.254 575.793 234.525 577.303 233.603 cv
577.745 233.333 578.229 233.133 578.73 233.005 cv
579.095 232.912 579.469 232.868 579.845 232.86 cv
579.94 232.858 580.167 232.825 580.128 232.854 cv
580.301 232.723 581.119 232.963 581.321 233.008 cv
581.903 233.137 582.466 233.349 582.99 233.632 cv
583.88 234.113 584.654 234.81 585.23 235.641 cv
586.012 236.77 586.298 238.023 586.335 239.364 cv
586.142 241.777 585.169 243.95 583.248 245.482 cv
581.754 246.673 580.017 247.14 578.144 247.214 cv
578.181 247.208 577.972 247.2 577.935 247.197 cv
577.761 247.183 577.587 247.175 577.413 247.163 cv
576.534 247.099 575.638 246.897 574.813 246.589 cv
573.06 245.935 571.479 244.805 570.319 243.335 cv
568.818 241.435 568.223 239.279 568.113 236.92 cv
568.119 236.943 568.132 236.645 568.135 236.586 cv
568.149 236.352 568.159 236.119 568.174 235.886 cv
568.21 235.317 568.304 234.711 568.443 234.157 cv
569.236 230.987 571.038 228.188 573.744 226.308 cv
576.014 224.731 578.56 224.08 581.27 223.933 cv
581.733 223.907 582.231 223.971 582.691 223.998 cv
583.996 224.075 585.376 224.354 586.608 224.787 cv
589.161 225.684 591.473 227.051 593.379 228.988 cv
595.854 231.503 597.452 234.725 598.06 238.182 cv
598.745 242.081 598.035 246.268 596.482 249.877 cv
594.644 254.15 591.39 257.809 587.417 260.212 cv
585.361 261.455 583.167 262.305 580.883 262.853 cv
573.04 264.286 565.545 267.308 558.979 272.065 cv
558.376 272.502 559.023 273.397 559.644 273.003 cv
570.115 266.346 583.012 263.687 595.282 265.477 cv
601.208 266.341 606.954 268.171 612.252 270.969 cv
618.188 274.103 623.16 278.582 627.67 283.506 cv
632.703 289.002 637.206 294.951 642.273 300.418 cv
647.399 305.95 653.056 311.42 660.326 313.959 cv
666.59 316.147 673.763 315.624 679.369 311.908 cv
684.906 308.236 687.191 301.447 685.697 295.08 cv
683.923 287.527 677.373 281.875 670.205 279.489 cv
663.426 277.232 654.768 278.064 651.236 285.106 cv
650.672 286.229 652.343 287.287 653.117 286.285 cv
661.752 275.095 681.064 286.239 681.472 298.393 cv
681.666 304.177 677.334 308.359 671.726 308.84 cv
665.279 309.393 659.505 305.443 654.746 301.561 cv
644.291 293.034 636.746 281.476 625.977 273.279 cv
616.745 266.253 605.572 262.291 593.974 261.906 cv
591.095 261.81 588.22 261.911 585.375 262.209 cv
589.647 260.647 593.439 257.82 596.15 254.135 cv
598.146 251.423 599.552 248.271 600.232 244.974 cv
600.9 241.738 600.824 238.508 600.068 235.304 cv
598.539 228.818 593.132 223.555 586.852 221.618 cv
581.389 219.932 575.299 220.715 570.826 224.405 cv
567.077 227.497 564.949 232.011 564.837 236.859 cv
564.715 242.114 568.053 247.061 572.841 249.134 cv
cp
f
562.81 296.378 mo
561.659 293.3 560.823 290.151 561.268 286.78 cv
561.904 281.953 564.865 277.653 568.832 274.955 cv
568.937 274.883 568.842 274.692 568.725 274.753 cv
564.103 277.179 560.465 280.836 558.233 285.556 cv
557.181 287.781 556.423 290.149 556.119 292.596 cv
554.863 289.612 553.79 286.512 553.215 283.347 cv
552.454 279.154 552.455 274.892 553.391 270.726 cv
554.474 265.907 556.897 261.876 560.579 258.591 cv
560.742 258.446 560.554 258.167 560.38 258.31 cv
553.266 264.168 549.175 273.508 548.89 282.624 cv
548.742 287.383 549.39 292.093 550.914 296.607 cv
551.906 299.541 553.085 302.428 554.616 305.126 cv
556.046 307.645 558.341 312.416 562.052 311.2 cv
563.383 310.764 564.305 309.495 564.699 308.151 cv
565.193 306.465 564.931 304.689 565.183 302.972 cv
565.457 301.107 565.741 299.268 566.372 297.483 cv
567.699 293.725 569.982 290.681 572.955 288.059 cv
573.01 288.011 572.953 287.927 572.888 287.966 cv
569.345 290.112 565.74 292.994 562.81 296.378 cv
cp
f
488.348 286.769 mo
492.526 284.252 497.051 282.399 501.924 281.725 cv
506.407 281.104 510.624 281.184 514.927 282.741 cv
519.064 284.238 522.588 286.972 525.032 290.631 cv
525.448 291.254 526.488 290.583 526.141 289.936 cv
521.738 281.72 512.59 277.38 503.596 276.398 cv
492.149 275.148 481.109 281.354 473.02 288.919 cv
457.61 303.33 448.259 324.432 428.192 333.401 cv
419.364 337.346 409.105 338.605 399.72 335.927 cv
391.076 333.461 383.759 327.796 379.206 320.031 cv
374.602 312.181 372.806 302.925 374.507 293.958 cv
376.198 285.042 381.227 276.829 388.029 270.887 cv
402.354 258.371 424.11 258.072 440.153 267.471 cv
440.751 267.822 441.385 266.959 440.784 266.581 cv
438.926 265.41 437.001 264.353 435.004 263.438 cv
418.06 255.675 397.457 258.547 383.827 271.446 cv
377.187 277.73 372.47 285.949 370.709 294.941 cv
368.906 304.146 370.609 313.989 375.061 322.214 cv
379.656 330.705 386.978 337.393 396.041 340.824 cv
405.651 344.463 416.167 344.368 425.924 341.38 cv
436.953 338.002 446.187 331.075 453.938 322.691 cv
461.502 314.51 467.678 305.116 475.513 297.188 cv
477.859 294.815 480.385 292.499 483.082 290.401 cv
480.205 294.264 478.903 299.202 480.169 304.075 cv
481.883 310.677 487.577 315.755 494.549 315.687 cv
501.654 315.618 508.414 310.418 508.659 302.968 cv
508.899 295.716 501.648 289.358 494.468 292.284 cv
491.063 293.672 488.554 297.361 489.126 301.1 cv
489.673 304.674 493.37 307.914 497.074 307.028 cv
501.238 306.033 500.167 300.506 496.063 300.616 cv
494.397 300.66 496.308 298.201 497.019 297.915 cv
498.823 297.188 501.149 298.276 502.164 299.831 cv
503.565 301.976 502.947 305.083 501.613 307.091 cv
500.228 309.175 497.903 310.446 495.468 310.857 cv
489.609 311.846 484.355 307.848 482.738 302.297 cv
481.047 296.49 483.809 290.438 488.348 286.769 cv
cp
f
474.752 302.08 mo
469.435 310.635 464.103 319.373 457.161 326.735 cv
453.777 330.322 450.254 333.709 446.19 336.527 cv
444.201 337.906 442.151 339.152 439.97 340.206 cv
437.761 341.274 435.123 341.793 433.059 343.075 cv
431.717 343.908 430.76 345.175 431.025 346.846 cv
431.252 348.279 432.611 349.803 434.152 349.812 cv
434.477 349.814 434.79 349.788 435.087 349.739 cv
435.069 349.788 li
437.748 349.658 440.61 347.994 442.916 346.708 cv
445.269 345.396 447.56 343.915 449.672 342.241 cv
453.756 339.006 457.56 335.023 460.557 330.758 cv
466.711 322 470.848 312.005 474.903 302.16 cv
474.94 302.07 474.803 301.997 474.752 302.08 cv
cp
f
485.765 322.18 mo
484.398 322.037 483.783 322.967 482.662 323.427 cv
481.073 324.079 479.643 323.189 478.619 321.964 cv
475.597 318.351 476.032 312.732 478.12 308.802 cv
478.312 308.442 477.881 308.135 477.604 308.437 cv
474.001 312.372 472.586 318.213 474.442 323.293 cv
475.39 325.889 477.409 328.064 480.089 328.883 cv
482.701 329.68 486.261 329.276 487.883 326.854 cv
488.444 326.016 488.652 324.84 488.165 323.91 cv
487.659 322.945 486.879 322.296 485.765 322.18 cv
cp
f
470.551 321.382 mo
469.543 324.213 468.289 326.848 466.541 329.299 cv
465.714 330.46 464.825 331.579 463.879 332.645 cv
462.863 333.788 461.888 334.64 462.287 336.322 cv
462.554 337.449 463.499 338.225 464.685 338.067 cv
467.74 337.66 468.541 332.882 469.202 330.373 cv
469.971 327.456 470.577 324.462 470.884 321.461 cv
470.904 321.266 470.617 321.197 470.551 321.382 cv
cp
f
435.519 295.085 mo
436.535 291.955 434.419 288.789 431.684 287.32 cv
429.169 285.97 426.213 286.037 423.56 286.935 cv
418.916 288.505 415.257 292.702 414.473 297.537 cv
414.463 297.603 414.563 297.624 414.584 297.563 cv
415.874 293.989 418.816 290.934 422.621 290.15 cv
424.37 289.789 426.386 289.815 427.974 290.716 cv
429.684 291.686 429.367 292.843 429.773 294.498 cv
430.431 297.181 434.526 298.142 435.519 295.085 cv
cp
f
423.75 295.627 mo
420.923 295.562 418.426 298.139 417.313 300.527 cv
417.243 300.678 417.437 300.87 417.584 300.781 cv
418.972 299.949 420.759 298.011 422.51 298.615 cv
423.716 299.031 423.382 299.743 423.53 300.731 cv
423.904 303.247 427.539 303.598 428.419 301.231 cv
429.516 298.28 426.516 295.689 423.75 295.627 cv
cp
f
390.397 296.207 mo
390.451 295.789 390.503 295.373 390.556 294.958 cv
391.092 291.652 392.415 288.574 394.153 285.908 cv
395.879 283.226 398.025 280.97 400.187 279.077 cv
401.276 278.137 402.367 277.276 403.454 276.515 cv
404.529 275.736 405.599 275.057 406.626 274.449 cv
408.69 273.255 410.575 272.318 412.171 271.632 cv
413.766 270.946 415.059 270.472 415.947 270.162 cv
416.842 269.864 417.319 269.705 417.319 269.705 cv
417.319 269.705 416.816 269.752 415.874 269.841 cv
414.939 269.974 413.547 270.127 411.817 270.549 cv
410.084 270.953 407.981 271.532 405.66 272.481 cv
403.333 273.412 400.768 274.682 398.167 276.441 cv
395.584 278.215 392.929 280.462 390.651 283.391 cv
388.376 286.299 386.462 289.905 385.568 293.989 cv
385.472 294.501 385.375 295.015 385.277 295.531 cv
385.194 296.05 385.147 296.576 385.086 297.102 cv
385.002 298.157 384.954 299.209 385 300.353 cv
385.003 300.95 385.054 301.397 385.091 301.886 cv
385.121 302.25 li
385.135 302.432 li
385.143 302.523 li
385.146 302.568 li
385.164 302.705 li
385.295 303.517 li
385.393 304.057 385.467 304.605 385.592 305.142 cv
385.736 305.675 385.88 306.21 386.024 306.745 cv
387.285 311.005 389.763 314.902 392.907 318 cv
394.488 319.544 396.212 320.934 398.071 322.084 cv
398.974 322.703 399.959 323.179 400.913 323.695 cv
401.905 324.136 402.875 324.62 403.898 324.966 cv
404.88 325.36 405.973 325.671 407.046 325.97 cv
407.579 326.116 408.017 326.181 408.505 326.29 cv
409.217 326.438 li
409.401 326.476 li
409.498 326.489 li
409.692 326.514 li
410.08 326.564 li
410.596 326.63 411.111 326.695 411.624 326.76 cv
412.137 326.822 412.646 326.904 413.161 326.907 cv
414.186 326.936 415.204 327.006 416.21 326.972 cv
420.244 326.899 424.082 326.121 427.504 324.931 cv
430.934 323.744 433.966 322.183 436.604 320.545 cv
439.251 318.911 441.431 317.093 443.317 315.471 cv
444.225 314.616 445.096 313.846 445.838 313.068 cv
446.57 312.279 447.257 311.58 447.843 310.91 cv
448.425 310.235 448.938 309.631 449.373 309.099 cv
449.805 308.566 450.142 308.093 450.431 307.72 cv
450.994 306.961 451.294 306.557 451.294 306.557 cv
451.294 306.557 450.911 306.883 450.192 307.496 cv
449.833 307.802 449.404 308.197 448.874 308.627 cv
448.337 309.048 447.732 309.538 447.062 310.088 cv
446.384 310.631 445.593 311.191 444.76 311.819 cv
443.904 312.413 442.978 313.055 441.988 313.742 cv
441.479 314.058 440.953 314.385 440.412 314.721 cv
440.142 314.889 439.869 315.059 439.592 315.231 cv
439.306 315.388 439.016 315.548 438.722 315.709 cv
438.131 316.025 437.545 316.377 436.927 316.704 cv
436.301 317.013 435.661 317.329 435.007 317.652 cv
432.374 318.885 429.448 320.018 426.282 320.812 cv
423.121 321.619 419.713 322.034 416.234 321.907 cv
415.364 321.89 414.493 321.757 413.615 321.703 cv
413.175 321.687 412.741 321.592 412.304 321.52 cv
411.867 321.446 411.429 321.371 410.99 321.297 cv
410.66 321.242 li
410.495 321.214 li
410.457 321.208 li
410.419 321.198 li
409.713 321.021 li
409.258 320.898 408.734 320.791 408.331 320.655 cv
407.536 320.385 406.74 320.158 405.9 319.791 cv
405.059 319.488 404.268 319.056 403.454 318.678 cv
402.681 318.219 401.87 317.82 401.131 317.303 cv
399.602 316.345 398.203 315.187 396.932 313.926 cv
394.357 311.428 392.419 308.359 391.329 305.09 cv
390.959 303.853 li
390.85 303.438 390.789 303.013 390.698 302.596 cv
390.565 301.969 li
390.567 301.994 390.549 301.856 390.567 302.016 cv
390.561 301.97 li
390.55 301.88 li
390.528 301.699 li
390.483 301.337 li
390.425 300.859 390.35 300.344 390.344 299.974 cv
390.279 299.188 390.277 298.318 390.308 297.471 cv
390.338 297.048 390.368 296.627 390.397 296.207 cv
cp
f
435.254 301.561 mo
430.495 305.443 424.721 309.393 418.274 308.84 cv
412.666 308.359 408.334 304.177 408.528 298.393 cv
408.936 286.239 428.248 275.095 436.883 286.285 cv
437.657 287.287 439.328 286.229 438.764 285.106 cv
435.233 278.064 426.574 277.232 419.795 279.489 cv
412.627 281.875 406.077 287.527 404.303 295.08 cv
402.809 301.447 405.094 308.236 410.632 311.908 cv
416.237 315.624 423.41 316.147 429.674 313.959 cv
436.944 311.42 442.601 305.95 447.727 300.418 cv
452.794 294.951 457.297 289.002 462.33 283.506 cv
466.84 278.582 471.812 274.103 477.748 270.969 cv
483.047 268.171 488.792 266.341 494.718 265.477 cv
506.988 263.687 519.885 266.346 530.356 273.003 cv
530.977 273.397 531.624 272.502 531.021 272.065 cv
524.455 267.308 516.96 264.286 509.117 262.853 cv
506.833 262.305 504.639 261.455 502.583 260.212 cv
498.61 257.809 495.356 254.15 493.518 249.877 cv
491.965 246.268 491.255 242.081 491.94 238.182 cv
492.548 234.725 494.146 231.503 496.621 228.988 cv
498.527 227.051 500.839 225.684 503.392 224.787 cv
504.624 224.354 506.004 224.075 507.309 223.998 cv
507.769 223.971 508.267 223.907 508.73 223.933 cv
511.44 224.08 513.986 224.731 516.256 226.308 cv
518.962 228.188 520.764 230.987 521.557 234.157 cv
521.696 234.711 521.79 235.317 521.826 235.886 cv
521.841 236.119 521.851 236.352 521.865 236.586 cv
521.868 236.645 521.881 236.943 521.887 236.92 cv
521.777 239.279 521.182 241.435 519.681 243.335 cv
518.521 244.805 516.94 245.935 515.187 246.589 cv
514.362 246.897 513.466 247.099 512.587 247.163 cv
512.413 247.175 512.239 247.183 512.065 247.197 cv
512.028 247.2 511.819 247.208 511.856 247.214 cv
509.984 247.14 508.246 246.673 506.752 245.482 cv
504.831 243.95 503.858 241.777 503.665 239.364 cv
503.702 238.023 503.988 236.77 504.77 235.641 cv
505.346 234.81 506.12 234.113 507.01 233.632 cv
507.534 233.349 508.097 233.137 508.679 233.008 cv
508.881 232.963 509.699 232.723 509.872 232.854 cv
509.833 232.825 510.06 232.858 510.155 232.86 cv
510.531 232.868 510.905 232.912 511.27 233.005 cv
511.771 233.133 512.255 233.333 512.697 233.603 cv
514.207 234.525 515.157 236.254 515.159 238.018 cv
515.16 239.879 513.838 241.51 512.056 241.989 cv
510.141 242.504 508.136 241.504 507.614 239.532 cv
507.109 237.626 508.401 235.91 510.323 235.72 cv
508.942 235.708 507.687 236.489 507.211 237.815 cv
506.72 239.178 507.177 240.764 508.156 241.796 cv
510.468 244.23 514.497 243.049 515.997 240.322 cv
517.55 237.495 516.285 233.835 513.736 232.064 cv
511.921 230.803 509.632 230.534 507.517 231.087 cv
504.416 231.896 501.969 234.49 501.3 237.621 cv
500.733 240.276 501.401 243.172 502.899 245.411 cv
506.036 250.103 512.158 251.298 517.159 249.134 cv
521.947 247.061 525.285 242.114 525.163 236.859 cv
525.051 232.011 522.923 227.497 519.174 224.405 cv
514.701 220.715 508.611 219.932 503.148 221.618 cv
496.868 223.555 491.461 228.818 489.932 235.304 cv
489.176 238.508 489.1 241.738 489.768 244.974 cv
490.448 248.271 491.854 251.423 493.85 254.135 cv
496.561 257.82 500.353 260.647 504.625 262.209 cv
501.78 261.911 498.905 261.81 496.026 261.906 cv
484.428 262.291 473.255 266.253 464.023 273.279 cv
453.254 281.476 445.709 293.034 435.254 301.561 cv
cp
f
541.11 282.624 mo
540.825 273.508 536.734 264.168 529.62 258.31 cv
529.446 258.167 529.258 258.446 529.421 258.591 cv
533.103 261.876 535.526 265.907 536.609 270.726 cv
537.545 274.892 537.546 279.154 536.785 283.347 cv
536.21 286.512 535.137 289.612 533.881 292.596 cv
533.577 290.149 532.819 287.781 531.767 285.556 cv
529.535 280.836 525.897 277.179 521.275 274.753 cv
521.158 274.692 521.063 274.883 521.168 274.955 cv
525.135 277.653 528.096 281.953 528.732 286.78 cv
529.177 290.151 528.341 293.3 527.19 296.378 cv
524.26 292.994 520.655 290.112 517.112 287.966 cv
517.047 287.927 516.99 288.011 517.045 288.059 cv
520.018 290.681 522.301 293.725 523.628 297.483 cv
524.259 299.268 524.543 301.107 524.817 302.972 cv
525.069 304.689 524.807 306.465 525.301 308.151 cv
525.695 309.495 526.617 310.764 527.948 311.2 cv
531.659 312.416 533.954 307.645 535.384 305.126 cv
536.915 302.428 538.095 299.541 539.086 296.607 cv
540.61 292.093 541.258 287.383 541.11 282.624 cv
cp
f
545 303.756 mo
540.781 303.756 537.361 307.176 537.361 311.395 cv
537.361 315.614 540.781 319.034 545 319.034 cv
549.219 319.034 552.639 315.614 552.639 311.395 cv
552.639 307.176 549.219 303.756 545 303.756 cv
cp
f
547.616 262.646 mo
547.624 262.678 547.681 262.679 547.679 262.641 cv
547.443 258.844 548.412 254.951 550.357 251.678 cv
552.316 248.383 554.995 246.753 558.269 245.084 cv
563.582 242.374 558.018 234.449 553.812 238.453 cv
547.477 244.482 545.362 254.408 547.616 262.646 cv
cp
f
531.731 245.084 mo
535.005 246.753 537.684 248.383 539.643 251.678 cv
541.588 254.951 542.557 258.844 542.321 262.641 cv
542.319 262.679 542.376 262.678 542.384 262.646 cv
544.638 254.408 542.523 244.482 536.188 238.453 cv
531.982 234.449 526.418 242.374 531.731 245.084 cv
cp
f
545 242.823 mo
547.651 242.823 549.799 237.337 549.799 230.57 cv
549.799 223.802 545 218.316 545 218.316 cv
545 218.316 540.201 223.802 540.201 230.57 cv
540.201 237.337 542.349 242.823 545 242.823 cv
cp
f
249.957 487.185 mo
249.54 478.454 246.086 470.433 240.453 463.807 cv
228.634 449.904 209.603 444.458 191.892 445.304 cv
171.331 446.286 152.047 454.955 135.046 466.091 cv
117.83 477.367 102.639 491.42 85.4201 502.688 cv
68.9535 513.464 49.5995 521.874 29.5022 520.075 cv
21.449 519.355 12.9343 516.453 7.41347 510.297 cv
1.53037 503.736 .894915 494.285 4.36812 486.402 cv
8.14932 477.819 16.2526 472.438 25.2687 470.595 cv
35.0256 468.599 44.6539 470.908 53.4792 475.156 cv
57.9447 477.306 62.1005 480.061 65.9971 483.111 cv
66.1953 483.266 66.4795 482.999 66.2803 482.828 cv
53.1738 471.595 35.1771 464.277 18.2408 471.248 cv
11.0732 474.198 5.13152 479.617 2.11547 486.816 cv
-.882352 493.971 -.853132 502.347 3.23012 509.081 cv
11.9259 523.422 31.7715 525.361 46.7264 523.068 cv
66.156 520.089 83.5561 509.764 99.1736 498.328 cv
115.414 486.437 130.699 473.179 148.466 463.526 cv
165.822 454.096 186.079 448.092 205.916 451.662 cv
221.255 454.422 237.373 463.858 241.969 479.675 cv
247 496.995 236.103 515.614 222.547 525.805 cv
209.203 535.837 188.368 537.745 176.516 524.197 cv
171.332 518.27 168.943 509.913 170.466 502.17 cv
172.038 494.178 178.257 488 186.046 485.839 cv
189.699 484.826 193.749 484.769 197.424 485.698 cv
198.281 485.914 198.55 484.73 197.778 484.41 cv
183.065 478.308 167.082 492.094 166.441 506.83 cv
166.093 514.829 169.285 522.801 174.592 528.723 cv
180.46 535.27 189.039 538.774 197.67 539.566 cv
216.177 541.262 232.858 529.741 242.216 514.47 cv
247.183 506.365 250.415 496.772 249.957 487.185 cv
cp
f
85.1782 496.671 mo
69.3529 505.224 49.7875 511.083 32.0605 505.139 cv
28.0893 503.808 23.9442 501.321 22.9354 496.949 cv
21.9411 492.64 24.1981 488.005 27.6136 485.404 cv
36.7308 478.462 49.0248 482.692 58.6014 486.136 cv
59.06 486.301 59.381 485.554 58.9358 485.343 cv
50.2469 481.228 40.6986 477.025 30.9215 479.673 cv
22.9378 481.834 16.6409 489.455 18.0377 497.994 cv
19.501 506.94 29.4739 510.727 37.3177 512.096 cv
47.0344 513.792 57.1931 512.388 66.5079 509.365 cv
85.6857 503.142 101.614 489.369 117.307 477.238 cv
133.543 464.688 150.799 453.572 170.72 447.906 cv
181.517 444.835 192.884 442.82 204.143 443.574 cv
215.951 444.365 227.109 447.731 237.844 452.606 cv
238.037 452.693 238.2 452.432 238.013 452.317 cv
222.55 442.794 202.367 440.72 184.608 442.672 cv
165.934 444.723 148.104 452.428 132.508 462.696 cv
116.327 473.35 102.278 487.429 85.1782 496.671 cv
cp
f
198.808 460.019 mo
207.239 460.767 215.571 463.98 221.572 470.08 cv
227.203 475.805 229.966 483.583 229.472 491.572 cv
228.496 507.378 213.302 521.888 197.289 521.319 cv
188.6 521.011 180.254 514.674 181.146 505.291 cv
181.567 500.861 184.738 496.982 188.973 495.618 cv
193.792 494.067 198.955 495.281 202.234 499.148 cv
202.375 499.314 202.6 499.077 202.47 498.911 cv
200.219 496.051 196.371 493.346 192.667 492.982 cv
188.788 492.602 184.73 494.243 181.89 496.834 cv
175.477 502.684 176.225 512.733 181.536 519.019 cv
187.714 526.331 198.085 527.872 206.907 525.335 cv
215.846 522.763 223.789 516.785 228.885 509.03 cv
233.915 501.378 235.761 491.964 233.97 482.984 cv
232.162 473.915 226.213 466.442 218.278 461.864 cv
200.901 451.839 179.38 457.042 162.65 465.759 cv
142.002 476.518 125.517 493.564 105.223 504.882 cv
105.034 504.987 105.201 505.267 105.392 505.17 cv
121.379 497.075 134.976 485.367 149.953 475.678 cv
164.451 466.299 181.098 458.449 198.808 460.019 cv
cp
f
211.605 504.857 mo
209.372 506.426 206.764 507.531 204.025 507.733 cv
202.345 507.858 200.6 507.724 199.015 507.114 cv
197.387 506.489 196.214 505.221 194.808 504.242 cv
192.125 502.372 189.29 505.926 190.606 508.444 cv
192.496 512.058 197.08 513.65 200.906 513.964 cv
204.357 514.248 207.848 513.438 210.958 511.967 cv
216.977 509.12 221.646 503.321 223.461 496.95 cv
227.459 482.906 216.695 468.691 202.97 466.001 cv
194.768 464.394 186.26 465.986 179.051 470.142 cv
178.901 470.229 179.033 470.446 179.186 470.373 cv
191.013 464.686 205.368 465.917 214.038 476.426 cv
221.002 484.867 221.102 498.184 211.605 504.857 cv
cp
f
46.8336 491.828 mo
50.9122 491.787 55.0902 492.508 58.3328 495.151 cv
58.5683 495.343 58.8499 495.056 58.6632 494.82 cv
54.9946 490.185 47.0103 488.242 41.3668 489.478 cv
38.5171 490.102 35.7664 491.794 34.8401 494.706 cv
33.7987 497.981 35.7907 502.147 39.287 502.849 cv
43.7377 503.742 45.6677 497.008 41.177 495.993 cv
40.7328 495.893 40.1703 495.926 39.9561 495.531 cv
39.6303 494.93 40.2003 494 40.561 493.563 cv
41.9749 491.85 44.8106 491.848 46.8336 491.828 cv
cp
f
19.9035 446.255 mo
28.4123 449.798 37.8598 449.087 46.8605 449.585 cv
55.7583 450.077 64.6203 452.178 70.4854 459.382 cv
75.8237 465.939 77.6169 474.342 75.229 482.483 cv
73.8759 487.097 71.1086 491.159 67.4962 494.31 cv
63.5802 497.727 58.8516 499.377 53.7572 500.032 cv
53.0543 500.122 53.0039 501.151 53.7572 501.167 cv
60.1943 501.299 66.9819 498.666 71.9941 494.393 cv
79.3579 489.011 84.6194 481.209 84.9338 471.59 cv
85.3648 458.403 76.6019 446.634 64.1933 442.652 cv
60.2275 441.379 56.0116 440.839 51.8587 440.718 cv
49.6416 440.654 47.422 440.722 45.2089 440.857 cv
44.057 440.928 42.8334 440.923 41.6838 441.12 cv
41.1564 441.098 40.6291 441.074 40.1011 441.061 cv
34.5614 440.92 28.9692 440.899 23.9037 438.37 cv
18.9615 435.903 16.1594 431.859 13.4973 427.143 cv
13.298 426.79 12.8335 427.048 12.8872 427.401 cv
13.6766 432.581 15.1438 437.77 18.6484 441.808 cv
19.5138 442.805 20.5149 443.625 21.6017 444.313 cv
14.8047 442.288 8.85932 438.095 7.37441 430.524 cv
7.2959 430.124 6.60231 430.208 6.65312 430.621 cv
7.55675 437.97 13.3021 443.505 19.9035 446.255 cv
cp
f
90.5066 478.993 mo
90.3689 479.213 90.2234 479.426 90.083 479.643 cv
88.9668 481.218 87.8469 482.792 86.7016 484.345 cv
81.3802 491.013 74.685 496.436 67.1284 500.537 cv
66.7817 500.725 67.0862 501.209 67.4317 501.055 cv
70.5899 499.649 73.6161 497.97 76.4914 496.06 cv
76.4881 496.154 76.5951 496.248 76.6926 496.187 cv
83.4031 491.986 88.8812 486.307 94.2267 480.536 cv
99.7511 474.572 105.321 468.766 111.657 463.648 cv
117.896 458.608 125.002 454.246 132.262 450.846 cv
140.178 447.139 148.773 445.171 156.615 441.292 cv
160.266 439.486 163.579 436.924 166.655 434.261 cv
169.811 431.529 172.513 428.39 174.148 424.529 cv
174.474 423.761 173.455 423.097 172.995 423.855 cv
170.984 427.176 168.52 430.193 165.484 432.625 cv
162.466 435.043 158.999 436.503 155.487 438.052 cv
147.411 441.614 138.77 443.635 130.517 446.707 cv
120.215 450.542 110.96 456.348 103.137 463.818 cv
103.935 462.627 104.687 461.395 105.49 460.202 cv
107.516 457.194 109.685 454.347 112.057 451.605 cv
115.858 447.212 120.792 444.2 126.145 442.039 cv
136.699 437.777 148.758 437.241 158.747 431.599 cv
159.234 431.324 158.91 430.508 158.362 430.684 cv
152.538 432.554 146.614 433.743 140.582 434.708 cv
134.665 435.654 128.679 436.522 122.994 438.489 cv
120.477 439.36 118.062 440.503 115.808 441.902 cv
117.809 440.004 120.044 438.298 122.592 436.84 cv
126.819 434.421 131.36 432.496 136.066 431.238 cv
141.534 429.777 147.143 428.902 152.638 427.549 cv
157.752 426.29 163.023 424.514 167.313 421.374 cv
169.11 420.059 170.607 418.313 171.797 416.434 cv
172.961 414.595 173.497 411.637 173.86 409.502 cv
173.958 408.92 173.128 408.664 172.958 409.254 cv
171.723 413.543 167.581 416.92 164.012 419.445 cv
159.776 422.443 154.952 423.832 149.849 424.505 cv
139.856 425.821 129.855 426.093 120.808 431.098 cv
112.045 435.945 105.809 443.302 101.895 452.452 cv
98.0952 461.335 95.6842 470.742 90.5066 478.993 cv
cp
f
97.2004 428.175 mo
94.654 431.304 92.8526 434.97 91.6751 438.819 cv
90.3206 443.246 89.8972 447.912 89.6898 452.517 cv
89.4447 457.958 89.3178 463.399 89.2648 468.84 cv
89.2633 468.995 89.4806 469.015 89.5271 468.875 cv
92.4684 460.028 91.4605 450.392 94.3525 441.483 cv
95.4799 438.01 97.1695 434.593 99.558 431.808 cv
100.73 430.441 102.049 429.19 103.564 428.21 cv
105.146 427.188 106.862 426.579 108.319 425.363 cv
109.683 424.223 108.497 422.115 106.95 422.058 cv
103.113 421.915 99.4644 425.393 97.2004 428.175 cv
cp
f
70.189 436.349 mo
77.6905 437.939 83.4514 445.079 85.6324 452.116 cv
85.6828 452.278 85.9319 452.251 85.9327 452.075 cv
85.9508 447.611 84.8002 443.527 82.0913 439.926 cv
79.3982 436.347 75.973 434.007 71.9916 432.073 cv
68.814 430.53 66.9874 435.67 70.189 436.349 cv
cp
f
80.824 430.102 mo
81.6951 430.88 82.5105 431.727 83.2388 432.64 cv
84.9124 434.74 86.1719 437.242 87.0765 439.759 cv
87.123 439.889 87.3285 439.876 87.3266 439.725 cv
87.292 436.86 86.6048 434.207 85.3723 431.621 cv
84.1768 429.113 82.3137 426.118 79.9474 424.577 cv
78.0992 423.373 75.8917 426.176 77.5705 427.658 cv
78.5895 428.558 79.8001 429.188 80.824 430.102 cv
cp
f
87.9796 423.615 mo
88.5592 424.384 89.0321 425.273 89.3751 426.172 cv
90.054 427.95 90.2582 430.053 90.1494 431.945 cv
90.1413 432.086 90.3179 432.099 90.3868 432.01 cv
91.8697 430.086 92.4622 427.952 92.3916 425.525 cv
92.3233 423.179 91.662 419.936 89.5852 418.596 cv
88.0026 417.576 85.5572 419.293 86.2547 421.157 cv
86.6651 422.253 87.3089 422.725 87.9796 423.615 cv
cp
f
97.5245 423.419 mo
100.356 423.419 102.652 421.123 102.652 418.292 cv
102.652 415.46 100.356 413.164 97.5245 413.164 cv
94.6927 413.164 92.3972 415.46 92.3972 418.292 cv
92.3972 421.123 94.6927 423.419 97.5245 423.419 cv
cp
f
238.119 613.211 mo
238.203 613.336 238.321 613.513 238.482 613.755 cv
238.331 613.528 238.207 613.343 238.119 613.211 cv
cp
f
243.743 621.651 mo
243.886 621.866 243.874 621.848 243.743 621.651 cv
243.743 621.651 li
cp
f
249.874 644.555 mo
249.877 644.591 249.88 644.622 249.883 644.656 cv
249.88 644.622 249.877 644.59 249.874 644.555 cv
cp
f
238.904 614.388 mo
239.466 615.232 240.028 616.075 240.59 616.918 cv
240.59 616.919 li
240.028 616.075 239.466 615.232 238.904 614.388 cv
cp
f
249.99 645.806 mo
250.003 645.937 250.004 645.948 249.99 645.806 cv
249.99 645.806 li
cp
f
249.883 644.656 mo
249.907 644.914 249.929 645.144 249.947 645.337 cv
249.93 645.157 249.909 644.937 249.883 644.656 cv
cp
f
202.197 707.227 mo
189.038 710.195 175.004 707.336 164.599 698.555 cv
153.965 689.581 147.791 674.631 151.091 660.835 cv
152.66 654.277 156.172 648.212 161.073 643.579 cv
163.518 641.268 166.261 639.286 169.25 637.738 cv
170.724 636.975 172.252 636.316 173.82 635.767 cv
174.644 635.479 175.479 635.222 176.322 634.996 cv
176.795 634.87 177.371 634.821 177.821 634.623 cv
177.692 634.68 178.184 634.562 178.304 634.542 cv
178.496 634.509 178.688 634.477 178.88 634.445 cv
179.525 634.336 180.174 634.193 180.825 634.134 cv
181.705 634.054 182.617 633.974 183.499 633.989 cv
187.056 634.047 190.532 634.65 193.826 636.049 cv
198.92 638.213 203.382 642.052 206.091 646.907 cv
208.22 650.724 209.535 655.201 209.264 659.592 cv
209.039 663.241 207.928 666.765 205.961 669.862 cv
202.36 675.53 196.148 679.541 189.503 680.058 cv
185.528 680.367 181.493 679.116 178.356 676.662 cv
175.501 674.427 173.044 670.812 172.509 667.33 cv
172.233 665.535 172.2 663.802 172.505 662.102 cv
172.89 661.767 173.261 661.417 173.681 661.116 cv
176.54 659.062 180.151 657.921 183.662 658.637 cv
185.469 659.006 187.172 659.86 188.468 661.183 cv
188.982 661.708 189.4 662.282 189.748 662.926 cv
190.049 663.482 190.352 664.083 191.067 664.087 cv
193.742 664.102 190.563 659.82 189.909 659.114 cv
187.322 656.321 183.438 655.362 179.747 655.856 cv
177.724 656.128 175.842 656.784 174.131 657.736 cv
176.039 654.508 179.426 651.766 183.046 651.099 cv
185.428 650.66 187.65 650.697 189.915 651.678 cv
192.783 652.92 194.934 655.453 195.782 658.451 cv
196.647 661.513 195.841 664.764 193.676 667.093 cv
191.662 669.26 188.495 670.57 185.549 669.865 cv
182.809 669.21 180.967 667.102 180.232 664.455 cv
180.881 667.509 183.034 669.916 186.169 670.532 cv
189.88 671.262 193.732 669.198 195.796 666.158 cv
198.005 662.905 198.022 658.728 196.248 655.278 cv
194.484 651.849 191.091 649.416 187.288 648.798 cv
184.025 648.268 180.669 649.027 177.796 650.624 cv
173.754 652.871 170.812 656.802 169.705 661.224 cv
168.035 663 166.67 665.092 165.679 667.336 cv
163.109 673.156 162.841 679.838 164.983 685.831 cv
167.225 692.105 171.853 697.377 177.522 700.81 cv
190.4 708.607 206.902 706.403 219.632 699.486 cv
221.882 698.264 224.041 696.878 226.108 695.366 cv
219.204 701.092 211.015 705.237 202.197 707.227 cv
cp
249.874 644.555 mo
249.838 644.168 249.793 643.691 249.739 643.106 cv
249.312 638.537 249.522 640.782 249.738 643.105 cv
248.871 633.81 245.774 624.7 240.591 616.92 cv
240.788 617.216 240.985 617.511 241.182 617.807 cv
240.984 617.51 240.787 617.214 240.59 616.918 cv
232.384 604.602 219.481 595.761 205.421 591.44 cv
190.158 586.75 173.636 587.723 158.865 593.69 cv
144.962 599.306 132.901 609.013 123.884 620.939 cv
123.292 621.722 122.713 622.516 122.148 623.317 cv
122.672 620.635 123.038 617.922 123.226 615.199 cv
123.919 605.162 121.634 595.152 115.146 587.286 cv
114.824 586.896 114.226 587.395 114.462 587.814 cv
119.204 596.212 119.881 606.537 117.987 615.871 cv
117.207 619.719 115.999 623.461 114.653 627.148 cv
114.03 623.745 113.162 620.409 111.835 617.173 cv
108.633 609.364 103.346 602.133 95.6254 598.315 cv
79.5607 590.37 60.7077 598.461 49.7001 611.047 cv
49.4017 611.388 49.8489 611.824 50.1926 611.539 cv
62.3192 601.494 79.1444 594.965 93.6972 604.271 cv
99.925 608.254 103.652 615.116 105.564 622.084 cv
106.442 625.284 107.065 628.531 107.478 631.814 cv
104.056 625.853 99.0349 620.825 93.0002 617.409 cv
83.7638 612.182 72.3405 610.987 62.4752 615.245 cv
52.8795 619.386 45.7499 628.356 43.916 638.668 cv
41.9879 649.509 46.9021 660.473 56.4436 666.114 cv
64.5998 670.937 74.9683 670.841 82.3897 664.663 cv
89.4122 658.818 92.509 648.403 87.4702 640.323 cv
84.3146 635.263 78.4276 631.587 72.3326 632.164 cv
67.5835 632.613 63.3635 635.63 61.394 639.966 cv
59.113 644.988 60.3982 650.985 65.2493 653.909 cv
67.7581 655.42 70.994 655.878 73.6739 654.534 cv
76.0961 653.319 77.6302 651.01 77.9014 648.331 cv
77.3317 650.647 75.8224 652.626 73.5699 653.519 cv
68.8464 655.391 63.6618 651.602 63.0809 646.788 cv
62.6354 643.096 64.8086 639.79 67.7376 637.801 cv
67.7295 637.811 67.7199 637.819 67.7087 637.825 cv
68.1759 637.386 69.0528 637.108 69.6403 636.903 cv
70.7015 636.531 71.8272 636.358 72.9507 636.384 cv
75.0867 636.432 77.1572 637.237 78.8949 638.454 cv
82.1563 640.738 84.133 644.334 84.3069 648.296 cv
84.304 648.278 84.3019 648.26 84.3006 648.242 cv
84.4677 649.212 84.1376 650.5 83.8995 651.436 cv
82.8084 655.726 79.691 659.344 75.7057 661.23 cv
73.5049 662.272 71.3403 662.628 68.9517 662.691 cv
64.6713 662.481 60.6125 660.713 57.4473 657.835 cv
53.1657 653.943 50.8556 648.437 51.2017 642.668 cv
51.5897 636.199 54.8483 630.542 59.4865 626.185 cv
59.5105 626.17 59.7273 625.989 59.7697 625.955 cv
59.9808 625.783 60.1896 625.607 60.4018 625.436 cv
61.3909 624.639 62.4662 623.937 63.5772 623.323 cv
66.1603 621.894 69.0024 620.965 71.9202 620.532 cv
75.5742 619.991 79.3633 620.245 82.9152 621.207 cv
87.275 622.389 91.6236 624.661 95.1834 627.681 cv
97.0145 629.234 98.6817 630.983 100.128 632.9 cv
100.955 633.997 101.956 635.258 102.497 636.523 cv
103.034 637.779 103.862 639.241 104.407 640.625 cv
105.674 643.842 106.307 647.281 106.488 650.726 cv
106.649 653.78 106.39 656.829 105.789 659.815 cv
105.406 661.102 105.027 662.391 104.654 663.682 cv
102.84 669.947 101.023 676.299 98.8115 682.485 cv
98.5009 682.018 98.1609 681.562 97.7567 681.131 cv
94.3631 677.517 87.2674 677.44 85.5539 682.792 cv
85.3759 683.348 86.2465 683.731 86.5089 683.195 cv
87.6363 680.889 90.6131 679.785 92.9747 680.982 cv
94.8957 681.956 95.7627 684.008 96.0381 686.042 cv
96.2294 687.454 96.1179 688.772 95.8357 690.04 cv
93.3052 695.86 90.2532 701.427 86.2952 706.495 cv
81.8433 712.195 76.3153 717.135 69.699 720.17 cv
66.4692 721.651 63.1639 722.58 59.6156 722.816 cv
56.2168 723.042 52.7828 722.794 49.4592 722.042 cv
42.8021 720.536 36.4873 716.925 32.4112 711.368 cv
27.8423 705.14 26.5583 697.242 28.6956 689.846 cv
30.6224 683.177 35.8946 677.812 42.7867 675.902 cv
49.4613 674.052 57.075 675.555 61.8821 680.736 cv
66.7487 685.981 67.1123 694.578 62.1154 699.862 cv
57.3698 704.88 47.458 705.161 43.6967 698.756 cv
42.0712 695.988 41.9129 692.242 43.6843 689.513 cv
45.5567 686.628 48.8994 685.272 52.2703 686.031 cv
55.3792 686.731 57.7152 689.509 57.3238 692.776 cv
56.9611 695.803 54.1779 698.002 51.1364 697.544 cv
48.1767 697.099 46.4008 694.182 47.5529 691.37 cv
45.7523 694.673 48.2568 698.124 51.7273 698.526 cv
55.0451 698.91 58.0213 696.694 58.8641 693.51 cv
59.6504 690.54 58.4902 687.459 56.1851 685.495 cv
53.7814 683.447 50.4371 682.831 47.398 683.551 cv
40.3972 685.209 37.3357 693.222 40.0765 699.561 cv
42.2513 704.591 47.4115 707.421 52.741 707.693 cv
58.3883 707.981 63.8733 705.492 67.1441 700.836 cv
70.5367 696.006 71.3451 689.519 69.4278 683.959 cv
67.3324 677.882 62.1991 673.443 56.1961 671.423 cv
48.9943 668.999 40.7323 669.998 34.4098 674.25 cv
28.4734 678.243 24.6859 684.363 23.4684 691.385 cv
22.1842 698.792 24.0256 706.368 27.8694 712.767 cv
32.6087 720.657 40.456 725.837 49.1283 727.951 cv
43.3436 728.523 37.471 728.11 31.8528 726.565 cv
20.0587 723.322 10.3088 714.974 6.21148 703.325 cv
2.39577 692.476 3.68309 679.797 11.9548 671.324 cv
16.1811 666.995 21.6468 664.089 27.5315 662.765 cv
34.014 661.307 39.5281 662.513 45.686 664.561 cv
46.1242 664.707 46.524 664.066 46.152 663.761 cv
37.4139 656.595 23.1069 659.352 14.4233 665.07 cv
3.77868 672.078 -1.2266 684.431 .255108 696.951 cv
1.85653 710.484 10.1302 722.45 22.2135 728.742 cv
34.8543 735.325 50.2301 736.044 63.5671 731.176 cv
69.6533 728.955 75.3375 725.777 80.4864 721.866 cv
88.4437 716.537 94.8696 708.814 99.5812 700.509 cv
107.644 686.297 110.985 670.151 116.015 654.762 cv
118.516 647.109 121.489 639.611 125.653 632.697 cv
129.626 626.099 134.504 620.039 140.114 614.761 cv
151.422 604.121 165.909 596.585 181.46 594.931 cv
197.073 593.272 213.246 597.714 225.74 607.252 cv
237.801 616.46 245.523 630.292 246.802 645.438 cv
248.085 660.624 243.027 676.16 232.644 687.377 cv
222.529 698.304 207.301 705.917 192.155 704.159 cv
178.923 702.623 165.997 692.664 165.743 678.491 cv
165.665 674.101 166.842 669.567 169.247 665.862 cv
169.257 666.046 169.258 666.229 169.274 666.412 cv
169.815 672.613 173.559 678.225 178.945 681.286 cv
190.389 687.789 204.862 681.17 210.733 670.22 cv
214.111 663.92 214.591 656.635 212.392 649.859 cv
210.375 643.641 206.432 638.404 201.149 634.604 cv
194.158 629.577 185.037 628.062 176.688 629.827 cv
162.069 632.918 150.168 644.554 146.496 658.987 cv
142.457 674.864 149.412 691.995 161.916 702.137 cv
168.004 707.075 175.343 710.394 183.072 711.695 cv
190.069 712.873 197.169 712.36 204.001 710.524 cv
219.113 706.463 232.267 696.204 240.065 682.667 cv
241.675 679.873 243.031 676.951 244.153 673.944 cv
245.416 671.385 246.49 668.733 247.347 666.007 cv
249.663 658.635 250.456 650.797 249.739 643.106 cv
249.785 643.609 249.833 644.113 249.874 644.555 cv
cp
f
249.947 645.337 mo
249.968 645.563 249.982 645.717 249.99 645.806 cv
249.981 645.708 249.966 645.547 249.947 645.337 cv
cp
f
139.843 630.877 mo
144.606 623.465 150.482 617.091 158.204 612.715 cv
158.551 612.519 158.247 612.026 157.897 612.189 cv
127.79 626.212 123.79 663.231 113.559 690.869 cv
111.908 695.328 110 699.681 107.928 703.961 cv
106.835 706.217 105.648 708.431 104.347 710.575 cv
103.136 712.573 101.524 714.48 102.343 716.93 cv
102.68 717.94 103.611 718.795 104.736 718.752 cv
108.736 718.601 110.739 713.438 112.377 710.365 cv
114.29 706.776 115.896 703.064 117.241 699.227 cv
120.078 691.131 121.972 682.763 123.987 674.437 cv
127.633 659.378 131.364 644.073 139.843 630.877 cv
cp
f
166.706 623.365 mo
166.919 623.298 166.832 622.978 166.613 623.029 cv
148.806 627.185 139.801 645.231 135.863 661.523 cv
133.467 671.432 131.993 681.534 129.591 691.445 cv
128.463 696.099 127.137 700.749 125.118 705.104 cv
124.083 707.338 122.898 709.515 121.569 711.588 cv
120.189 713.74 118.389 715.609 119.327 718.341 cv
119.83 719.804 120.957 720.621 122.476 720.738 cv
127.036 721.09 129.77 714.373 131.371 710.895 cv
133.339 706.618 134.839 702.158 135.943 697.584 cv
138.235 688.094 138.504 678.286 139.559 668.616 cv
141.507 650.755 147.437 629.417 166.706 623.365 cv
cp
f
200.493 718.219 mo
189.807 720.791 177.993 722.646 167.575 718.004 cv
163.607 716.235 160.007 713.594 157.138 710.334 cv
155.794 708.808 154.702 707.084 153.798 705.266 cv
152.945 703.554 152.579 701.695 151.923 699.932 cv
151.489 695.63 144.136 695.802 143.979 700.684 cv
143.815 705.828 147.964 711.47 151.424 714.934 cv
155.208 718.722 159.915 721.459 165.003 723.088 cv
176.757 726.852 189.956 724.197 200.694 718.696 cv
200.965 718.558 200.773 718.151 200.493 718.219 cv
cp
f
92.7974 590.223 mo
96.9854 592.94 100.697 595.465 104.18 599.122 cv
107.604 602.718 110.343 606.798 112.382 611.326 cv
112.447 611.471 112.643 611.359 112.621 611.225 cv
110.896 600.793 105.282 590.17 96.3751 584.102 cv
92.6117 581.538 88.9658 587.736 92.7974 590.223 cv
cp
f
127.78 607.836 mo
130.766 604.534 134.005 601.446 137.666 598.903 cv
139.411 597.691 141.257 596.615 143.186 595.721 cv
145.289 594.747 147.215 594.467 148.623 592.52 cv
149.571 591.208 148.587 589.164 147.114 588.81 cv
142.872 587.793 137.329 592.609 134.301 595.236 cv
130.643 598.41 127.86 602.369 126.106 606.861 cv
125.739 607.802 127.135 608.548 127.78 607.836 cv
cp
f
622.022 674.823 mo
625.146 674.272 625.214 669.875 622.859 668.415 cv
619.138 666.107 614.567 668.939 613.111 672.614 cv
611.556 676.539 613.347 680.71 616.12 683.591 cv
625.21 693.036 640.539 690.484 651.518 686.359 cv
663.202 681.97 673.431 674.553 680.934 664.545 cv
681.3 664.057 680.487 663.447 680.095 663.898 cv
671.488 673.783 659.741 680.781 646.859 683.341 cv
640.924 684.52 634.585 684.936 628.683 683.352 cv
626.062 682.649 623.519 681.456 621.628 679.462 cv
620.873 678.667 619.42 676.957 619.896 675.735 cv
620.239 674.853 621.203 674.967 622.022 674.823 cv
cp
f
706.543 657.556 mo
706.609 657.608 706.702 657.522 706.638 657.462 cv
701.892 653.091 694.851 655.541 690.261 658.876 cv
684.615 662.981 680.676 668.745 676.652 674.338 cv
672.549 680.039 668.169 685.344 662.142 689.107 cv
656.046 692.912 649.097 695.159 642.039 696.351 cv
628.291 698.673 611.204 696.441 603.994 682.821 cv
600.664 676.531 601.077 668.873 604.458 662.691 cv
607.857 656.476 614.06 652.249 620.894 650.651 cv
627.188 649.179 636.044 649.931 639.682 656.07 cv
641.107 658.475 641.726 661.846 639.893 664.225 cv
638.662 665.823 636.146 667.189 634.137 666.255 cv
629.757 664.219 627.189 670.538 631.59 672.297 cv
635.409 673.823 639.774 672.593 642.78 669.945 cv
645.817 667.269 647.036 663.272 646.416 659.322 cv
645.002 650.302 635.859 645.914 627.503 646.093 cv
612.233 646.42 597.965 658.199 598.644 674.232 cv
599.319 690.15 614.95 699.216 629.395 699.865 cv
644.878 700.561 662.117 694.947 672.395 682.993 cv
677.283 677.308 680.94 670.693 685.766 664.959 cv
690.307 659.565 699.393 651.975 706.543 657.556 cv
cp
f
615.25 641.594 mo
603.283 646.639 593.926 657.568 592.974 670.785 cv
592.95 671.122 593.518 671.199 593.564 670.865 cv
594.483 664.296 597.475 658.012 601.843 653.03 cv
610.317 643.365 623.23 639.549 635.796 640.802 cv
641.851 641.406 648.869 642.996 653.57 647.097 cv
657.846 650.828 660.228 657.17 656.706 662.208 cv
654.462 665.416 660.185 668.79 661.953 665.275 cv
665.563 658.095 662.612 649.747 656.45 645.019 cv
650.807 640.689 643.492 638.891 636.514 638.338 cv
629.313 637.768 621.922 638.782 615.25 641.594 cv
cp
f
599.803 641.625 mo
600.023 641.454 599.742 641.141 599.52 641.257 cv
592.767 644.819 587.651 650.985 585.355 658.271 cv
584.061 662.38 583.707 666.857 584.355 671.112 cv
584.949 675.016 586.312 681.016 589.864 683.223 cv
592.672 684.967 595.442 682.088 594.984 679.286 cv
594.676 677.402 593.151 675.834 592.28 674.154 cv
591.442 672.536 590.856 670.843 590.379 669.088 cv
589.461 665.717 589.106 662.255 589.599 658.777 cv
590.565 651.962 594.408 645.818 599.803 641.625 cv
cp
f
570.415 663.383 mo
569.923 673.252 569.749 684.296 567.362 694.48 cv
565.162 692.87 563.121 691.026 561.275 688.974 cv
562.725 682.61 563.274 675.975 563.845 669.484 cv
564.919 657.305 566.491 645.196 573.853 635.051 cv
571.595 644.287 570.88 654.038 570.415 663.383 cv
cp
556.252 716.065 mo
554.132 718.199 551.753 719.995 549.2 721.468 cv
549.116 720.891 549.026 720.316 548.937 719.747 cv
548.559 717.341 547.841 715.021 547.051 712.719 cv
550.161 710.434 552.866 707.59 554.881 704.576 cv
557.341 700.896 559.04 696.934 560.268 692.819 cv
562.199 694.583 564.308 696.191 566.555 697.577 cv
564.576 704.472 561.423 710.859 556.252 716.065 cv
cp
533.748 716.065 mo
528.577 710.859 525.424 704.472 523.445 697.577 cv
525.692 696.191 527.801 694.583 529.732 692.819 cv
530.96 696.934 532.659 700.896 535.119 704.576 cv
537.135 707.591 539.84 710.436 542.951 712.721 cv
542.162 715.022 541.444 717.342 541.066 719.747 cv
540.976 720.317 540.886 720.892 540.802 721.469 cv
538.248 719.996 535.868 718.2 533.748 716.065 cv
cp
519.585 663.383 mo
519.12 654.038 518.405 644.287 516.147 635.051 cv
523.509 645.196 525.081 657.305 526.155 669.484 cv
526.726 675.975 527.275 682.61 528.725 688.974 cv
526.879 691.026 524.838 692.87 522.638 694.48 cv
520.251 684.296 520.077 673.252 519.585 663.383 cv
cp
486.226 613.743 mo
477.325 613.31 467.455 615.678 460.651 621.631 cv
459.131 618.253 458.612 614.303 459.821 610.759 cv
461.152 606.859 464.346 604.015 468.002 602.3 cv
483.795 594.892 501.003 607.241 508.366 620.787 cv
501.773 616.596 494.165 614.129 486.226 613.743 cv
cp
545 665.242 mo
547.12 674.28 551.115 682.963 557.324 689.838 cv
556.696 693.029 555.817 696.171 554.558 699.235 cv
552.766 703.597 550.06 707.814 546.415 710.891 cv
545.938 709.538 545.461 708.186 545.035 706.82 cv
545.025 706.786 544.978 706.786 544.967 706.82 cv
544.542 708.186 544.064 709.539 543.587 710.892 cv
539.941 707.816 537.235 703.598 535.442 699.235 cv
534.183 696.171 533.304 693.029 532.676 689.838 cv
538.885 682.963 542.88 674.28 545 665.242 cv
cp
621.998 602.3 mo
625.654 604.015 628.848 606.859 630.179 610.759 cv
631.388 614.303 630.869 618.253 629.349 621.631 cv
622.545 615.678 612.675 613.31 603.774 613.743 cv
595.835 614.129 588.227 616.596 581.634 620.787 cv
588.997 607.241 606.205 594.892 621.998 602.3 cv
cp
578.992 677.653 mo
574.706 666.305 576.343 653.307 583.828 643.673 cv
591.241 634.132 604.149 627.604 616.368 628.57 cv
616.396 628.572 616.395 628.531 616.368 628.528 cv
608.986 627.708 601.848 628.529 595.072 631.702 cv
583.428 637.153 574.958 647.841 572.839 660.508 cv
573.394 650.444 574.303 640.355 577.361 630.866 cv
584.082 623.847 593.228 619.276 602.862 617.876 cv
611.525 616.617 621.449 617.848 628.611 623.087 cv
624.476 630.429 616.066 633.68 608.238 635.546 cv
607.91 635.624 607.979 636.157 608.318 636.136 cv
616.862 635.613 625.824 632.127 630.33 624.473 cv
631.642 625.636 632.848 626.939 633.889 628.435 cv
634.18 628.854 634.835 628.488 634.581 628.031 cv
633.585 626.244 632.371 624.656 631.009 623.226 cv
634.674 615.834 633.228 607.212 626.379 602.207 cv
613.02 592.444 594.256 600.405 584.845 611.857 cv
581.862 615.487 579.525 619.436 577.679 623.596 cv
575.954 624.969 574.32 626.473 572.794 628.101 cv
564.344 637.113 560.625 648.653 559.629 660.788 cv
558.973 668.775 559.106 676.978 558.1 684.968 cv
552.113 676.498 549.166 666.413 546.823 656.377 cv
548.983 655.62 550.541 653.585 550.541 651.167 cv
550.541 648.107 548.06 645.626 545 645.626 cv
541.94 645.626 539.459 648.107 539.459 651.167 cv
539.459 653.585 541.017 655.62 543.177 656.377 cv
540.834 666.413 537.887 676.498 531.9 684.968 cv
530.894 676.978 531.027 668.775 530.371 660.788 cv
529.375 648.653 525.656 637.113 517.206 628.101 cv
515.68 626.473 514.046 624.969 512.321 623.596 cv
510.475 619.436 508.138 615.487 505.155 611.857 cv
495.744 600.405 476.98 592.444 463.621 602.207 cv
456.772 607.212 455.326 615.834 458.991 623.226 cv
457.629 624.656 456.415 626.244 455.419 628.031 cv
455.165 628.488 455.82 628.854 456.111 628.435 cv
457.152 626.939 458.358 625.636 459.67 624.473 cv
464.176 632.127 473.138 635.613 481.682 636.136 cv
482.021 636.157 482.09 635.624 481.762 635.546 cv
473.934 633.68 465.524 630.429 461.389 623.087 cv
468.551 617.848 478.475 616.617 487.138 617.876 cv
496.772 619.276 505.918 623.847 512.639 630.866 cv
515.697 640.355 516.606 650.444 517.161 660.508 cv
515.042 647.841 506.572 637.153 494.928 631.702 cv
488.152 628.529 481.014 627.708 473.632 628.528 cv
473.605 628.531 473.604 628.572 473.632 628.57 cv
485.851 627.604 498.759 634.132 506.172 643.673 cv
513.657 653.307 515.294 666.305 511.008 677.653 cv
508.62 683.978 504.494 688.876 499.474 693.281 cv
498.037 694.542 498.185 696.996 499.474 698.286 cv
500.938 699.75 502.996 699.5 504.48 698.286 cv
512.617 691.626 517.018 680.53 517.637 669.852 cv
517.741 671.902 517.853 673.945 517.991 675.971 cv
518.429 682.423 519.169 689.235 520.778 695.76 cv
515.136 699.413 508.599 701.597 501.745 701.909 cv
501.531 701.919 501.459 702.259 501.692 702.303 cv
508.585 703.601 515.488 701.964 521.564 698.666 cv
523.925 706.702 527.792 714.132 534.359 719.657 cv
536.258 721.254 538.339 722.626 540.524 723.815 cv
540.279 726.756 540.534 729.639 542.457 732.045 cv
543.582 733.452 546.426 733.445 547.545 732.045 cv
549.464 729.645 549.72 726.756 549.477 723.814 cv
551.662 722.626 553.742 721.254 555.641 719.657 cv
562.208 714.132 566.075 706.702 568.436 698.666 cv
574.512 701.964 581.415 703.601 588.308 702.303 cv
588.541 702.259 588.469 701.919 588.255 701.909 cv
581.401 701.597 574.864 699.413 569.222 695.76 cv
570.831 689.235 571.571 682.423 572.009 675.971 cv
572.147 673.945 572.259 671.902 572.363 669.852 cv
572.982 680.53 577.383 691.626 585.52 698.286 cv
587.004 699.5 589.062 699.75 590.526 698.286 cv
591.815 696.996 591.963 694.542 590.526 693.281 cv
585.506 688.876 581.38 683.978 578.992 677.653 cv
cp
f
713.96 622.383 mo
711.453 620.821 708.465 620.233 705.503 620.382 cv
705.547 620.337 705.597 620.298 705.64 620.252 cv
707.709 617.982 706.561 614.166 703.642 613.288 cv
700.618 612.378 697.448 613.86 695.293 616.183 cv
695.02 615.761 694.698 615.363 694.322 614.995 cv
690.541 611.29 684.545 613.099 681.876 617.113 cv
678.785 621.762 680.314 627.636 680.816 632.78 cv
681.114 635.824 681.15 638.885 680.87 641.931 cv
680.676 644.052 680.25 646.147 679.632 648.184 cv
679.813 645.536 679.501 642.804 679.044 640.486 cv
677.988 635.126 674.581 629.842 668.859 628.812 cv
663.088 627.773 657.285 631.937 657.462 638.067 cv
657.548 641.067 659.483 644.665 662.893 644.665 cv
666.717 644.665 668.328 640.884 666.973 637.74 cv
666.56 636.78 665.352 636.076 664.283 635.936 cv
664.319 635.85 664.358 635.764 664.401 635.681 cv
664.925 634.66 665.903 634.065 666.994 633.804 cv
669.769 633.141 672.423 634.778 674.125 636.852 cv
676.148 639.317 676.948 642.506 677.408 645.601 cv
677.542 646.502 677.635 647.403 677.675 648.3 cv
676.977 645.447 674.797 642.726 671.723 642.455 cv
668.206 642.145 664.684 645.254 665.307 648.903 cv
665.956 652.703 670.734 654.866 673.588 651.818 cv
675.013 650.295 674.143 646.998 671.708 647.281 cv
670.969 647.366 670.451 647.507 669.918 647.823 cv
669.938 647.57 669.852 647.196 669.948 646.871 cv
670.151 646.184 670.871 645.62 671.533 645.399 cv
673.583 644.714 675.763 646.528 676.413 648.325 cv
677.599 651.607 676.19 654.871 674.754 657.875 cv
673.534 659.482 672.171 660.97 670.784 662.437 cv
667.123 665.464 663.448 668.474 659.483 671.076 cv
650.496 676.972 638.766 680.841 628.553 675.631 cv
628.019 675.359 627.559 676.131 628.081 676.438 cv
635.257 680.669 643.907 680.426 651.639 677.915 cv
659.125 675.484 665.446 670.912 671.593 666.129 cv
678.099 661.067 684.703 655.117 692.56 652.251 cv
699.113 649.862 709.351 650.734 711.083 659.003 cv
711.644 661.678 710.596 664.374 708.084 665.611 cv
708.027 665.639 707.972 665.661 707.916 665.686 cv
708.328 663.827 707.456 661.803 705.53 660.551 cv
702.59 658.639 698.869 659.857 697.071 662.722 cv
695.15 665.783 696.249 669.776 698.831 672.038 cv
701.182 674.098 704.428 674.724 707.449 674.237 cv
712.158 673.476 716.137 669.711 717.421 665.14 cv
718.75 660.412 716.973 655.289 713.654 651.821 cv
706.132 643.96 694.244 646.35 685.838 651.256 cv
684.435 652.075 683.082 652.964 681.75 653.883 cv
681.869 653.751 681.995 653.625 682.112 653.491 cv
684.442 650.817 686.653 647.739 688.315 644.608 cv
690.015 641.404 691.257 637.973 692.919 634.75 cv
695.906 628.956 700.611 622.721 707.67 622.154 cv
714.421 621.612 719.771 628.57 719.81 634.823 cv
719.81 634.86 719.87 634.87 719.875 634.832 cv
720.583 629.838 718.236 625.049 713.96 622.383 cv
cp
f
713.416 633.904 mo
713.459 633.405 713.374 632.885 713.116 632.382 cv
711.138 628.514 705.56 631.23 706.612 635.19 cv
707.463 638.395 711.46 639.508 714.157 637.903 cv
716.876 636.285 717.396 632.84 716.205 630.111 cv
715.003 627.357 712.946 625.421 710.132 624.39 cv
709.985 624.336 709.904 624.558 710.029 624.634 cv
711.971 625.811 713.937 627.782 714.467 630.088 cv
714.754 631.336 714.514 633.075 713.416 633.904 cv
cp
f
679.119 613.492 mo
680.169 614.302 682.061 614.399 682.977 613.262 cv
684.53 611.331 685.755 609.42 688.536 609.34 cv
691.461 609.256 694.088 611.432 695.108 614.049 cv
695.202 614.29 695.555 614.261 695.567 613.987 cv
695.736 610.127 693.386 606.584 689.671 605.392 cv
685.801 604.15 680.119 605.749 678.362 609.701 cv
677.757 611.062 677.881 612.536 679.119 613.492 cv
cp
f
698.917 611.025 mo
699.741 609.25 701.413 607.82 703.4 607.587 cv
704.189 607.494 705.773 607.549 706.026 608.46 cv
706.115 608.779 705.93 609.215 705.976 609.56 cv
706.036 609.998 706.217 610.363 706.436 610.74 cv
706.937 611.604 708.26 612.054 709.131 611.446 cv
709.414 611.249 li
710.512 610.484 710.815 609.284 710.243 608.086 cv
707.45 602.228 698.781 604.974 698.046 610.789 cv
697.988 611.246 698.729 611.432 698.917 611.025 cv
cp
f
694.958 604.726 mo
695.125 604.666 695.273 604.577 695.414 604.474 cv
695.44 604.497 695.462 604.514 695.462 604.512 cv
695.556 604.911 695.955 605.345 696.055 605.819 cv
696.336 607.155 696.226 608.414 696.837 609.672 cv
696.959 609.922 697.397 609.868 697.447 609.592 cv
697.869 607.274 699.281 604.905 698.157 602.558 cv
697.222 600.607 693.871 599.249 692.294 601.273 cv
690.742 603.266 692.619 605.776 694.958 604.726 cv
cp
f
628.654 661.011 mo
628.429 664.113 633.623 664.812 634.089 661.747 cv
635.01 655.678 628.456 653.454 623.512 654.284 cv
617.986 655.213 614.046 659.093 610.774 663.355 cv
610.571 663.62 610.98 663.845 611.193 663.679 cv
614.052 661.448 617.251 659.109 620.819 658.201 cv
623.334 657.561 628.927 657.246 628.654 661.011 cv
cp
f
621.258 661.629 mo
619.022 661.805 616.987 663.156 615.546 664.804 cv
615.422 664.945 615.578 665.16 615.748 665.066 cv
616.974 664.389 618.25 663.96 619.658 663.925 cv
620.291 663.909 621.431 663.879 621.843 664.483 cv
621.724 664.309 621.876 665.382 621.868 665.312 cv
622.172 667.86 625.477 667.824 625.808 665.312 cv
626.122 662.936 623.288 661.468 621.258 661.629 cv
cp
f
677.626 690.698 mo
666.286 699.574 651.645 704.562 637.228 704.194 cv
630.42 704.02 623.721 702.757 617.38 700.251 cv
614.282 699.026 611.224 697.57 608.36 695.867 cv
605.171 693.97 602.442 691.251 599.179 689.54 cv
598.942 689.416 598.708 689.328 598.479 689.266 cv
596.811 688.23 594.166 688.529 593.544 690.672 cv
592.029 695.894 593.271 701.886 594.715 707.005 cv
596.2 712.269 598.304 717.423 600.533 722.412 cv
600.726 722.844 601.38 722.566 601.209 722.125 cv
599.266 717.107 598.464 711.984 598.617 706.608 cv
602 711.61 606.695 715.715 612.178 717.956 cv
612.76 718.194 613.322 717.484 612.924 716.981 cv
610.115 713.431 607.32 709.529 605.214 705.517 cv
604.471 704.102 603.825 702.672 603.242 701.223 cv
603.278 701.245 603.314 701.267 603.349 701.289 cv
606.241 703.074 609.236 704.674 612.392 705.94 cv
623.544 710.416 635.905 711.781 647.667 709.133 cv
659.482 706.473 669.988 700.129 677.955 691.025 cv
678.134 690.821 677.83 690.538 677.626 690.698 cv
cp
f
384.47 660.551 mo
382.544 661.803 381.672 663.827 382.084 665.686 cv
382.028 665.661 381.973 665.639 381.916 665.611 cv
379.404 664.374 378.356 661.678 378.917 659.003 cv
380.649 650.734 390.887 649.862 397.44 652.251 cv
405.297 655.117 411.901 661.067 418.407 666.129 cv
424.554 670.912 430.875 675.484 438.361 677.915 cv
446.093 680.426 454.743 680.669 461.919 676.438 cv
462.441 676.131 461.981 675.359 461.447 675.631 cv
451.234 680.841 439.504 676.972 430.517 671.076 cv
426.552 668.474 422.877 665.464 419.216 662.437 cv
417.829 660.97 416.466 659.482 415.246 657.875 cv
413.81 654.871 412.401 651.607 413.587 648.325 cv
414.237 646.528 416.417 644.714 418.467 645.399 cv
419.129 645.62 419.849 646.184 420.052 646.871 cv
420.148 647.196 420.063 647.57 420.082 647.823 cv
419.549 647.507 419.031 647.366 418.292 647.281 cv
415.857 646.998 414.987 650.295 416.412 651.818 cv
419.266 654.866 424.044 652.703 424.693 648.903 cv
425.316 645.254 421.794 642.145 418.277 642.455 cv
415.203 642.726 413.024 645.446 412.325 648.3 cv
412.365 647.403 412.458 646.502 412.592 645.601 cv
413.052 642.506 413.852 639.317 415.875 636.852 cv
417.577 634.778 420.231 633.141 423.006 633.804 cv
424.097 634.065 425.075 634.66 425.599 635.681 cv
425.642 635.764 425.681 635.85 425.717 635.936 cv
424.648 636.076 423.44 636.78 423.027 637.74 cv
421.672 640.884 423.283 644.665 427.107 644.665 cv
430.517 644.665 432.452 641.067 432.538 638.067 cv
432.715 631.937 426.912 627.773 421.141 628.812 cv
415.419 629.842 412.012 635.126 410.956 640.486 cv
410.499 642.804 410.187 645.536 410.368 648.184 cv
409.75 646.147 409.324 644.052 409.13 641.931 cv
408.85 638.885 408.886 635.824 409.184 632.78 cv
409.686 627.636 411.215 621.762 408.124 617.113 cv
405.455 613.099 399.459 611.29 395.678 614.995 cv
395.302 615.363 394.98 615.761 394.707 616.183 cv
392.552 613.86 389.382 612.378 386.358 613.288 cv
383.439 614.166 382.291 617.982 384.36 620.252 cv
384.403 620.298 384.453 620.337 384.497 620.382 cv
381.535 620.233 378.547 620.821 376.04 622.383 cv
371.764 625.049 369.417 629.838 370.125 634.832 cv
370.13 634.87 370.19 634.86 370.19 634.823 cv
370.229 628.57 375.579 621.612 382.33 622.154 cv
389.389 622.721 394.094 628.956 397.081 634.75 cv
398.743 637.973 399.985 641.404 401.685 644.608 cv
403.347 647.739 405.558 650.817 407.888 653.491 cv
408.005 653.625 408.131 653.751 408.25 653.883 cv
406.918 652.964 405.565 652.075 404.162 651.256 cv
395.756 646.35 383.868 643.96 376.346 651.821 cv
373.027 655.289 371.25 660.412 372.579 665.14 cv
373.863 669.711 377.842 673.476 382.551 674.237 cv
385.572 674.724 388.818 674.098 391.169 672.038 cv
393.751 669.776 394.85 665.783 392.929 662.722 cv
391.131 659.857 387.41 658.639 384.47 660.551 cv
cp
f
443.141 683.341 mo
430.259 680.781 418.512 673.783 409.905 663.898 cv
409.513 663.447 408.7 664.057 409.066 664.545 cv
416.569 674.553 426.798 681.97 438.482 686.359 cv
449.461 690.484 464.79 693.036 473.88 683.591 cv
476.653 680.71 478.444 676.539 476.889 672.614 cv
475.433 668.939 470.862 666.107 467.141 668.415 cv
464.785 669.875 464.854 674.272 467.978 674.823 cv
468.797 674.967 469.761 674.853 470.104 675.735 cv
470.58 676.957 469.127 678.667 468.372 679.462 cv
466.481 681.456 463.938 682.649 461.317 683.352 cv
455.415 684.936 449.076 684.52 443.141 683.341 cv
cp
f
460.605 699.865 mo
475.05 699.216 490.681 690.15 491.356 674.232 cv
492.035 658.199 477.767 646.42 462.497 646.093 cv
454.141 645.914 444.998 650.302 443.584 659.322 cv
442.964 663.272 444.183 667.269 447.22 669.945 cv
450.226 672.593 454.591 673.823 458.41 672.297 cv
462.811 670.538 460.243 664.219 455.863 666.255 cv
453.854 667.189 451.338 665.823 450.107 664.225 cv
448.274 661.846 448.893 658.475 450.318 656.07 cv
453.956 649.931 462.812 649.179 469.106 650.651 cv
475.94 652.249 482.143 656.476 485.542 662.691 cv
488.923 668.873 489.336 676.531 486.006 682.821 cv
478.796 696.441 461.709 698.673 447.961 696.351 cv
440.903 695.159 433.954 692.912 427.858 689.107 cv
421.831 685.344 417.451 680.039 413.348 674.338 cv
409.324 668.745 405.385 662.981 399.739 658.876 cv
395.149 655.541 388.108 653.091 383.362 657.462 cv
383.298 657.522 383.391 657.608 383.457 657.556 cv
390.607 651.975 399.693 659.565 404.234 664.959 cv
409.06 670.693 412.717 677.308 417.605 682.993 cv
427.883 694.947 445.122 700.561 460.605 699.865 cv
cp
f
428.047 665.275 mo
429.815 668.79 435.538 665.416 433.294 662.208 cv
429.772 657.17 432.154 650.828 436.43 647.097 cv
441.131 642.996 448.149 641.406 454.204 640.802 cv
466.77 639.549 479.683 643.365 488.157 653.03 cv
492.525 658.012 495.517 664.296 496.436 670.865 cv
496.482 671.199 497.05 671.122 497.026 670.785 cv
496.074 657.568 486.717 646.639 474.75 641.594 cv
468.078 638.782 460.687 637.768 453.486 638.338 cv
446.508 638.891 439.193 640.689 433.55 645.019 cv
427.388 649.747 424.437 658.095 428.047 665.275 cv
cp
f
497.72 674.154 mo
496.849 675.834 495.324 677.402 495.016 679.286 cv
494.558 682.088 497.328 684.967 500.136 683.223 cv
503.688 681.016 505.051 675.016 505.645 671.112 cv
506.293 666.857 505.939 662.38 504.645 658.271 cv
502.349 650.985 497.233 644.819 490.48 641.257 cv
490.258 641.141 489.977 641.454 490.197 641.625 cv
495.592 645.818 499.435 651.962 500.401 658.777 cv
500.894 662.255 500.539 665.717 499.621 669.088 cv
499.144 670.843 498.558 672.536 497.72 674.154 cv
cp
f
379.971 624.634 mo
380.096 624.558 380.015 624.336 379.868 624.39 cv
377.054 625.421 374.997 627.357 373.795 630.111 cv
372.604 632.84 373.124 636.285 375.843 637.903 cv
378.54 639.508 382.537 638.395 383.388 635.19 cv
384.44 631.23 378.862 628.514 376.884 632.382 cv
376.626 632.885 376.541 633.405 376.584 633.904 cv
375.486 633.075 375.246 631.336 375.533 630.088 cv
376.063 627.782 378.029 625.811 379.971 624.634 cv
cp
f
394.433 613.987 mo
394.445 614.261 394.798 614.29 394.892 614.049 cv
395.913 611.432 398.539 609.256 401.464 609.34 cv
404.246 609.42 405.47 611.331 407.023 613.262 cv
407.939 614.399 409.831 614.302 410.881 613.492 cv
412.119 612.536 412.243 611.062 411.638 609.701 cv
409.881 605.749 404.199 604.15 400.329 605.392 cv
396.614 606.584 394.264 610.127 394.433 613.987 cv
cp
f
380.586 611.249 mo
380.869 611.446 li
381.74 612.054 383.063 611.604 383.564 610.74 cv
383.783 610.363 383.964 609.998 384.024 609.56 cv
384.07 609.215 383.885 608.779 383.974 608.46 cv
384.227 607.549 385.811 607.494 386.6 607.587 cv
388.587 607.82 390.259 609.25 391.083 611.025 cv
391.271 611.432 392.012 611.246 391.954 610.789 cv
391.219 604.974 382.55 602.228 379.757 608.086 cv
379.185 609.284 379.488 610.484 380.586 611.249 cv
cp
f
393.163 609.672 mo
393.774 608.414 393.664 607.155 393.945 605.819 cv
394.045 605.345 394.444 604.911 394.538 604.512 cv
394.538 604.514 394.56 604.497 394.586 604.474 cv
394.727 604.577 394.875 604.666 395.042 604.726 cv
397.381 605.776 399.258 603.266 397.706 601.273 cv
396.129 599.249 392.778 600.607 391.843 602.558 cv
390.719 604.905 392.131 607.274 392.553 609.592 cv
392.603 609.868 393.041 609.922 393.163 609.672 cv
cp
f
479.226 663.355 mo
475.954 659.093 472.014 655.213 466.488 654.284 cv
461.544 653.454 454.99 655.678 455.911 661.747 cv
456.377 664.812 461.571 664.113 461.346 661.011 cv
461.073 657.246 466.666 657.561 469.181 658.201 cv
472.749 659.109 475.948 661.448 478.807 663.679 cv
479.02 663.845 479.429 663.62 479.226 663.355 cv
cp
f
470.342 663.925 mo
471.75 663.96 473.026 664.389 474.252 665.066 cv
474.422 665.16 474.578 664.945 474.454 664.804 cv
473.013 663.156 470.978 661.805 468.742 661.629 cv
466.712 661.468 463.878 662.936 464.192 665.312 cv
464.524 667.824 467.828 667.86 468.132 665.312 cv
468.124 665.382 468.276 664.309 468.157 664.483 cv
468.569 663.879 469.709 663.909 470.342 663.925 cv
cp
f
491.521 689.266 mo
491.292 689.328 491.058 689.416 490.821 689.54 cv
487.559 691.251 484.829 693.97 481.64 695.867 cv
478.776 697.57 475.718 699.026 472.62 700.251 cv
466.279 702.757 459.58 704.02 452.772 704.194 cv
438.355 704.562 423.714 699.574 412.374 690.698 cv
412.17 690.538 411.867 690.821 412.045 691.025 cv
420.012 700.129 430.518 706.473 442.333 709.133 cv
454.095 711.781 466.456 710.416 477.608 705.94 cv
480.764 704.674 483.759 703.074 486.651 701.289 cv
486.686 701.267 486.722 701.245 486.758 701.223 cv
486.175 702.672 485.529 704.102 484.786 705.517 cv
482.68 709.529 479.885 713.431 477.076 716.981 cv
476.678 717.484 477.241 718.194 477.822 717.956 cv
483.305 715.715 488 711.61 491.383 706.608 cv
491.536 711.984 490.734 717.107 488.791 722.125 cv
488.62 722.566 489.274 722.844 489.467 722.412 cv
491.696 717.423 493.801 712.269 495.285 707.005 cv
496.729 701.886 497.971 695.894 496.456 690.672 cv
495.834 688.529 493.189 688.23 491.521 689.266 cv
cp
f
540.7 658.095 mo
540.629 658.095 540.629 658.205 540.7 658.205 cv
540.771 658.205 540.772 658.095 540.7 658.095 cv
cp
f
541.552 638.538 mo
541.995 638.878 542.419 639.376 542.769 639.811 cv
543.168 640.305 543.381 641.01 543.662 641.575 cv
543.917 642.087 544.173 642.987 544.717 643.27 cv
545.354 643.601 545.845 642.51 546.04 642.09 cv
546.408 641.298 546.677 640.505 547.237 639.811 cv
547.587 639.376 548.01 638.878 548.454 638.538 cv
549.034 638.094 549.694 637.885 550.264 637.403 cv
550.949 636.823 551.015 635.657 550.585 634.92 cv
550.085 634.067 549.185 633.855 548.271 633.979 cv
547.628 634.066 547.02 634.414 546.485 634.897 cv
546.488 634.877 546.49 634.856 546.493 634.835 cv
546.635 633.84 546.252 633.153 545.316 632.763 cv
545.027 632.642 544.71 632.642 544.421 632.763 cv
543.552 633.125 543.158 633.749 543.229 634.654 cv
542.769 634.3 542.264 634.05 541.735 633.979 cv
540.821 633.855 539.921 634.067 539.421 634.92 cv
538.99 635.657 539.057 636.823 539.742 637.403 cv
540.312 637.885 540.972 638.094 541.552 638.538 cv
cp
f
531.664 646.23 mo
532.409 646.168 533.022 645.848 533.747 645.753 cv
534.301 645.679 534.952 645.733 535.507 645.792 cv
536.139 645.86 536.788 646.207 537.386 646.408 cv
537.929 646.59 538.745 647.045 539.331 646.86 cv
540.015 646.644 539.591 645.526 539.432 645.091 cv
539.132 644.271 538.762 643.52 538.667 642.632 cv
538.607 642.078 538.554 641.426 538.627 640.872 cv
538.723 640.148 539.043 639.534 539.105 638.789 cv
539.179 637.895 538.401 637.023 537.576 636.807 cv
536.619 636.557 535.833 637.043 535.274 637.777 cv
534.881 638.294 534.697 638.97 534.661 639.69 cv
534.648 639.674 534.635 639.657 534.623 639.641 cv
534.019 638.836 533.262 638.622 532.325 639.007 cv
532.034 639.126 531.811 639.35 531.692 639.641 cv
531.333 640.511 531.497 641.231 532.187 641.82 cv
531.61 641.896 531.077 642.076 530.652 642.399 cv
529.918 642.958 529.431 643.744 529.682 644.701 cv
529.898 645.526 530.77 646.304 531.664 646.23 cv
cp
f
551.333 642.632 mo
551.238 643.52 550.868 644.271 550.568 645.091 cv
550.409 645.526 549.985 646.644 550.669 646.86 cv
551.255 647.045 552.071 646.59 552.614 646.408 cv
553.212 646.207 553.861 645.86 554.493 645.792 cv
555.048 645.733 555.699 645.679 556.253 645.753 cv
556.978 645.848 557.591 646.168 558.336 646.23 cv
559.23 646.304 560.102 645.526 560.318 644.701 cv
560.569 643.744 560.082 642.958 559.348 642.399 cv
558.923 642.076 558.39 641.896 557.813 641.82 cv
558.503 641.231 558.667 640.511 558.308 639.641 cv
558.189 639.35 557.966 639.126 557.675 639.007 cv
556.738 638.622 555.981 638.836 555.377 639.641 cv
555.365 639.657 555.352 639.674 555.339 639.69 cv
555.303 638.97 555.119 638.294 554.726 637.777 cv
554.167 637.043 553.381 636.557 552.424 636.807 cv
551.599 637.023 550.821 637.895 550.895 638.789 cv
550.957 639.534 551.277 640.148 551.373 640.872 cv
551.446 641.426 551.393 642.078 551.333 642.632 cv
cp
f
394.934 485.162 mo
405.947 483.667 412.919 474.696 419.929 467.042 cv
426.657 459.695 434.911 454.509 444.64 452.153 cv
455.181 449.6 466.697 450.46 476.643 454.834 cv
476.838 454.919 477.012 454.644 476.814 454.54 cv
461.646 446.574 442.681 447.625 428.137 456.57 cv
419.825 461.683 414.309 469.813 406.622 475.643 cv
399.651 480.931 388.847 483.838 382.977 475.436 cv
380.471 471.85 379.782 467.172 381.905 463.233 cv
384.126 459.11 387.953 457.09 392.444 456.371 cv
395.522 455.878 394.705 451.043 391.722 451.037 cv
382.344 451.018 374.326 460.544 375.315 469.711 cv
376.375 479.534 385.133 486.493 394.934 485.162 cv
cp
f
473.408 458.541 mo
461.521 454.125 447.597 455.772 436.177 460.83 cv
430.802 463.21 425.862 466.46 421.502 470.398 cv
419.379 472.315 417.402 474.393 415.598 476.612 cv
413.721 478.92 411.178 481.697 410.355 484.603 cv
409.533 487.504 413.331 489.774 415.45 487.569 cv
417.348 485.594 418.552 482.74 420.194 480.519 cv
421.798 478.35 423.618 476.327 425.543 474.439 cv
429.33 470.725 433.623 467.533 438.306 465.037 cv
449.214 459.224 461.209 457.983 473.37 458.818 cv
473.539 458.83 473.548 458.593 473.408 458.541 cv
cp
f
403.634 488.669 mo
397.618 492.271 390.284 495.241 383.197 493.353 cv
380.048 492.514 377.128 490.696 375.43 487.859 cv
374.654 486.563 374.108 485.102 373.938 483.594 cv
373.755 481.968 374.203 480.562 374.424 478.989 cv
374.699 477.036 372.303 475.757 371.115 477.594 cv
369.095 480.718 370.127 485.42 371.777 488.466 cv
373.689 491.994 377.014 494.452 380.832 495.578 cv
389.286 498.07 397.345 494.127 403.874 488.98 cv
404.052 488.839 403.823 488.556 403.634 488.669 cv
cp
f
463.234 464.841 mo
453.378 464.449 443.65 467.732 435.883 473.784 cv
431.989 476.818 427.896 480.825 426.091 485.519 cv
424.337 490.084 426.09 494.664 430.382 496.958 cv
439.42 501.789 452.241 497.639 459.04 490.741 cv
462.466 487.265 464.703 481.392 460.818 477.337 cv
457.28 473.644 450.841 473.953 446.282 474.993 cv
441.878 475.998 434.488 479.506 436.457 485.297 cv
437.105 487.205 438.926 488.203 440.821 488.472 cv
443.629 488.87 446.088 487.391 448.363 485.935 cv
448.669 485.739 448.4 485.273 448.077 485.446 cv
446.159 486.477 444.013 487.68 441.756 487.458 cv
439.269 487.213 437.585 484.892 438.958 482.582 cv
440.007 480.818 442.055 480.072 443.898 479.458 cv
445.963 478.769 448.043 478.285 450.226 478.208 cv
453.278 478.102 458.839 478.442 458.74 482.663 cv
458.647 486.599 454.261 489.5 451.254 491.308 cv
447.939 493.303 444.146 494.586 440.283 494.903 cv
437.005 495.171 433.17 495.141 430.383 493.126 cv
423.119 487.876 434.334 477.137 438.616 473.756 cv
445.579 468.258 454.378 465.24 463.234 465.18 cv
463.453 465.179 463.452 464.85 463.234 464.841 cv
cp
f
495.876 461.761 mo
496.817 458.965 498.196 456.401 499.807 453.969 cv
500.281 456.481 500.298 459.081 499.757 461.648 cv
499.039 465.053 497.268 468.389 494.45 470.332 cv
494.439 467.434 494.953 464.504 495.876 461.761 cv
cp
481.083 412.258 mo
481.086 412.26 481.089 412.261 481.092 412.262 cv
481.071 412.255 481.045 412.245 481.083 412.258 cv
cp
519.774 469.8 mo
514.968 468.192 507.879 472.41 510.209 478.039 cv
511.005 479.962 513.861 480.345 514.519 478.039 cv
515.297 475.309 518.314 474.524 519.721 477.243 cv
521.254 480.205 519.051 483.765 516.654 485.53 cv
511.047 489.662 503.41 487.919 498.987 482.975 cv
496.829 480.563 495.526 477.712 494.9 474.698 cv
495.839 474.131 496.715 473.465 497.488 472.707 cv
502.972 467.337 503.654 458.967 501.228 451.928 cv
503.969 448.186 507.165 444.721 510.046 441.171 cv
515.507 434.441 520.547 426.459 519.241 417.408 cv
519.209 417.188 518.841 417.24 518.852 417.461 cv
519.408 428.709 510.701 436.957 503.357 444.226 cv
502.063 445.507 500.798 446.832 499.588 448.203 cv
499.339 447.749 499.079 447.302 498.802 446.871 cv
496.126 442.711 492.257 439.463 487.638 437.679 cv
487.49 437.622 487.385 437.868 487.529 437.938 cv
492.415 440.297 496.341 444.547 498.456 449.526 cv
496.24 452.182 494.273 455.017 492.75 458.057 cv
489.403 450.696 482.771 445.684 475.293 442.544 cv
475.354 442.563 475.414 442.583 475.475 442.601 cv
474.069 441.991 472.741 441.344 471.465 440.485 cv
469.853 439.4 468.448 437.991 467.292 436.433 cv
463.485 431.306 462.627 423.941 465.799 418.28 cv
467.148 415.871 469.376 413.913 471.886 412.79 cv
473.585 412.029 475.473 411.63 477.337 411.658 cv
478.626 411.678 479.861 411.948 481.101 412.266 cv
483.511 413.169 485.576 414.653 486.849 416.956 cv
487.745 418.575 488.178 420.419 488.105 422.266 cv
488.073 423.061 487.987 423.983 487.696 424.732 cv
487.077 426.426 486.155 427.851 484.627 428.904 cv
483.415 429.74 481.886 430.241 480.409 430.254 cv
479.777 430.259 479.14 430.2 478.526 430.05 cv
478.435 430.028 478.016 429.925 478.11 429.957 cv
476.689 429.456 475.472 428.673 474.65 427.365 cv
474.081 426.46 473.748 425.411 473.701 424.343 cv
473.679 423.866 473.709 423.383 473.804 422.916 cv
473.831 422.783 473.862 422.65 473.894 422.519 cv
473.901 422.492 473.94 422.362 473.901 422.463 cv
474.294 421.461 474.725 420.599 475.619 419.922 cv
476.775 419.046 478.557 418.644 479.842 419.075 cv
480.751 419.376 481.528 419.851 482.064 420.666 cv
482.748 421.707 482.929 423.105 482.456 424.268 cv
481.921 425.58 480.536 426.349 479.142 426.197 cv
477.591 426.028 476.472 424.627 476.744 423.064 cv
476.978 421.725 478.266 420.938 479.571 421.219 cv
478.589 420.871 477.489 421.164 476.821 421.97 cv
476.083 422.859 476.023 424.181 476.502 425.204 cv
477.003 426.274 478.037 426.962 479.192 427.132 cv
481.874 427.527 484.052 425.32 484.143 422.724 cv
484.218 420.585 482.965 418.562 481.046 417.642 cv
479.252 416.782 477.091 416.834 475.311 417.704 cv
470.906 419.854 470.278 425.782 473.068 429.48 cv
475.718 432.991 480.697 433.794 484.613 432.092 cv
487.666 430.766 489.795 428.084 490.613 424.911 cv
491.831 420.182 490.097 414.955 486.282 411.898 cv
482.762 409.076 477.919 408.331 473.597 409.453 cv
468.791 410.701 464.689 414.325 463.053 419.041 cv
461.314 424.052 461.792 429.695 464.479 434.292 cv
465.788 436.532 467.584 438.47 469.697 439.971 cv
470.412 440.479 471.159 440.903 471.931 441.271 cv
468.777 440.204 465.544 439.437 462.399 438.944 cv
446.955 436.521 430.664 439.825 417.676 448.626 cv
414.346 450.882 411.2 453.44 408.339 456.269 cv
405.394 459.18 402.377 462.462 400.359 466.099 cv
398.885 468.756 402.73 472.089 404.757 469.493 cv
406.809 466.865 408.645 464.116 410.88 461.63 cv
413.103 459.159 415.525 456.866 418.117 454.786 cv
423.251 450.666 429.19 447.336 435.397 445.15 cv
448.876 440.404 464.977 440.233 478.021 446.512 cv
483.882 449.334 489.181 453.512 492.133 459.339 cv
490.629 462.683 489.681 466.274 489.557 470.154 cv
489.538 470.767 489.546 471.381 489.573 471.995 cv
487.077 472.025 484.278 470.732 483.155 468.529 cv
484.208 467.781 484.901 466.558 484.901 465.168 cv
484.901 462.89 483.054 461.043 480.776 461.043 cv
479.28 461.043 477.983 461.847 477.259 463.039 cv
476.904 463.571 476.678 464.203 476.618 464.829 cv
476.149 469.742 479.47 474.249 483.954 475.986 cv
485.964 476.765 488.123 476.888 490.206 476.503 cv
491.824 483.423 496.388 489.636 503.2 492.23 cv
511.496 495.388 522.249 491.882 525.455 483.183 cv
527.358 478.022 525.293 471.647 519.774 469.8 cv
cp
f
518.217 436.994 mo
514.309 441.907 510.697 447.023 507.404 452.369 cv
507.371 452.422 507.453 452.489 507.493 452.437 cv
511.893 446.849 516.688 441.614 521.724 436.596 cv
526.148 432.188 531.03 426.202 528.578 419.478 cv
527.41 416.279 522.436 417.527 523.395 420.907 cv
525.122 426.991 521.91 432.351 518.217 436.994 cv
cp
f
545 445.863 mo
546.307 445.863 547.366 444.804 547.366 443.498 cv
547.366 442.191 546.307 441.132 545 441.132 cv
543.693 441.132 542.634 442.191 542.634 443.498 cv
542.634 444.804 543.693 445.863 545 445.863 cv
cp
f
697.556 456.371 mo
702.047 457.09 705.874 459.11 708.095 463.233 cv
710.218 467.172 709.529 471.85 707.023 475.436 cv
701.153 483.838 690.349 480.931 683.378 475.643 cv
675.691 469.813 670.175 461.683 661.863 456.57 cv
647.319 447.625 628.354 446.574 613.186 454.54 cv
612.988 454.644 613.162 454.919 613.357 454.834 cv
623.303 450.46 634.819 449.6 645.36 452.153 cv
655.089 454.509 663.343 459.695 670.071 467.042 cv
677.081 474.696 684.053 483.667 695.066 485.162 cv
704.867 486.493 713.625 479.534 714.685 469.711 cv
715.674 460.544 707.656 451.018 698.278 451.037 cv
695.295 451.043 694.478 455.878 697.556 456.371 cv
cp
f
674.402 476.612 mo
672.598 474.393 670.621 472.315 668.498 470.398 cv
664.138 466.46 659.198 463.21 653.823 460.83 cv
642.403 455.772 628.479 454.125 616.592 458.541 cv
616.452 458.593 616.461 458.83 616.63 458.818 cv
628.791 457.983 640.786 459.224 651.694 465.037 cv
656.377 467.533 660.67 470.725 664.457 474.439 cv
666.382 476.327 668.202 478.35 669.806 480.519 cv
671.448 482.74 672.652 485.594 674.55 487.569 cv
676.669 489.774 680.467 487.504 679.645 484.603 cv
678.822 481.697 676.279 478.92 674.402 476.612 cv
cp
f
718.885 477.594 mo
717.697 475.757 715.301 477.036 715.576 478.989 cv
715.797 480.562 716.245 481.968 716.062 483.594 cv
715.892 485.102 715.346 486.563 714.57 487.859 cv
712.872 490.696 709.952 492.514 706.803 493.353 cv
699.716 495.241 692.382 492.271 686.366 488.669 cv
686.177 488.556 685.948 488.839 686.126 488.98 cv
692.655 494.127 700.714 498.07 709.168 495.578 cv
712.986 494.452 716.311 491.994 718.223 488.466 cv
719.873 485.42 720.905 480.718 718.885 477.594 cv
cp
f
654.117 473.784 mo
646.35 467.732 636.622 464.449 626.766 464.841 cv
626.548 464.85 626.547 465.179 626.766 465.18 cv
635.622 465.24 644.421 468.258 651.384 473.756 cv
655.666 477.137 666.881 487.876 659.617 493.126 cv
656.83 495.141 652.995 495.171 649.717 494.903 cv
645.854 494.586 642.061 493.303 638.746 491.308 cv
635.739 489.5 631.353 486.599 631.26 482.663 cv
631.161 478.442 636.722 478.102 639.774 478.208 cv
641.957 478.285 644.037 478.769 646.102 479.458 cv
647.945 480.072 649.993 480.818 651.042 482.582 cv
652.415 484.892 650.731 487.213 648.244 487.458 cv
645.987 487.68 643.841 486.477 641.923 485.446 cv
641.6 485.273 641.331 485.739 641.637 485.935 cv
643.912 487.391 646.371 488.87 649.179 488.472 cv
651.074 488.203 652.895 487.205 653.543 485.297 cv
655.512 479.506 648.122 475.998 643.718 474.993 cv
639.159 473.953 632.72 473.644 629.182 477.337 cv
625.297 481.392 627.534 487.265 630.96 490.741 cv
637.759 497.639 650.58 501.789 659.618 496.958 cv
663.91 494.664 665.663 490.084 663.909 485.519 cv
662.104 480.825 658.011 476.818 654.117 473.784 cv
cp
f
590.243 461.648 mo
589.702 459.081 589.719 456.481 590.193 453.969 cv
591.804 456.401 593.183 458.965 594.124 461.761 cv
595.047 464.504 595.561 467.434 595.55 470.332 cv
592.732 468.389 590.961 465.053 590.243 461.648 cv
cp
608.908 412.262 mo
608.911 412.261 608.914 412.26 608.917 412.258 cv
608.955 412.245 608.929 412.255 608.908 412.262 cv
cp
612.741 463.039 mo
612.017 461.847 610.72 461.043 609.224 461.043 cv
606.946 461.043 605.099 462.89 605.099 465.168 cv
605.099 466.558 605.792 467.781 606.845 468.529 cv
605.722 470.732 602.923 472.025 600.427 471.995 cv
600.454 471.381 600.462 470.767 600.443 470.154 cv
600.319 466.274 599.371 462.683 597.867 459.339 cv
600.819 453.512 606.118 449.334 611.979 446.512 cv
625.023 440.233 641.124 440.404 654.603 445.15 cv
660.81 447.336 666.749 450.666 671.883 454.786 cv
674.475 456.866 676.897 459.159 679.12 461.63 cv
681.355 464.116 683.191 466.865 685.243 469.493 cv
687.27 472.089 691.115 468.756 689.641 466.099 cv
687.623 462.462 684.606 459.18 681.661 456.269 cv
678.8 453.44 675.654 450.882 672.324 448.626 cv
659.336 439.825 643.045 436.521 627.601 438.944 cv
624.456 439.437 621.223 440.204 618.069 441.271 cv
618.841 440.903 619.588 440.479 620.303 439.971 cv
622.416 438.47 624.212 436.532 625.521 434.292 cv
628.208 429.695 628.686 424.052 626.947 419.041 cv
625.311 414.325 621.209 410.701 616.403 409.453 cv
612.081 408.331 607.238 409.076 603.718 411.898 cv
599.903 414.955 598.169 420.182 599.387 424.911 cv
600.205 428.084 602.334 430.766 605.387 432.092 cv
609.303 433.794 614.282 432.991 616.932 429.48 cv
619.722 425.782 619.094 419.854 614.689 417.704 cv
612.909 416.834 610.748 416.782 608.954 417.642 cv
607.035 418.562 605.782 420.585 605.857 422.724 cv
605.948 425.32 608.126 427.527 610.808 427.132 cv
611.963 426.962 612.997 426.274 613.498 425.204 cv
613.977 424.181 613.917 422.859 613.179 421.97 cv
612.511 421.164 611.411 420.871 610.429 421.219 cv
611.734 420.938 613.022 421.725 613.256 423.064 cv
613.528 424.627 612.409 426.028 610.858 426.197 cv
609.464 426.349 608.079 425.58 607.544 424.268 cv
607.071 423.105 607.252 421.707 607.936 420.666 cv
608.472 419.851 609.249 419.376 610.158 419.075 cv
611.443 418.644 613.225 419.046 614.381 419.922 cv
615.275 420.599 615.706 421.461 616.099 422.463 cv
616.06 422.362 616.099 422.492 616.106 422.519 cv
616.138 422.65 616.169 422.783 616.196 422.916 cv
616.291 423.383 616.321 423.866 616.299 424.343 cv
616.252 425.411 615.919 426.46 615.35 427.365 cv
614.528 428.673 613.311 429.456 611.89 429.957 cv
611.984 429.925 611.565 430.028 611.474 430.05 cv
610.86 430.2 610.223 430.259 609.591 430.254 cv
608.114 430.241 606.585 429.74 605.373 428.904 cv
603.845 427.851 602.923 426.426 602.304 424.732 cv
602.013 423.983 601.927 423.061 601.895 422.266 cv
601.822 420.419 602.255 418.575 603.151 416.956 cv
604.424 414.653 606.489 413.169 608.899 412.266 cv
610.139 411.948 611.374 411.678 612.663 411.658 cv
614.527 411.63 616.415 412.029 618.114 412.79 cv
620.624 413.913 622.852 415.871 624.201 418.28 cv
627.373 423.941 626.515 431.306 622.708 436.433 cv
621.552 437.991 620.147 439.4 618.535 440.485 cv
617.259 441.344 615.931 441.991 614.525 442.601 cv
614.586 442.583 614.646 442.563 614.707 442.544 cv
607.229 445.684 600.597 450.696 597.25 458.057 cv
595.727 455.017 593.76 452.182 591.544 449.526 cv
593.659 444.547 597.585 440.297 602.471 437.938 cv
602.615 437.868 602.51 437.622 602.362 437.679 cv
597.743 439.463 593.874 442.711 591.198 446.871 cv
590.921 447.302 590.661 447.749 590.412 448.203 cv
589.202 446.832 587.937 445.507 586.643 444.226 cv
579.299 436.957 570.592 428.709 571.148 417.461 cv
571.159 417.24 570.791 417.188 570.759 417.408 cv
569.453 426.459 574.493 434.441 579.954 441.171 cv
582.835 444.721 586.031 448.186 588.772 451.928 cv
586.346 458.967 587.028 467.337 592.512 472.707 cv
593.285 473.465 594.161 474.131 595.1 474.698 cv
594.474 477.712 593.171 480.563 591.013 482.975 cv
586.59 487.919 578.953 489.662 573.346 485.53 cv
570.949 483.765 568.746 480.205 570.279 477.243 cv
571.686 474.524 574.703 475.309 575.481 478.039 cv
576.139 480.345 578.995 479.962 579.791 478.039 cv
582.121 472.41 575.032 468.192 570.226 469.8 cv
564.707 471.647 562.642 478.022 564.545 483.183 cv
567.751 491.882 578.504 495.388 586.8 492.23 cv
593.612 489.636 598.176 483.423 599.794 476.503 cv
601.877 476.888 604.036 476.765 606.046 475.986 cv
610.53 474.249 613.851 469.742 613.382 464.829 cv
613.322 464.203 613.096 463.571 612.741 463.039 cv
cp
f
551.305 495.496 mo
549.569 497.219 547.327 497.817 545 497.771 cv
542.673 497.817 540.431 497.219 538.695 495.496 cv
537.27 494.081 536.18 492.287 536.189 490.221 cv
536.2 487.68 538.011 485.408 539.412 483.443 cv
541.778 480.126 543.732 476.374 545 472.433 cv
546.268 476.374 548.222 480.126 550.588 483.443 cv
551.989 485.408 553.8 487.68 553.811 490.221 cv
553.82 492.287 552.73 494.081 551.305 495.496 cv
cp
569.669 464.631 mo
574.565 463.512 579.668 465.719 582.483 469.833 cv
585.433 474.147 585.471 483.134 578.614 483.593 cv
578.226 483.619 578.084 484.256 578.516 484.315 cv
583.939 485.061 586.91 480.231 587.016 475.466 cv
587.125 474.62 587.151 473.769 587.183 473.132 cv
587.283 471.15 586.821 469.008 586.255 467.125 cv
585.04 463.08 582.765 459.506 580.186 456.202 cv
574.769 449.259 567.277 444.151 563.572 435.906 cv
563.516 435.779 563.346 435.877 563.366 435.993 cv
564.776 444.083 570.465 449.934 575.494 456.024 cv
577.784 458.797 580.147 461.47 581.9 464.596 cv
580.896 463.704 579.787 462.933 578.601 462.325 cv
573.819 459.871 568.321 460.119 563.537 462.431 cv
558.568 464.832 554.979 469.517 553.657 474.844 cv
553.427 475.769 553.265 476.709 553.158 477.655 cv
550.882 474.56 549.045 471.204 547.903 467.48 cv
546.669 463.458 546.2 459.303 546.099 455.123 cv
546.099 455.093 546.1 455.063 546.1 455.033 cv
546.1 454.858 546.093 454.686 546.083 454.517 cv
546.083 454.492 546.081 454.467 546.081 454.442 cv
546.08 454.442 546.078 454.442 546.077 454.442 cv
545.967 452.852 545.447 451.526 545.172 450.923 cv
545.862 450.074 546.432 449.155 547.295 448.459 cv
547.729 448.109 548.203 447.805 548.716 447.586 cv
548.246 448.784 548.888 450.351 550.65 450.537 cv
552.537 450.737 554.085 448.784 553.751 446.983 cv
553.43 445.252 551.831 444.174 550.11 444.369 cv
547.47 444.669 545.033 447.957 545.007 450.587 cv
545.004 450.581 545 450.573 545 450.573 cv
545 450.573 544.996 450.581 544.993 450.587 cv
544.967 447.957 542.53 444.669 539.89 444.369 cv
538.169 444.174 536.57 445.252 536.249 446.983 cv
535.915 448.784 537.463 450.737 539.35 450.537 cv
541.112 450.351 541.754 448.784 541.284 447.586 cv
541.797 447.805 542.271 448.109 542.705 448.459 cv
543.568 449.155 544.138 450.074 544.828 450.923 cv
544.553 451.526 544.033 452.852 543.923 454.442 cv
543.922 454.442 543.92 454.442 543.919 454.442 cv
543.919 454.467 543.917 454.492 543.917 454.517 cv
543.907 454.686 543.9 454.858 543.9 455.033 cv
543.9 455.063 543.901 455.093 543.901 455.123 cv
543.8 459.303 543.331 463.458 542.097 467.48 cv
540.955 471.204 539.118 474.56 536.842 477.655 cv
536.735 476.709 536.573 475.769 536.343 474.844 cv
535.021 469.517 531.432 464.832 526.463 462.431 cv
521.679 460.119 516.181 459.871 511.399 462.325 cv
510.213 462.933 509.104 463.704 508.1 464.596 cv
509.853 461.47 512.216 458.797 514.506 456.024 cv
519.535 449.934 525.224 444.083 526.634 435.993 cv
526.654 435.877 526.484 435.779 526.428 435.906 cv
522.723 444.151 515.231 449.259 509.814 456.202 cv
507.235 459.506 504.96 463.08 503.745 467.125 cv
503.179 469.008 502.717 471.15 502.817 473.132 cv
502.849 473.769 502.875 474.62 502.984 475.466 cv
503.09 480.231 506.061 485.061 511.484 484.315 cv
511.916 484.256 511.774 483.619 511.386 483.593 cv
504.529 483.134 504.567 474.147 507.517 469.833 cv
510.332 465.719 515.435 463.512 520.331 464.631 cv
525.159 465.736 529.45 469.489 531.083 474.185 cv
531.981 476.769 532.162 479.452 531.866 482.161 cv
531.651 484.134 530.849 485.936 530.299 487.787 cv
530.264 487.902 530.231 488.018 530.199 488.134 cv
530.034 488.731 529.896 489.333 529.822 489.949 cv
529.803 490.112 529.809 490.262 529.825 490.406 cv
529.762 491.425 529.833 492.477 530.086 493.571 cv
531.156 498.19 534.956 501.885 539.444 503.211 cv
541.286 503.756 543.166 503.925 545 503.765 cv
546.834 503.925 548.714 503.756 550.556 503.211 cv
555.044 501.885 558.844 498.19 559.914 493.571 cv
560.167 492.477 560.238 491.425 560.175 490.406 cv
560.191 490.262 560.197 490.112 560.178 489.949 cv
560.104 489.333 559.966 488.731 559.801 488.134 cv
559.769 488.018 559.736 487.902 559.701 487.787 cv
559.151 485.936 558.349 484.134 558.134 482.161 cv
557.838 479.452 558.019 476.769 558.917 474.185 cv
560.55 469.489 564.841 465.736 569.669 464.631 cv
cp
f
582.507 452.437 mo
582.547 452.489 582.629 452.422 582.596 452.369 cv
579.303 447.023 575.691 441.907 571.783 436.994 cv
568.09 432.351 564.878 426.991 566.605 420.907 cv
567.564 417.527 562.59 416.279 561.422 419.478 cv
558.97 426.202 563.852 432.188 568.276 436.596 cv
573.312 441.614 578.107 446.849 582.507 452.437 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (Yulia) ()
%%Title: (elements.eps)
%%CreationDate: 4/5/2015 1:37 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj28(ej')F^9=TP6QAp%#W3-C8d9kq-j%ZrL89>j87I>Aj*C1pm*GO1[<GW).HTgf,ilm]+PF/X2,AR#e_FE74_W@bXlEmf
%?ctGkbUr[oTCY3%[qM1Zr86;bZc6n4)sZK$kiCh73s_g`JY%/EE#`sQ[qgW&W7Bei[VJaD=)'\Kh;31ToX!8oD-)e_8i?>dC,Xgr
%jbh;tm?GU)2Vj!XUD[(ch6Ui\7h]s=IDCKmoOnq5JC!$=+)INGdpCPm'1=Z9]$Kb]'[o]Q/,qR.l*G;rT*a<!^15PtL]4lWIG^:(
%/q+4Vrpg'<'K/*WFt`,[]@DA*h4fUhF!giE:D\*6kbpOUp'%$mdYg<_+65,pUYMm[>'`<R,9T\ZcVXY`2`$7/oRDcGr_L+2r.NBs
%cH\GUcH]0&CKT#9(u_uHfhqpr$O`V=Sq.#epS5&iZeCHS:Q<#V>EhA:0=it0LHCs%R4"dGrP6O%?Hrqq]Fj3u2]i7(CE`f,T8i'<
%jkR2@>*$7Pd=lIfYOQO?BOD\P;9c_*B%27XC@m?t*k-j?L[B7JC=9E0n4L%0>YcNb^K$?nCA0^QPK^J)"0c2o[E?\/fiIcY"G&D[
%,-O%)CVTh6!F9eP01XG$[Wuc9,a$Z*Ee/ImI<n?ka'_'4&'jO'GeWH$NZ5+^cll;@SeBh<DPNfEX`*;&q8G/QK@E\qIh\9'FMAp*
%1u+sN:teZYJ<AaG;et`l%*f>eeHUhA"oJJJbS;@SVd/UjWSMUtK@oau>k)GklHrUarn02YHQIWk+b#bM]%+7Zf=#\L[W0j+j_CX/
%_e#4uTpt6(S*-K7kFnC.<@W=C0LVNe7%]S?naJ5#[kL3/I)9fD/!\J`<5R![$!0_FoVkf/[8QNW*aYh=6_tuZ"D@g=+HeVD.Yd6S
%[S=[0#MjnHI\RkOdb)]"+GJ_:"/PFUES'95_8$GnnI8%J2l73saj`Q_^DV6C5VqoHW^9X8!8W/DI\T]8Ji:k"#$r]0ZkQEs[gX#<
%"T\X2TTf$dGg._o7K/u"E5ZZg-&`P^jdKWu5+ij6e=7<&aC*q^htRBY71Sfk!KST*7Q97]hni&!(EoqHJ2O_c0^r8/2!Y94Tfosn
%nMG(cHU315(XQ](R9R!l]'+Y-!sH#j!^Rk[R*0(!Lu7DCZ47k./i"9Yd0Bs*E%U0TPD"=hL.JlkB.YrDmML0\)%d4X,au2/I=Y1-
%0.RG#(jO:BNLt`^DL-`!?7(d"nkT9>MCOc@]GCXk'G^TpU7>o3N1o36HP8Qk`(KYe,[K_$,)JEEOX@4+$+Ddo'5dds9hlb$O@4`%
%6.RR0`%oh!%K;-tb#FhpT4Q-@jKJK&*;Q3(Q%(XGFepP_/,t!(^*eEl?P(<Q+Ga)0eA"=9/gZ#/?a2$:PJ?[LL6p*3Pl-erlg++)
%q()K(pn+k`i$!OWJ*"<A-@^TAjcgao;DnoJ8g3[s^?:h5AKTf'^J*NW:=1Mb[1H/]+RQ>nHS4*CCKc2'U^J=V03^V78-<*i^AB4f
%k#X%Big8&!#RZ.EitM2l[_U8tju.LB;M!Qg$F^l-K!)7Fb65QB'X7Y@=X%.*!1*[.Fa%Ck%.KODpa*^#^uN""iHp9/=#YO9iW"9C
%J-iHOCD&4T&r)0"%6Sq:G;\/*!&FV.<HnsCE5a:^!*A5C:Zi!U9R2"NUWJLg0`WemJ4?ES8qfO*754989KE0P6'B%e(uo<B.SMJk
%A>p`K!YLGi!\D34#)NUR/-OMN%0J9jL7-tO.F\P:5YD%B1Z_mUJ-cG\\E+)<=GQm^GWeC=Ehs:m1Bh%&\/9Hh#Y8E(&TYk7.a(Y?
%`<,Ap8ZaUEf.<-R:/O_uMR7qFJrYR!hh:GBm:DD7()NDWOpLm3Xbn`[]QV@GUSJ2A.J"7h$u2Q!)2?E1"BmLC)97!nX;Y.r&/eDJ
%e2IiF&h4F=0^oKa!E-"E.iim@%u1@djY6p$2_2+c$Q<!55$$Tp$6lp/OF_%M.glb>"LP0VN"c+D%1fG6O^NWo2bCTTO\LLt:>!PO
%6H2_OP@P?6YlYKA*'&n1C.]<r-n`=@AenoD!M,PIQuQ;m!AY*=5q3>'9VeKtoG/?R9!rsH3gtT6qQ6PZA'Qniod?SU@Wnu-Ducr:
%H(bXY3L5;l/-IlZE%t?<P_Ml,fdAJpb.sY6itW9ZKnOGTOtBJ:b4fF-f.%N"D)nLn=A$<J\8,j^h$/tH.V)l>$dA'+9Ec7dei;qg
%:;SD*@Ofs#/Zg=h!:J'#[_J14=%)'O+"/9LA@fW;O4R;+772J\=WgWL,])c\@G"8`VO.LKF+=NaZt7j@V+"H'/$-P9<(JFTNF=ZC
%@VDFdArGlhf.c^h:M_"3Lk,OjK\kF681uBK2WbF\bf[`"Q%TsBB]'%mVkaJhOG-qSI2ADI`NZXF((:?IXK#tY]u6aN^6$W.#<3(h
%=!Jni/Z-#oHQeGU)/Gat%PU?f1Ik,-m%hfkFmVl<6>6I:Lg_-:SdePh3/*OW.;"lUOY*'*$kl4N-jJQ!PV0LC89d/r/qlhf$jS#n
%',.)d<Z0g<F+QNI\+#]FU#;iAoNSLKl:'blQ.TIk;*ZIe#27Z9`8B.2lX0jY(dl>%VXe*:jpQth32.sc_if%PR$&b&C`T$"YY/"k
%KS9Fc!N^[h6qNaY7ohBL9Q-aEb4DQFbP/AQ.?X1cK8-(W8`]E'P,O3qdkDT,6MLq"<l'X2M)%IALo3"]$]0Sb?;Hed>biV@/\K]\
%*uJds,12Y>V5]JUNi[KFMPdC57M/Rn2AF/1>S0>;9&uZs/Mp3^/07bP.h7>Db/6)VD!=<7PZu\((2I[2'q8]3),=-#`adX`%+N,t
%2dtuR6H9U.>bqM\f[jg%UhlTDMZq*6A"<*IATM/1?qUPL;jm'*cSD[e3l>A-Cin2K?EA\H67cMRP==baMuV6gePRpJ<O#5F.`_&l
%/dTV4\eZ5A@25)A"=OU#Z%+$<3X1f4<G[lmA?cqZF/<>;K"uu8UT_ggYaEiujg,Zp,&nU1LI*9095rH_&H?0]O!>I$*(1B]-A@85
%'-NT6M5M4_9*Z##@<E7DL&f1/[L$CS)$*oFA-d@X&>oV>ahVJ0'8$_H&iF]&W>Mh?>_E+jZck3a[4_>-Or=d.aZB]m`2&8lEf1i\
%(%.!WEAFC8>FbhO)pqN)&n<Zc$G[iuP,8`/'"aLo^\jl_$r:"F_(TXT-&,C8Yc4rHc]JOAT2g0,BGfKi5f,2i!\b=[at30ab1DKe
%MIQ)1AaN2;EtbaOEt)QY[k=ARi#c/B+Q3,PS13A%'[k.Ta=<RGPWE)_R271.Y,0(.\qU\bdfq%R]$\f^Z\uC\m"r-QS[.1W!_,O)
%!_>U'gQURr`(q6Rp*Ng;o3Pmu,jNB+V2@$nEe,6=):]iA=!<ZsOHG_p[#du%X2DZn(J.$a]d1$;i76#ZV*RjL+fN2((XHq5'QY`2
%lS;[-AtF1fbTXql0MbB=6oOmsW@MtX\;q=u9JIK$.8pJJT!i2cM67QVn=NdG1t<6hYokdhVP^>QieRfQc54TaPa+.kLUBGVXf&3X
%4F\hG-ro7,\1GosHUANp9)9'+9Z7SA_h&g5k6o#(Agl>*I[#aiEO2WcpjsAZAB$JA;eM:NAVhF==ZIp>$eM/\%kT;]<_>%\]i4(I
%:Vst(68@#i&dRT[2I:K*4@(D&NF]=ST%B>rde#sK&<""n+rp.E.6!slAmMMpV-<%rL?eV(.TL,GRI<JB,V50F0h$B0k.RPj=&Lk_
%b)?%qRY_6q9.,*<::u61dA>"Y3$"+K8K+8@"u)u:L<7D'.sBAV;0)'a'^&W]fF4&Qd'LYIkr_FL5q)uM(/:C?<7u#Z"#JS\"Jpc8
%d(st::g:;0ChaTWaN?OM&LT$0MXR4@!/;,>:3\e%0.RQ3;<a.7TX$,J?0H$.,nUTW#(QcdjB>A$8>brNM9;2H'T$>1\;K5qlOT5u
%KLd'iY3:,eBAU6O[]0N_.kt4I&Pa-.Qn(4t'ZJGL)f=9gg6<)pA&G,N(!8gXLS(MuNhW2Z/7SiHE>#i2Yo0Rg.XpZi?X#h<.jSuZ
%HAJ.B*Cr4A?`GO#&WJaT<Dhbu8t:ni`ee[H?.72RTV<E*&r<$6>u[UmY[LI-EHTRh/*gs8qQspgWfW.YW?PqC$=-p)5i1VA[/ppZ
%'\b)ug=:eN.qXJ<l[l;@f--k`K4Cp+\mELS)e+c&$-3m<rL49oKd5R^-2U>8M5@F'hGa_d>'Ub#8f/]cYp:472(MZYOe>gO'%[UR
%gPU8#'d],>U^O,5MF8)pZ/rgeb+K+"n.$qZd.K@]]D1uNql4,e8\?5%d"XS0E98EX;6Qor&qpVN*/X\.bto;p-[:MOaj,QQ4X\+H
%@[U3!`0>4Ca<iC>&gtsY*KZ.d.<?7qI8btsZ>Cb"K/>q1!)0MU0c/j7.:cB[?W&#5R.eL@q,,,_T$iT2N1@gQWnbW!_:H&#lkokD
%Z#N[#8U.!titUab8Wqj8#Y=&F6H"PE'%cF,9dqUq>Z(b[:-??@%N.p^)DHgoCad7XYOkG-;j4W2':59"-AcM,BG5<Z`("lJb*g37
%;S=p11"Y(oY`P8N$<*bLN^<IUWDLIoQq>pE`t^eeh,M";3k\/N`*,$^XXt8`.sn/qK_8I-i\[hi[;^!+Pd?6g3Ou<A63]WQ")0Qe
%,?mkG.=ib<$K0mIfN"CKi_(i"\GC$"*3f7;,ftqdUfB;jkHINuCW,csjRORk.O>1\'NI.BXq#^9p6dd9.:I5iCe9/!Ku&S'IVNqT
%r^5E"M(PP)Y)9M:Fr\5`.'uqr32tdDHr(A(gNJb+-#/Zl[o=-BpEt&$BZKPES8=Z)#JXFH30Q(=>,&]hYG4Tja-M+p(Q61'_o:O.
%P:2TOlUn2Lj(fN6gSdE$JgPi?@_u]=,c^KHgT"1W04$(;;\^<H-'<p#/d>-PXLs.gpAoAP_;\]lnCN=o!VoQ\mDjRVY)`"7]kP1A
%,]$IXV(V)5W*[FX;S`tOe5ibJO16<E$h0g:g3Y5,i$T(Lj\=NrN"MIb:E5Mp8EE1HP6:rcP4JG,5tRB#6Xm1h3gNL99Vhce8rU;e
%V'%<<0;H&Ca*C<<-*.^hlf"_$/-'h039;3gSPSs6FIj(G0%AI\Ouf"*D:#<mAK;3$L4\PY.F)4A^nR"=,d'iNp%4NV="hP:Klg_q
%;DM3mJa925Os'j7;A'PA*2e@%1.e(3o/,=uPka(a%Q_lnFkK7eJrhc[r=e9iqfGk"Z:GGVA8i:,P^uk+#a_CKWbHr8P:ELb:MH7F
%##c](lYp,$5inMNj"2"9-mQO-U:.MQH9H8A.UDZR'""X_Kh?r\36+@u2^r:doK\k@I=3(JWuX]/j!M09`MSe.S)ctpk)Mok29nlq
%$?Y)lb,ouo`a&4oUeDMY7M<n?ZW:A69U?``/`m-[]!??b(V#Pf1m;#_g%d8!4V9+E`*4/a5H.EA1fHhf?6rUTJ[d,ZV,iX-"hN&m
%C&XIoLm"[r9cZmmku(EW#nudMW8K<`(r?HYOZ4GX!](FGUm*oF@`CWhnM"&kV,!OP`B_IJ.S>4V@kU9`\:t9L97_t%a,I#nl&.*.
%g5A\USk\S\=ZUq'Q+XIg3Thm9U_p&J,A$ngQup5g@+jL7E7>U;<&Ff*?+#O.7]3c%s/IdgB[WN`-sG'8<%=5s)("*I+)5P'-"^'b
%:6`8aE7Y\3iZNumOdHW?LH&">ZoF,q=TTsuM9T$-&oT^Ril%YFM-``kBfL-V[8!f6Gs>/+!F@NDV(Qb6aDmb)aS/RMR[N4E$Edpc
%,";o@e/#K3=3`SCI]"XukmcEGI'S[VilT]leqVne74BYqKj:$8dp<EC[#1HR'NfC2`+5eh.1QKEdhYJG<Ipr^`eg)@=,FhD0DVcR
%'fALG!12]D;Udr_GXWVh&2Hi>/fP-1O9jIo6t*Jj<mi<bjfF%R93TsBMdo9tWE:9$<j!7f=!p500(bWFbV0["P)aqOXJ)P4)-=u7
%]K1gqY."7J!EA>eEb&+OQ=>j&IM5ZU^(*Q-3X]*_eV;\Pl%#t9lW9n#(/*ACT21=uP]%t@Lb120B;-qKd7p/81%e;Gat(t2_]S`N
%P@TBAPT5Q/S_#/OM)lrKQ0jC';T^EgkNQt@?\9el:YKn4OcOU4hGNk)l)^`n`'K5T^H>f\&l10jX)/9I*jM,BYt^]c5<_8u*j.G?
%;^%$3Paj<;f:gJtX=JeDTpp(bW\UXI/Fhpriab^F>T"1Af[c0U``/g3S\EI5]uZe`]XfL-)q=F#qH.?MSl(oo\-Sf3-9`]Nb_t<]
%(7E_mVj_%7dP0OQ;?QQj?BG>4c:Z753lt1V/r3%^lY2Vb<>=T2+7\#N0oIBF=2_P3Uqi=SD&$dX"NnVS>bg<A\:,]291^CK*/P(>
%P$MH%N_ENdJYXV.;q]P#@s1n;Mc;R%0N$GT!\l.a,Ek/7<5[0TPMCCI5]<kt),-cQ$&c1H=+qG#5:rGFZNReCH;oPEZ@-?(H)23;
%Q*Jad0(2*k(dh;5eR"%RLFltdeTiAc2U!jN43IaE95ccnqP^4HdZ6='F;62a.4k+(50%;`9mu<$,17VinV<Y"N9^PFk`BJe(b&<#
%D6g:R4:iHH?&MT,#dpY*XGqM^FXfR#abVk$l,%TVTZR"@ej;=HJp7f0:,"_lB`"Ab9;[SCb(Q^ZP'1CDGXQ:djIFk&Fd<S&<r7-p
%A4R-,Wm?S7#e^m1+\*u'AsX@]K&5-/M9<?^U<2(K54>A/m--=f>"mIYS#8%BOZH:eRlDmO>\W`X#+r(>[Q]Qu2F>NuCsB!p.k,aD
%FI?E45(TD,Oh<@(PL?g=_/Ck_EL:!+nqU2cc:@_o]uWf3O\;&/'aK*r9`r'6=AjZjnE_M4g='3k\P4l&*3p.ET>Wk];Ah<`l79t:
%+"d#qJgggRpdr._0jB.kEu3QJ-?uPZ7;UMjES!f"=9ql*R=HnLl`aT&D,i;1VFVhnWBFo@&>!'^UINpEdDF*,Uc'k4M_=I>[T_)M
%lLZ<0;(;&$EX.68ga.)>.c-sYo`hg?V2;QpA'Hc8EFWo/B@,S5K\8re9+Lj1EPfs$974_s-"2Z&'^gi)VG^&F&,Pq.n2P$IT/p]S
%X6mQaE9d4!qq:b+X<q^+cj/$bMe"c>cDg*/OF1ZSqj+6bauom]6#%5#ki<qEU(V(7$N"Gps*QgbW"0,J7VT]gWhXa24iOYuTfSnc
%mmSS8E4ROdV@Emr^Cl4#SWq(D.Aq)22H9$gW`#Z-R]i"ikH-XC@c5Kj?W"G=;VY=ZnE,TGH[T2nnT;"+"K$m_?DnT@D4_$d&,Tp\
%ejuFg9M@enD.kWR]b3o,(TWK+9e<q@C8u\a,sE4r5\orU&1QJa&sC="@mQA%itTbf,oPCFoZLEWLIrZJmBds0kamG5l+.4"']HZ<
%q6=dHlg!\u1Yrd6]PSNIE7+V^KiYmPUPj#QGUh.,P\F0D^$Z[I:X'er1[+I<TCii^`+O,gq!<Qhk<r94Tt@?TVi!,'BKg?XW@Zq.
%)782=+Etb<mM5l3Go4JnRl]IM#D3UsWUN/2'4dPh\gp:$e@n(#U(YV)9)T?oUGe>PGqpq-Ubjh!O][%h?6#3pC>a'hlR/T+ib_qk
%]q65rH%W9LWb<lrD^J=brCoAY\5oT2QYe!'QC(M9SoeYC*Li:=A!a-r>?l8Bhr^U+-Bcfhgm+l1AR)J")i[fN=B9R-GhYsSgBc!a
%*jN5&W:r<SGlKRb\(L4_Z5ea&$+N#fCe@r2i<TM$TZZK'_VBI<Noq@[O/;OfSjJ"+)p#>rG.R'QqcI,u^@8PDW'BMD+cga'L4bh0
%)UN0V!=ODThb1Kq*:,KeFE+)1*cs;E8*rP?Dn]%d+%EfM;6AaD2Z=`IF0?(ge!C<Mq9QK\IC;<!ZgH,#B?H9N8=SpB4'd%^>gLLq
%a&a)$A>"SD0"&=>a7j<9GeJL4d<RDI\4X*]NH0')`q!402p:u:FO]`M,nk[7%85U[>eZ?9k*eQR;+T&@c_f%\j#]8hCVBCRe80?5
%^.b""J=U;[<UJrD_V\Vu2@V"mqR5BSMF5+M'+Wq."u/VW(>YjQ!D(^iT*aYYgZoE;)LlMMa7,/VOLgZfWNAYU_A(d+mIpQpG>IJh
%Aj*.@O4_Q0l/$.(YFV2U<jhptM0GuuP?b@1[HbH?cV)`RJ]pLZF`m`=9S>VT=Xa_dV/!?i3:9g/-]M<4fH'TZEr56Io,dt\9$*<`
%.m%;\*+]mB18^?t-'\2a)MuE/N*R?."rGWuj?Prp[U-@p(&oDRQCZY^:Ldo@cm,bDFSc-ds!fMgW..kAPW/+aj[C_OPUDup0hSZj
%lh(HBg++`L[=.cJWfj@:C)gh@5'oN?%bo5tmu1sl.f,rH'U-L-@KA':*)$VYALdPtEgo_@&>g(N-6Fk-\Ki0R=Y8k=_E4dB2;jD6
%ei.?gB^]T;+(b#oHSq\DH2a::R8Q$7G@0ij9,:[WTK!i',qLNTnho'c+:MGsP/"roM$F\LHdl`Z$-'YEUE<&uBb#dYkSQa>-JW`A
%:.@5^hi>ND-JhB<E"=?H:.N!UM^.7jdu]K7D`9'Kki3P!9C_3#14=Ma^%J[:O8*e,;8`"XWnj9l0!43ss)ln/dD\PK=1<0/kXQ=;
%/5XAR[p)#QVfpL%f"4e;HW[hTbuR'>LgU+QLc=SX]P/4(%rt<i1hl9#\C7)#k!8V9X&8>X>g]ZR4d01TJEjTtdE%hGNT64O#&JD%
%EM:kD]IENHajIU=Z(UVc"#D&Ze9bG&Ams@mR&?)Bf4:ZG1BRtKa+luio7-lT6cU'R0cf;i*0"*rScL]j>0)H6Um]='TR/YkS>d9`
%VM0sI8W@ucYoqP2n+@V6M2b!&a8PM'dk'WlW;"qd0lORs&Nd)fU.RB@0d*o:dEH\1a+YL$EAV^lW&JC%EH&ML\BqKMj3ej9]rLb+
%IqB>/FQ\V&jsn0klMr$oL84]E7O&*2p#I2&B2I+uKk.e/FfUbhARJ3[F^1ZLf,f$Ld>$/*1AJ5Wn/q48X\#u)NRh)Z2N3DKG'tgI
%cT:G7kB%TkjYoKAiUCL\QHITPDIo-e9cPppb\ia"bqcniR@Q.Wm#JYW$5]0bgPt&@\%<6_?&!C</@Ct#e1QArRAG)5e8CT+rMPrh
%QJ2<+VKVtYl%<d4Yhu#]Ze\;],h7+OiV9sI$B@=+?lc2JF$lM^0\,[tI7Qu&\a`Xkfa\H]7;)!P1IU`Nran&;BoYtSWm/;Y5Hb^^
%iD?acm:M:\V<?Ljp'g.)7`UoZZg'J%<-k*IUQn-pC=Qo*0C$`2;:9Sl8=;JZ`A2J29>?H+rN+@YqR_@RqMiL[5@uXb]&WRKj".:4
%enTiD!T!pH!Mso$Z*>s?Ian[+U3Z/a/j)UKnhcF"atFY-d;0`h5;!@a`9aGM\iLTJZL=?_g+R)J>H7/%:a6O?eLX39WqCZ?kP2B&
%/ab[N'W0T!S7Su1':A1a=UK`QEqF!shq=Ku&t&)NhP@p5m$q%Q+QYh(?E*'GZ1sXpSUW[Nq-EZONU!1gCK+NWX0J+0)_cCL^Pq_@
%l!",1L!*i&pl,HPRP+9H)I-jOrh_ij3JG[KZN;":Br>&"g8(-f:1MIh1>lPQ_82^Z*3q!hkns(UM_&.fk7A-cpi*0T)uYu,W1V'$
%hC.jfCI\)RGfe0lrf-K2)/R.hXHU;R)\Kj+gL&@AEUn35l5iG<ju@R("cCtSnn\h^[YOcVmic>R&SJP-*/hsU%sbU=r-(uR%WXEo
%!UE5B+g\#a0!]&iA@/qSIH0"pnNVTFCu9KGD`lc5T'[KCp5T*_'%-oX1YXj[S=L"LQotd@Ze4B5hW#6ST2DrJrbF?*:#$pd*>WGX
%Au<`Nq#Ou``&!eK62-2*DH=I\G9:&!RNYdM*$#K7;5rBGCpfPIjBWTWiO3[Q4d)Q&'KN#6(sOO@EB6"YONf7cZO5B^J]GoQ2i:ch
%AF?3-9'[G:m?KmTm:OjTksk?2G.62:Eg(9>3h)YfR6)FcZV3[QXF<(.TD`Dqs6nObbTOe-8G1l"ZU(J/DoFl[-"^HfFJ:+1b?,3I
%oc8+AVVL+RD_'S;_\R\K+Im+].?f-(`L^P+.B]b>dooqCP2ZRM&O_1YpUAt,0Y()Z0OOi]LB?m;Q*6*5`eIk*hkHhCL!nhs+g]&/
%XRPd":mr,*-G/cAat-G8;,nI9^W[$<Zbjnen1lN,bR-#j=lJIlZLBV5gG_:YHmY_@[&4P.)dPau\qa;`;Ggo_9.\P82stT;)3**#
%boTu<V8rDIMC^_\q?&7Ri%XC+XN9tZNS+Ca`p-L"k5k#(:CL"4Ir%%>44V?9p%FepS7&*Sl-=;B1oJH7NjGWD9sA]_DLa+k0E,E-
%Ht.QalmY]Yob=<2i9T_9:9u<-NGYT2SYd49AjU,'Jldri6p+ajd@>ei]OjOj7_Ig4qJ<d8HI/!+&-'K[_-E$R3fZ<P$r6qG/GY2O
%K=U9P@K'8pf)O);NYu/,H%R2b0g,]Kfjc]7!Tj2a6/ITNlpV+/:s\,2l=9Gk=`DIAQg8.'bYrO\6MouF(\OI2h5Hobj8?oa/jXB$
%N7Y,rn<n+!Fjt6:lZ/M;q64#(SZ_%LWSOQ))Z?;O7Qsauo/#-L9@@``EgQ=Gm#BDfN;20B26&q2DPS%Bh=7hQOu85:oEOY*9QbI(
%4/pfcJ!HnS[b^:k"4R'>^V<N!h-k>6D`jZCqp&i8oXb-qGP4SBW@`@aFp?,F]3/n82bT.hr@G]6I%$G7V5E3k40uH[B#Zu4&fFC-
%o6,TAEATWGGrs^Lqd4a+c7CBT)*uY$-Mka`RGC.mM'`)Q*TWDh_4TOL5-^D])K(_-h*F4B2p'>4+J3$P3Gf"+B6TH`SDtk3j[jZV
%ZTH5U_`?$1+J3')34jfjjr86ADnLoAjT"SJ@WpQH-Y%Yn:@_!:bjVfj2hrKi'oEqZ&P(YlX^>qZCcAZ\>;C)l>f>+KKF7$uqtsKA
%YM\QqY1dV0\p">Vp)D7M&*P,#4YGgd7Y\Ur_eLj)FJBq1W)_#]j5IQJj2,Y_coi@*$&/k72-#D6>(a._A5iKO,_kR/@s0.C))g06
%r2`N>AU)SANNhARc;=OHp*jksNU;^N@EG^?MhuX])`5-Mc&o@PS_5mTh<jNMD6hF)F?ehr>,&agIn/9RFm-h0,@`GqfK/O5a]P'f
%Ve#_>.aqMHH1bOU+*O1.ItJgu0m.-pIN_OW9&7#YRj?WY!)c?!VU$+7lpCnf50GN=2_gj%26!'igQ4lP_qfu)9oEn:5Wqhj#dX1'
%.-ahOh(dJF-B5qAl<tIrhMCHmQ-2u.B8#/S/O'a<*j[`'$sL'p)ehd=8]^IOcH&_lQu1'cCtrK3:;8M6NqI>sV`;3JH,!R#oo?>j
%JRJUkId0NI^D<\@I+7u8pOM%T_M;MVhFMrnqRDJGI,qEVCsFf+s&<<;7kB/9&^0&7_,S*1l$q^s4oAJ#doW`*ER\3"n4K&V+n)d&
%r,)j;rmq)-=4YV+r;P`#b%96[\Y07WCVORn@4Dfa:+V0th<]?\ZhC"/$pH]@X((sII_Ig;F5ghO?0s2'X$,E2nYk2+bJFeX2D.\'
%c+g8CYHeAMB!>Y0B!d3=F'L+N)m-'-iG"RbC9tA)cB9HL\rJG`BOrjueQQg/2J?-t<%*J^NsdNuKBUjlm#XlDEM8L@r^jFfYPs[s
%(sT&=ro:l$dAf],NE2o(pi`E-<:-#.YqFRN>c85?c"`O`3NDauUYiT0*=m-Am[>m"pcW2MC9)??aWUMq6Hi0=;/>H?;DNsVPFcst
%`of,6S5"`@l#a;*E)G$"X/,:G94?5W5MMbUYEO-7]StR1%\>9@RDt:t*+ZS@@bMLBs2#4Yj&ENq5)MAL\_jK0)+k%\Y&bIO0[mS#
%c<[Pn:aP!1?1SKX89<ThpTAh`i;\mrAKX:J>&OhTeB2pSEQ,ff`\g2WS!p2O`eWW8olN[8gGrt,gW(1Tb%?t.+1HXSbjo<f_9DJp
%/Dn\B9to^F*FiuoJGdrrB6s67l8L?#c\BY8PjPkGEQ<'mZY3o9-d2*B`q['(Ce/(soJ=L>4q\r6>i8e+[*VUh"g5cQ^4.9e$%9X6
%%^I'MS+9rqp@tVVYSiVk"e@U>L5R"#Q[G)(2GO$HVl&FH;cE8dg>k9]e#2Ljp`WSRDkC@]plarLs(Ac!5YJk3akZ6Jee;m5n:m(Y
%l`@E`h<]:82^@:SN0F7#VU<.7&EVeZ9Usp4=A4&;De<KKp&`#h@uQt%A+nL=fqHL%kt*6d-CDe3<mTW'4`M6Fp-R%=%eaGn0RFu+
%n&JjO?cY6EDl`j@:I"B`EV;lIOj<JD-GdGpl+Jgl5A"in]YXO@X\d6e"3hl#oulMYAk+`(OX7nNS[5(0@uifd7l;XA^X%pTb`6H9
%Q2lC-?Ee-=c[O3@lu#R%0PR&FelsM6\_>QpC=@=oL-8Q2DZ"G6d>OlkJS>dI6mW3R2rY=4iJPYAfr&!@<1R#G`h)M?.N/s<$3sL+
%dE$pWXJ.GS3U]\kq,p-r<md9kcHIaVZ\lasWG!-t<7/d?bcINn;&,'>GiH`m4E&,8&,*rJ2GEr5g.@"9oAl<E^-?r_iW%0s7m/%Z
%rI,G%23JmJjC<LG`DjSebF%/<@R1]X:MMhf-%s&)?EA.dd'NHr9\,19fed@$.m:3t/'RRt=hZi<pLa6XUnBDQq-Jg.H.ql'.=@QT
%P\5@]%Tgsh^.Clj1,*I/nBDT[=i**jpgsii0BPgf1aROuosjhtNJ)4i)GVhr'"f0Go==ESIH5\KlT"2%1;;*&aIY?^)%LZ4hR,0=
%LDrt2;=*1^-?E()q5<W#mtsM_n]aQ[1H%%!^Hl!Lh0;Xm&LpFV?tR(N443a9g]oVE<MmYB$,Om6mkJ?3^IuC]n>fWfE#UBmA50Y<
%:\e=)L2cpBmKFYDM=b_DOj7pki:$"8:+V$8MW;8+gR/ps>NfXH-e=YlL,BE(-^/.9rY)sU1PjS@Z+sM(q%[[&Sun"]Rl.%+C9&(,
%pS)8!b>pF13+Q:hm:P!JqfVfh%N2U^.5uRDB!iDF7BQQ4[<!Quc<6F0bHS=",;L8aVuOqGph1.c*/uY%bS%hXNY?7A-f3BcW2\Sm
%+-ckpRhASbn-7V6l\rbmgUAa&`k7-=r5p9p'<h'Ho')X=os:,!k)[)No^<32e"]C=RI,N,F*nD@^s@Hk92*hV*tB14hbgk2QA$.1
%D-V<bRt"Ff?58G/>Dms<S'bJ3c`mYS):1C&N\_PmeSe]k1`NQqRc0BN[;*%Vh9PSEVGu/e+k:>:10ChsXYr-X>]]lhNE!L\fW86\
%Z)_M_5c+)k(E+0C[PX?Ci\)2Kd>T"35;"4n&_@gSi)d*@qMd]qTb_hmCM$F\29ms+c,/q$?j[sr\i:-pA=\I=.(*bMM38%1Ro6tf
%SOAmAqJ7M#RWMi-nrkJ#r#E#r1`]">1[JQ*\?dSd3-8)(cOE*sOs.3F+_OZL_Wta\N6+;B;OaPi-s;Y"SOJs;7JUkHS(Ur/$-RH\
%*'fq;ZRD4mil&I_Bf_08"dthm;:!O^>_oI/i[d\K)4PlQT;JqC=cg0C>5qCddbMbs248^b$edI5?Jb#bB4X-_2<2X"HT9!h@Dm)<
%@[n!'ePcqQ;.d6eO07WcR/+'i'E-?rN]6+R5>h/ie\.rCrgD=R7/knMB4cndmhr\FY?IQA6^N?,1IF)WF>H9SL2O/uBc76BXa4gQ
%\BRIk_97";LM#f"7#Qu']neK5kpq8]hocL:$fp#:F$RKInPbBTX6T)i-s,aFH7-8jC9)YS-M:BJ:,%^>R$4SIC9uSQ(1C'GpY5)t
%')`m$:+j)ioH9K%!"fj]i;<f/Y(.$">Ql:R@5Gc@Ei*:7&,rnGF5ies5Eor;DL\kiZPiF,)d]o*J$o%j<+>jUBA`>GqlZ:_m!CX=
%E:AR1kd*bq*.pGeoL"+VmgI5RNbGb*m5<0Mbp]1+aM#GD^!20/hH/+19>C%(k^/VfUCY(SaTjnHI@!.mG3HL\I5#NqEm\?"VX&5[
%jZ6i<I0%faC?kOXna/>bqG(mW&J9*=\PHRk>l>2E\-kHoQ0SS2:6im$=\fER#Vr7_17GL1eRm>"7tTOA+g<,1==,7+H@a<_%*KhQ
%k!R&Y*!IdICRILb`tI)e6qcF%^RD<c96:>hn,FsZaZAXHs4aMY7e?H%^7i.P++<Y/e@kl'.qEhHQe=MJ*TpIrT"a/l@`'l^-C!Np
%+f;N^^j#R+',i!\72--Wf5cLooR^/sI2mpNNQ8bs.mE[>X7=tn$n+(0G7hSif:?BffU.*%VCPl1?N37:O,Gb?'E*[n9I?2]meo70
%Cc=*!s-GY"k?>&m6(q=sf*9m2/m%p<]X`Y@h#R,ef:amK)H&<,-'tfY\^WW_])SmHrh3>pEmA_2f7l2)#P7[n]n8PMh;6;q^kOo1
%_T4,^L8Hp-ou<1Fe#cs+YM$(L7O)siL.$5kQj<g*)uL2$d2S1sQXj\]l=[Y)MBPT9s!NN[mh=g:piZ!I)^u]U_[OSp!Cdi"O'N<G
%h'aiSRGBEempl\dn>m(FrV"nIR(qN.U<C5"_I!"6d_kF7qVTYh^!X=Gr3tXQ/lh<[rA=WHI02$GYM#jKNu@[D,Ib$!<L_TJSEZSI
%$q'U:X9l\dG4N*/\0KDEp(f67,kW4\nK[7Vk1n%qD6j(m+LF](BATjA59>O1aD)tfnT.%d,+DMI\$*^4Yhc5P@OjM)^Zm^44K!g_
%\N"8364()_;A//Z^.h'J5q[%!i&HYkeN*k:rr=b3hZi4<>uaKPa]ti)2oR,BfSlOcAFXMOE\gPM'fJcB(RJY\FrGIC>Lh<pTR%U>
%G1rKQ7u_I>a%?Pi\SAU'fWKD`\JbtEk,d?X2i<_>fsr'"bp0hA-;\&'&@Q#GU%M/*T3s9D?#;KGkM+:^]i/dEePKGJHeoh93c.S^
%gXDDR<9s41i.]E\@F/rUG,r<*e8>+F3klAm<c]R2g1o57gOh];W>uX0eMk]pWh$)XlS\Ir1&@ti@`$KghlX>5SSAtMf[<0I3d(IH
%FAD`e;GhT+>h=/&-FK6gouOj]G)u![Ykndm1jX"$0o$m-\;6hUo'F/P-e;a1Wj_o.p@a4p:JJFLNI"IrcR?7ErMuPpY;c=._a^u[
%f1ouXdrn]/%*in*&Zn(oWP>6.lnXR!&9.TH7I9!TqmfZT`,oKh"7Fo@mj+2*k$r-H/Q0U8OB7'`LBM,*TOEQ2Dg0Y+4FD,bYu(:;
%*,9=IgP=>ADU]O\HcacojI"N7*f7TN_Je$ZPA)[o'N:d\l8NaZB%>b7E"pt9V?+4EAIn[O]r:b.g*c0([;4;>W8-DCQ[?ia2aJO.
%2p4R:e(=>V(h2`&n1di9OFH1D=1LLdNg:I0aW('JrB$p2c,u^4e0=HAl@P7Bob(uOD":oIgHLT;^Q[(b-"^9@oq2YSc##n!7SV.H
%+=?Oe/_Z%rGfJ&6R=PJ&q"hc%M>b2d1Ru9Xh_`9#DK!ndOHfK[mnOdsP-=kD\fI%/8"eJ]C=h#=1l?`k)hph(=l:+rjI>IU,aVNF
%O8@R1C<]5'bR1?ns!"di9U&=.=i.Z!mae00-,PsPHJ.]s?e8c%7;rs*akA<G`u]9NEnXMF-,JKep\&%pYgG\9JpLM^Hb+^iq!9he
%#i05;*T\Tm4K$,!G9?H$_Lj^Ee',FEOgAfs[!,r@q+mW"'?>U8gh5BZqc]QO?*55SE"%#Y/"[@CdWRL]!r3#T;G"s,%I#/Eo_Qg[
%4Z]SQRXGsN81WBTo:ik^Q\pg+l.`20Od0^jZ:!$=O.93bP"F!C(f)WYqH_-*lD3"]=rk2"lVa<Of6!#p3+b@aWoHp]*9@(AV1:Tb
%c:H%J9sPSh>33XPQ^?"rFrW4@?J`:,#3jr<"(JccG6B>3_FUs<dIZI5RcDPkK^fl<aFE%<X+bWCJNH4o:&8Ws7t%hjFfl9Y^lT1m
%9=;*LSdSWo)IgN?PI8rINCHWd^>B)sibf`#?IK5CW#kUMa0!N/d.9D'dgf@nH0q-WZ[L>:7ThcQHX[Vk<Aa=hk/ToTS)+"q:_7\^
%QWh!i*ik?`s#N9h20Nhlc"cY<]$B,X^>3Xfa/BK;oLjNPO]+>UGQ44%CR951[!Rd0%RLppc<i5UWfu;]0o[]qnRF`Afg^/_Es/AR
%>,PO#H&]q0::4-k>$7^tI1#6!4Q1$+M.+YD-NcA.a6O:E^IW&t3Rhh=41b*($KG:jk&0/[;MoHg?]t25US"J]hK#glhW-O*CS%k$
%f>Ioh3n:h/cDWoIZI"T^;0u8,KP_D+O4"G>(R`?Q[<j(5\2qi*\Z6.Pqe<]4F\]QL%&$T,Opo#;82>9^6ZSS9*OYb>H?4c4P>7\:
%;7gtQksN5Bi%W_Rq_E'^#i-b-\MTi@;65]Fpc>;Hnu_,c)F(n,b$N-iOJRnt+`o!]di'rFe&6Xa(r=D_*-LV=<9mC?\rKtX(%m]p
%Zj=C!*gb/rY+'p/mJg685F`]>AZp12\ehXXY"i6Qp%YhGj0F]f4f2-:bBTLuPk9,e=)rQ;YDUI((D_aar+/%GS_A3%LO8Zr@mB^d
%&$?4^W(0W0`IB$YNYN;nOC\oWT*RCOZ^XTS9d^[NqF2qmjj.#)8[RoA&>rb$p+j-'mWLF#eZP**l(g*%=<]DRN;HX[XgguL9t-7!
%:@0SQVTnjY2i>/joo`sBT!rCpc)[#K1C=rI602[ZUJ=>bLWUF"Fjefug=aefj1;%!]71H+UFU?K&VkiD\pl>4ElqRE\3(sQ2K_ae
%HG3d?mRa\_nYg[OM7A"4q/pbq[AW1,"mq+`^!fH+6Km!CUdi*OH'E2"C@`VIb=MTEICMi\8".fB`SgE[4k*QDn?t8TGT3f"U0drO
%begU3)-nf%EeVbR$cKpj@GB_'Fja+XN$T1L8ug7G4&kFTd!%<u6f%GL;k>VdE??Vr0>3X>>k*29DQ*$)o7an0Q$!Z7g2_Lc9;L*5
%Wen8UM[P#*JhA_SA*RjNAm?c%<tIb\AYb-NnN9CkMn2ItEMr?1W4<RaO.o$[e,'D;i!nHPL@3Sm?#;,t]9OM6[X_8L/#.>"jMIkS
%[06,/?;-)b=\[B'2#=a1gKP7>k_2bZWch>%*+^AJh4i7%QYWFTNLgi)>l5GLc";%4q$$:]b!Z32E[@Zi;m%+]Snm@iqkj8YOD3Mj
%b*jrok+R(pYKb"-f*[B%]BJa$,PioXDpjkeU_]ALfM1HLo267a&t4prp415US#Wm,_a0?*FHSs1=7"6(cEU>%T$@oH@0CZ/<VL=s
%4CBS[Q(6(Clh_!`I7FHKq!?+1o^VmM!mF2G.P:jmYrquJ%-=IT3<BJQf6X*'a+9uFUaAtC9>3(u^4i(,@4E`^`)$]r:,0X@'le=`
%l=qdu@Q:r?8td4la0<.`C1sQN[V$n--:=S7jr7d6AuI?7ndml/,E?6;RhgV[`RPe_:B;<9c<(?W\J3G^"M&VU#)r)W'iQmhjk73'
%C2l@SbQQ1jGUapA"ngMaPp6;C'inocj.e1Drd%`hc8.:/:MHCUPHU2H1h0uLoe4q2Pb,mR`Z1"]Ng;5iq('Z8*"`TJ3U5/+NDBN5
%7e:2'V5+b#6MK4!c&`YiNnOK^T^;?n4]+nC_%c<])eZot$b)9ScP8,n9FeK)G!-8"^ec?7=O07?o=M?\@E,qU`MAg^NTs_?C+M"V
%XV'K%gnh]s+JG-u+QR1GrDuY;]3g@>/hN%$Uu3hd9"04<,4nsKH^aY*f1W-6^aQTpFY9n:egV)D*&XI.-Fk.oPhN\"3N7.(7H\]5
%2mL>%3,HX30B\dtg[/%RG!a8>^VhE)3E->iW--jMec&VBB+t`mo`-eRf0K7L$q__3/F:1rO&ga#;Z>'pQmJ,?n'+mmr!<sKVql/o
%]DmuWbf4e4"\Z%`L0l1OY][QYDpIn7]#];EGh1>6f:e^j@KJhf&hS='Ttq*k;WkSCX"UC,"Mm'>U?`0/N&]KHMMmfF@pW>be\h(b
%LL=Q&e_^NNY6XOMK2gG9%H*ePfl^J;L&MK0_kiX]?TYJJdb^do3ZQ<fI4nS^E]C67/(`n%mH\<MZD2GAk=(!IId/1i#)E,R(NI9*
%5J?B-XT3o[PiqJ,%*f>eeOD?Qdlh>*;IXk#B&EEWj^%MNqRfL3.&%rh<O68Rk=9'f]pBVC'H+'/DHHNHJ#5L.21mtOOL%h++1iO0
%I#<!IR>1??j#sRt'?IF*0R5m*"+trs?-dO&of)>HSC9L00(ls;)i:PL1md2Wb;jm=5JUCZO#pm$ilY-'TrUY:^!c%Ti0L,VDCiV(
%kNT$oT,t,KH[L=>qL7D6IIG]qENQimG-ZMN](N^VCLR3kWDUq7mWrfCXa>8XfA:=+flir>Dgf@7^"+4Rr5uUY*R'q3F2ot\jmV<k
%"lo%)b1HR/[FKt+DlrcN>,#TZ<jlmgFg(!,ipjA,>AL97Zr_!)ISq]ZoCn;!XL2(.5R[GMb1s<&EMHn?rh\h+>[/\I[C:I9c+X+u
%UF4oh6)Er'I96@']`4"X.3BGR%kjL@Xre_\DdS"j>hC^khd4!2]&3(F[FNaKQaPp]rp3L-@;\o0hl%XE1/+mo2_l'.UG)*6@WS[I
%IefpedP%0d+3bsdI(NI_R9Mo,<hJ5u-PI*=^!bNmYAO,XmmhZ0^3Qch(js)&fNZ#;&g6%4lN:<;r'(.Z[U+#^c^.CsK9b!(S:0j'
%n`@Ws7r+suD^qSsnF4QSkBB[%C:3=U4uFC`+)RRid\a9Kot-3qhj,3gT@]"G\Yo0<]8o,d$<qlOIK4p(CFd_,Cg+h_H2D0Td&Pnd
%Hh;Q0A][16r4(__9>)R^d&h/RO%u%dGfj4cH1*=^cG(Ismqec5gaFaSM94oRj8$ZJW7^`dc3/n5>B=SVc.+oEee^XhO*)miIe)nh
%nOr8QO&k/h5:p)pGJ<RZ:KhgmdM)*.*O+XhpWe-A!i_b*:EOh>8jM:b[g_lOSaGuGFnK)&et\:3/E>^+=.Y,Xcn`W"m7iAN4F0n.
%<M*=LXhTtsV1nS\17RsQg*?uRD`i@:A:;9D5<XIs-@5E2Ff#*9j]CSV$o-$$Wp&_ZW)rM7%)S>6"EXS4/p]qr\%/u*jT?hg=o5+W
%pX/kE/*rV;5:Ra,^%ej=XkpfsoFBck?@>j<GZ*0YWV$W\GAGreIER?N'`9U+ma.X'a7]2aSdo3ZM=;!HldsTr[\0&W51<4&cn6F-
%Xk/u:1iN''UF17dh?fN&1G,q^?p8m@FP]6cXED-&Dk,qVG>FW"J_TC7`5.3:O,E>olZm4TURigG-C$8$;pd?NNueho/*3X21nM>&
%oP;?Xa@&h:_tMg,IfFS"s*9*5OdbICR3K?,rql+8[-bc.rQ$o)k=IP`%AV)D^!;8YM7<A%rQnYp=H9uK"XD`H]FmRU'T'r:[8Ao.
%DR.Kg/q0idARFNAS)=1EZ3%nn@.2.hMo)Nu`U-:^k]pR'0+R<5;Z5qa>LH1>YYf4_O5D7IHi:(e+,eJ=mlWc=">)u[7'F`PVfNHP
%om.@m`\rjChmG,SHbNjH4tZCc3k#X;nBm-bnf1A)2LFhd;PVk5fQ8`pg9D^SfmK+D[1Y(K4!U<QI/kGFIe<F2a6.d!j3M8bCq;[:
%ol-[U:d6JsI=#:,C-8)ka95$-T6Z.hmIp)(g\oB3ANb;:SsEN-A?:9@.FM@+BYUo(pUoV^`:uX.?9A+*:TqQkd]A=o^A$mk(>6jN
%pC"UXcGOb=f@=ME$L^(Um`E@oiPgSc(+k`Ukdn[Jg:i(*<GCd>^,b7@*o8Ch(%-PlEXB@Cb/&^7-]A<Ki)W7GjW:#*W^Qn.:5:r-
%CA:/:WuLI!L&K_8,38'6UuLk35'lePZh\?EDdfbJC,B8KJ_Vi!fe:*bnSGJ9]'_c?X,P<n_j9rPhd2d&2P1q6nEX#IW%63,pT)Tn
%gVY=ekLkVrr-C_.rV24tn(-:r5!:ct_obp8?/4,B*o-^#k,\F'CE7?[dP>JgnJ<*S<0EC+iR_gAAh0s;)dZp`47q&3nS<j4(+\7u
%QF2?PYA'<+-$,ig<M3c=MWVd'#tlp]Q8\tNL1&cm8+R'`)1Rf\(dJ+;DsPM\\ZddfC(9bui<:sj':oY3mI:PReQ)$(bFlaOR.[AG
%%`X6bJ7u9MAbLYqCL5"ApiO8;5eiZYZ![U'f<E,mKM!sBf=24d%Bf5;9H3`Hl,'KgE_l=2jd1Q)X\dpZPP)3QHEmUiaWoeRX0bPi
%n-]6Ufath<5=sMJ/)V5)h+>1k&NGR'Q,nO*>C9F]$%VQ1$0jVR[68ah/:DkI#%%M0=:0<t%Co0C(,$oM)+pKQqe6Xir%t"<Pi,0W
%!8\aaR]JA'>XU*Yjq:6%n.R7!P,O\dL?0bY:>gr4,o50@dZHp`&i(sLW!j@8.H;D+XIsj!q^Hef0IbukNt<LKJJMEUTOK@_RKQ^N
%^C(HO@prJtc-B66!Wp5M;AC_:P9ES2<)P]+qg*pi0S%tf)D[##2d:'FbrYXP.5Nm(15Q.Q'(LXk+hQ,P-T&J.a@.Z!V?rCZ'0-j8
%N[8AG#-SQ\B%e<A$>K1Gc5N`LbW_m?c[/EfpoCh)%po%fg\_Y/QgZj0ALq>GKiVXVkkG=8^b7b34Bc1nm>Db)@\.J]D&eX*\FX#V
%J/Z(l>HJn;pE-Q?(d#2JXhT;a9Y9#t]1L(r`$6#/S58M">rdn,(lO!!8#]bA$n8r;;=s9TM#-&YA_A.W_dN9j+1E^'qt0;tc<H$#
%HGg+ad!fm-l\c-@:AMlX+&7-Mi^$PrD=,"cm.E<`efS`\bn"/udP@)qE3>tBT\TiE_C-pNIbOg!GZ?6]`'N>7&8`h27^+k2CFUIt
%=))Ys3@"=sI(0$dqs`?OEtmDB?T&9FhS&oe@!a\R]$Yj>F]F7/jV95MpmdC$Sc!&e%O.B%K$TnM?oHnlo-J][5'l&>>AEMP+t6gt
%;3K_M[VgRUQb7;<23bje9&?qJ$?B#\G[G\q.=Zhk:hkCPQ<'$kk)Ll'IqTHhSpZ0:qRcDY!*i2!3>HW(28<Cdm6A^FBUPs$d,2rt
%QoE\r+e8j`&*#^jPOe8'K;Z#lC\u44MC2ce0:b6%:g.TrH+^6R7<CjoR#l&2Grd5TaB+Q&I>Do*c^4mCWdP+@O"Crk-(l\X,R'oR
%/nREDSqt<4Wj))rq)6>qL/X?O9>f6B7>Xj@5H9)mGS6<$557Xedg,1SCmqcjCnI?oorSIk0?^BfWo%-LO5<!.X%hHD^+QG,fepEN
%-l218lFg+;!VO+(@XdG)Q\Tc7l`Iu^CG%^W=9MY@mOinpr7]`nip3-m_WJbh93%;qI$cFsI_#3];LVHo(D<-Sh_QD%Vh;l-A*_*B
%-ctc%QV4E@Vft`\T5Q;GHEqO0T]PK4Sp6WP;*<Z`7!Zl!;51_H-k^q[Sm%1nnHCMkE='NbY+IQ\\=/bWq8]Nd28?H(8u'\8IdPQe
%K0/n\O.O(frm31^qeI]852<#opZ0mZ?LXP?]oDl4im$Md[J&``R.0))r4n14GXlf5kt,g/S.8niIALMriATlmHg:nWo5JR.c2E$i
%`b2j,gFGdHSaV:22q8FX"KUk39r%9)bpJ7</]P6qI.8M!<n^&Ffjuu-(TVP%.O=B61tbX:iWqEM]Y_AQTbHf>C<X][;GBme"&1uY
%<-b^s>cEtDO4L'R+20kM39<$:$.M"9I3LQ;<_AR6>6cOEUsB;-r,-q&D>E;fe(A=#HabN-Ot(@4#VL:LZlA,'pFC$JV"aDtiMDb%
%lShYJVZ>L#5??q=h.%8Hh^Y52HK#FR+toMHX+C53BYE/)J+V)L9%>!sl%:g<GOPG8;!qY=pS5!6o^)'lD>ATk/iB-."=ZBbL[;lZ
%(I!)iGk.(T=8e*RopXX=&J%+/PbZO)/IjJI4'SdFBXZ&:p:"rf+S]lE>PmLZT&*a;0Nqi+8,MDConE,5T\usf5-<F[RLd\4;6%-P
%4EjEK28&>NQ<q9Wlu0!l)+/jZnHJD`kL[;'iLmE]]C][FnMN9M`kQkf%XGuQ4^K>+fm61DbNCgLK9_Xso;c%jI[h">O)KS_5G$H#
%j;M,Y-j5<rj1P3Sm=K't:'^Z?Ik4X_gYmd+(X0e!9e2VSp:#SIj^PK?AfNOD?ClW<Sh.YQYdVsdc&9ZBY2%>6?FM"_hds?)5Q#N(
%Ms/F+`Ng))]O**VhJ$E5>W%Gai(dZ^$U5PFbHG52PlrOGF$Z+:ZfQ2or?kL7noeGcJ*k9:!Kgs]oLb+`gV(#Vb$<JDlFl(']e$jF
%)Fof[/63^t:Z]jTmS;/TBD!oss6H4[j@P<^Q20T=\&)dM.t&-Qa5ua0GnRS&hTCbgKqn5/SM-#<grYm2:22o(0\]ISL>[J`I;jDu
%!(+E2I^o$T1VDBbJ-GiEmd='bmbC/V9h7JE]`.SN^W(uWMhL!OY9+N%c7a*#Z9K)tp[?oVP*`)9n[r)+`hm9V98lB"c.i*X.g4te
%SP#mNKu1m<c1dLo_S-sj4U'^3['78OnAF)Bd.p^),;b=uAR.8pVd=<O<TI$g(0_1DES1!;VDRT&l.YEdcF[PlA_an.Ni72K^]1t1
%I(9.;g#LE(rQB.[fF4ISikM1Dk4>4'c-sq(Paeb`dgG<@[G`4"UL$#PC2De$o\j;I9X&=;[pHqR4nu810>.'fel+tcr8M;$>X&T4
%L1$JuU]9WO33gJ4P2"khgm#t$>;9T6+2)K?B:BZ#DjCnU2WhlYDr&r9U"R$%<S__:_u#Y@02"s1b:d2'/kH%U^"utpXID`OQ0#mN
%D9^LQoAg2NQb:A(_NU]Qf5Z'pWnNuT@#^U:%u<JXG%"MEjVODq9BXf<F^_NGTsA;&%uBbX_of*:$RXuGD_NBB8;$8IUl8*%,dQCa
%kMc=@8O36&s/Y"<>FW7C@'3Jk2pViialf"7.cm5g]ujU#+Zo9J3aT.N+.YeK<G3WZSV1=^2-KGCmZ\(No5&8d1&p0pA^KPq#&<"e
%WQVl$;:Fs'(7b3[S+ZU6i>3=FF(c@kn1o:t+.3Y8`/>_?=CuKPBK\?/k;b.3MYk`c8??/4g*a'FEbZ<soWZo<;qYrNI7X4pD1k]t
%T`KUFjm(^BB-\O>)d`Z0S's['It+NiKg]>9/r(iio@7("0'?T4XJU[FM7:j74FFBk;/#%7;5UVLj=SlH.'1*^gPXkZ2oA5G:q>Sb
%<EWJ7I7^Ggd>rM:8!Wld)e#2[/?c6Ahnb!n#IfJZ,KVAdn+Lbkluqk]'gSlalR5b,r!b=Nc<dXL/$E=I'_V`LXG[[HgF[?821"?%
%MJ#HeCSsn1nni_+]K.Ne[Cj(Tg9,AM\X_hDcj7M^;JlB:rG;"/^K>E;Y5@tMI9Eb&gUpfSHZ\]hT,e.^:LCg`FuN=>'$a4:BHNPN
%J1_hcd/ie.fu"mGO`.s-=jlcpqsQ'0#+_^V%#U:.:dUaGh7:_^HpHgN^YUMjs1Yg?hQ4K3X!Z!8kN=AJiSBa3YX5[B`Y$[Gs5)li
%^%A.@mFGjbXbq)0GNt:(Ku3/2#;oWI;XM\%)s?C:^9RKJA+_V%TWk9$^\mZgiLoc/X*"V<Zf@e^+4J[13%?8mBGoBG+i^$lqMF"H
%qt]g1^!7Y%s.]P'EmW#`V3YhC>rX0koH*kP?Q\ZDKBpp1hUi?B2?aC^[G]iTh[[nT09CDmJrO(Y-R1%jgT8+rlTKKB]DU[aQQP=&
%p$:ugVL<O,B-29;P'gU,Q4I?Yb;rZ*W,Eh*@*bEE%f0NJ.r4mSrS]oZ,Xg*Q_[^tX[De>[(0oMEp_`@I?9d3u]IP)9pDSl79.\`+
%O<ZYh@^QnSesRbqZW]Ec[/-OqfNIMkDtaJ'iDQE5r@l.FEii;(/O+&&ebiEo4^.l1[(-YYcm;ES[7@gC=+Ru`(4sO'D%o`'`/$SH
%G!>d"hjuE"b(Bca[_AUmjSiW!dOK's8)8Yk4C))q<&)SCHsGu"-@<3\fWQ[C;hjF_ICn],W%>(&QcmDue#BM<hbdobjEjhXD/Xjo
%T)<hPR`G]bCd@7ErRJ%CKeLDL1u(,bG'99[jH)SbB]R(ojhpi?/udZjB,_p&3oARt`bKT!l.(n.p+iYXpm<W/@c`X%IJrL]`C*MD
%@))J69]u;VkPL@@<U\1-I>LqsbsH!eS>Y`Mp$P0Bq5kn%@cn66Vt]o*;1Y9+AT#[u^2!4)jke&<<r&]mjUi;t/hMH$b?kZS;Vp:J
%j?$]V00VQ*L-u#s*:C#^#.M>OYFaGETtTrCV/ig0G'Rc;GbY00p'![PT&j2@pnVpP>Pc"VV/pakNC*M4D[D2$?Br8^528a".lIRS
%c`:un'E!WKmFN$hDcc@FbZ17Nho'dRAPhj`k0)'mh/Un:2u@gNCPN:?A2R._gY(t@i;NbO\CI8Sq%nNtjm1p!Y[?r3-o7u((;@/3
%ZQ+[B+fZdfb!brN@:a<;bF>6`g>"X1?]Mm'KtZX&P+I["`_N'=Z*?n,%u$tJQ$XHSS`Jj3rmnaoB/r*CH/mQ3?i9E@>/.II>WQTL
%X*;JAG?ogp)4h4=1eWg4TC/mIH<C&A2XW3+f]B`S8e4Y=(X?ns1@XFF"6J)oe,FhmrePLh[W&j&mM4VUeB=-Q3PE<hR%?Mj\CZV1
%,*dU<lFEhgFfMS=\L%9t6i7k)dq5eUYI+W*D)hAEp!)'%%^/Jshk9Dt*E9""WRFD7%Wp$tUR>/'qj['<4!)Q[4:\;AUX%bXSt>HB
%qp>);In&1FB"u`-7YPmo(0J*MldT._cFqP<%W@"%(&ph<<Jk]COa!Ofl4n(/m>!^N$?H')YFLO%X[BbSMt,jIh>"_(SG=;:eRE,%
%CmR;Ns35/DQuc]o!=]a[)[A4j:&HP4J:E)nH1<uPhZ*8hrseV$j8Saf_g^\fEM8fpXh`+3R\$'//MD=&7`lNQb<htf2bhK?R:22d
%I+prNQT%Uab#nqbA_A5q_S"k&DN:G7bAd#ikb=hJA%g6_Nc*_EBTbe?0_8$FH5dXmZHt,k$$;n\$"L*M'0*G-\mAca7iO*fj/0W$
%Urfp5!)5c9oE/I?')72%8B9(7r#D/]3bg_5^p4*5Y<+bYVa(a^hE#OsM&M\JZV2b8QsLmXqfjQ[A\*0=E(hD:&M8Bga-m-_(GHH&
%I,MLU/HV(j\o*TgLh!uR<$mE^LsWl*pH1YS6<f!oj<o!EQ7&K*!CV>SAc&VZUimd)c=(T<#f.bC-<Mi(LU`Xo#TpDd_bAh.R8/hS
%_n]7d[)iB:Nfc7D518NG-BG!("8pTL%X01_*?hgV![(u9hcEM^EJrGf>P-8XjrFt*\AUX8eIV70>lujUj17Rl_"M>:0?F##$PBe0
%<M;j0KB@,)9k_SA-7a!q9G2)\4@6Y*F>?Q+(IC$a8Ea/8Td_1#NaXa2SA8M]J3]R;XD8K_7BRV^&'.Y4)i.`ZH/Br\TS_h(V2=[J
%A1U%3M`_Y3D)-#p,9RjoP=8FR(1uD\=bd7qc_^jG1:>gOCBq6OL2V'%n;1@?msQNJkZFNPAt$XN74BF3_S^=uX@e@]"L\SRBR>9^
%!jta2U)hmhYU>[E>;4Mm&mf#YZ,:+XKOf'rOp9A]BlmIC6c.S''?"BddZa`B#p#sZ^gdh;f;0h?%:qR^FB'ugB+V6cJp\_=`AE:C
%L<0Kh3YB`G9MLR^9WQkm4dsBnD5^Kj(sF"Wo9O+u%$R.^=&pX03IrPu@H#1ige%]i)-[_0Rftet_/p]QZ1VCX<e)>$>Vj_6A?^c<
%XU)%jP`KA0$-DB`=sdAn$d<aL&sdC.$2SHFV5Vp$Jl&l',hs%,ZQPVj'G>pC)n&#r%l)g-.oFe#`&%Wh!<<F7@N<rJZMFta.0a*G
%W?g/:!Y_[=SdB&KZKLd\\k',iK8/"o'Ec%i`eq<W^%5K5NO@D<&VE3sjY2>i,#CU.:Ik#.bU/AsNtAU:"X>%CGY8-j_">PRORdbb
%,@&Pp[b<DT:YTX-Q<%2?Z#"Cc?Jpar#gJGo%S;tlH%%/V9)oNX^6i-^-Z]\:FFB(:aNF)#Me9B:p6N?+=WRr9HfT?@qT.Gq0QQ.e
%W6t*+-dZC.C^M:n*eB:tf9_ao%UE9mECb?a2JU`VGsjnSOVqT;?1M+YLE)I+K/JHg88p-u9'eK!"XMbXni@8f8`1qk/0E&uW]B'_
%/J8JYbm5b;So#fr'=[(+?j9gD'351;/q>rN-htDPGq5VS(#"=jJ-^acK10h>i9DM3&^Mc_=X6,D#Nl*Y$?='N_uU'N[n)%3/l4Kn
%@"gIIKr0\H65HG5O`2Qn_<eHY;S*L9V7B,-6M@..%ED)2GMjF6B4TP,+=X?)C6o@h!.0U5_e%4>f*%hr'dI+SFDWo?nFAK2_Lb3i
%\\JDjO`.,Mg!A.60RU;6f?X*.B*cRF$_SiW(&C7-!2(S<-MnQ&+3P:&Ts,YXK^_8MOABq-6&W6JXCj<8>SQN9b+tdh4XmUDOWpL<
%[4i?;5nLW)V@:SObDjr*=<6m418m+?Ql_J4UC`XY-m*7JWfs4]0V\W`Yeaoa'HaTDAWctrcZ\5M4V8Mf6;4B'%NO`ooBbu4+;D<#
%@66Xq;!TQ:/j`(LDbrAX"%Lr(RKB-pOsW2ND?9u-Kd(.H3Y&WE*lO0Ilq/p/8<6t[Neo;TJ=ba&+imi!;a:@fL)(:Q).'Zj#b'!i
%JOM<^U.r;.69u0B0_oB<9EC'uZ+5RoPX&D7>K5?VDsD<Pq[/hN1)u^RN3oroLp-kn_""*-)-7^W62#R^@\Cu-P!%^ba,:^9):Lq1
%)ZhERO[:!W#KYuF5RFs45V/IC"`2cs63LFFW?HU$1*)[$im^MXEMX7ZMHbI$\e1F--0-17>/[=m6tr$"[#k[;M40eK8%q#l-+)Wa
%9nnn,-5DP.cs\NB=U/@i%5cc.K<JgP)0Y<6Espu*?B;B(=T:f&+3GJB1E\+*5QF]!gQn4?MY2gR2W@[R8<#MQ!KE,WSdaGBq\51f
%m)UU'nN^#f@?[?T6c(J^Ka)Q-@R_2D7@Rd4MaMfR@#GcKE@!jN(Wd08r%9P#anCS`Sqp(c`-,7EBH<-&afnW#-;67Q5q_Id@Wb5.
%6.uOd!CIbdSDt0V-:H_R5ZooG%bZX77oX/T_Mf$lrZX@4Z?'LA@"2UiHrE@;C@^%.;^VfI$[^G9FPsCN%63f!=69%"PRQ:9H5>#!
%go=jD8=tuC5YO3-AD\=;1EhnAruA.sY]d/dI,ALn#g:/^U(kQ86YUNOArmre9M=URg_;)VTVfFPPbAAGN<gCFEV;T\!G`nFRZ^Q(
%A2Z6p1_FpS#rFpcYhFWWOP:*n<]ZC._bi].EXuM7HD/C8&3)qO6Y$lJ(2,!)e9XY!%9!^Wa`JbJV%=_(6O\JO"PFC#_:na_)&(MM
%m^R50JY\^8Q>jhb>bQ_A^irn8.&O7k\3p?Y`/(pU49u3sm(t0K+anM;!1'VbVSQ9djM3fA@QXoMpG25YRmka]a5rZt0dTLI/qm=]
%%Yf.h>c!8c(+mm*e%gmr&]^*%oLobI#R;I:>E\@1,F=0dQj83S9tnNM(^[TY1%\ua>n5Mcan%BU#^JaNoL%.^Zn5tu5[A764\qM5
%AGNm<"VZa>bXB,H.;jY9`'A8F2%=C*HaFOnNasW]s08-Scn_u=T+/2mU#a`82GjH^3%RdCba__Nr-9d(#uK6hZCn@O1luR>-]1Tk
%Bu&[a=YW]'JE=bLNPX-Uf+i45,4K(d\PO0l57.Z%'>ssD!G`tN\cl<W0bO1O7Z06VTU$nAVjPLM'd?7QXL"KAXr(-Cft7kn5[k)F
%aPD*F)pE_s>:eFJ7Ddp32O,10Sqe08*3[OFfLhNKQq0nf8ucVkUX_V]Jg+,d8BB/1%7F1b*$@Q[.6Ah[_hB**F"O_O3$lq5",er>
%U5k3=Nb+2d[#`jn_CLi`+B:6k!6o)lP-UQ.0dbK`3:F+hOTRob0g?8BVEbMo/D2#6$'FZ_7%>^@YU&&c8et$&%Z'Fk3?hl&lDnk;
%frOR_YRG(fZmZAo4bUN=ON8"^(>Obm[3FQTid)8aNZae7+/SKAkef;TYE4I`7W&>>9c>#hY)!Ru8sdXj+F$^adt0>@:e4Xs4?q#r
%\^kCCSe/ea,fL[nA6=R:E@o`e67FgTanD+OPgqL24G6<^f$T3[Xe[3c@n!)kUGUe\F?&dQb".Vj'_2g1.+f=).&.*Y>JS&oC^R*1
%Ld)JB/s7D_E3CQ*84G7?o#!k:1!8GN%#g;:6#B/B$sQ0k%P/AKM5#h.f!8,C5WBPUg2*.to>iR%^7[lI0suUQ\ql#kN.=\\7#N<u
%C`eAB'^U.I.AU[/-8#Uupt3B54be;mQNqkR#,:)]ChS@58pJE=OB%B3&&X2;0$@Z'kn@N7Fk!$W5;&=c4P7<6JV;$3-HsV*IZT,6
%,-[V+3R6!*2AE,%Dc*8G!'-AlbN5$$AQE\g(s2g[C?g?n69R/'/4@/W)EX0i%TfB0:6m3sn-i;FUIK8)5*O.O(m>B"`?q/RNu0R8
%;G;%f=oqo.E*W0]6OXJ.#n;FlYRlk!&:80^fn9s8>g&,IH+'n%haO6*ePkb\&:6[^5^8)#fYAAUL6](S2@Ce`;FVh-UYL`X3Yn.m
%QRct''F'T#qfjOV:a6=&OE$Tg/(QQ\H_,(qMsE/=AH-JmTHpV7YhB]`iu0TSi&H<8[TF"p0'Ja6#0N@%aNI\/#TlZQ`I+-,9ej12
%^pQ46;65sPH+ABS>g$%UJHB%C<7OD-#aQ[6<6.Dri<[R)qR0?-#]0pc77C$(GEj=q!J$$f^uP9GM1?4>Q9:G";inpo7[=ruQr\)^
%&2V3?LTV?t5tt=9d,\$m/"?kk=U(B1h^Y5F8@U]f1'H!GY$_<QK4fg6E`<N96jkP[7>6rG\km!;3HWlg=9gj_/S,#OH"s"ni>;om
%2P?g_2K'"CYr2j&I-:]rI96+si0#'*lPqm*&`;SJUf:eBm,'6G0TkMo(<X4[-BRBm9*uV)(P7<fc/ko9oD=EtQ>3,[5uACAaA<FV
%AKZkbcoiIt6*R!&)7fV3,92db(>cqu.01/m<,UWC""mrSk"Z9&#1'T+0nh<QXiri_H0bQZ/g8*g_)`h3o0=*_"UUq3d75VNVK=-R
%+Nb`LDZl6Qhh!TBR?51YB#j]m$:!/p;X'aQ1*j;VfGY$D[^`9F6#h](5$'nhR$"huHE`3k3"_;^M\?2E<SIW*M%CM-8d9PC8rQi%
%D&gG**C1BmC7udPB0e)A?Bd^;LOiQj@n'%[$hZ3)>QH,5iGs%#b`f+,j=%5AQc%)VM(;'LSiAG76P/q^Hk,^s7k)2Pa&/UR9]^jg
%ee#(1<T`+(Cs50]G!V425jSQE(P+hKQHkXhW@r1d&1aRMKmnbY0^@i*L/=[7=b\RU<3co5Rg;BCV.@n?V-2Iae$;qUeO+/3i5YCL
%Y!@LVKH^g;Hok/%-++5g<i-5p.9L_^I4@pNc210ULI$qH<(B)(LeW^T]1W,\!0,*t\==iG:s*4'Fp?ql%T3;'-fl/O)H&5c<YB^c
%3m,a4NEQJ-#@p+OT1oGY%n`Ei)rSrdjJmg_X+1X'$;W3`2LIY\!5^c0#-B\4eA?&jgOVb@*nNkiVupicEDq\!"iq?"(?;YB)q3[*
%m+UV.7d@EMACome%Y5]l8//$9@8npUionPI,A6BHT)n7oq]Z0]>Vh/FKm+J\!ru=QOpc)'3=MGhk=iHYb2sU?;F[$G!p,WZi/!6a
%Z%)kWM))On15hfm!.dWNR3L94,+@U!%oNdBn2/3/@7BHnE%hYqCJj)_6Qt7D]`M_=.,n[AcXpVYYhq%S(tXa6<U4fk=BN4cc/r;,
%pic?hE3d,h+VARi#Xgs\_!6R[.ah"0=V=]<"aL<!D:_dY*8abj6or8_=;Ws[5Au?4A\f+:$ks;pP'mFc;3mFJ4BuDX@b2>T)1i=C
%j?O4Gds_c=[_jX>0b%!i+Tdf&OJ-:jEKF7+3=!h_1drTo9&akJJWu:*D6OI<$TbrTLgKSp#X>T/,\:ud]KWV^=tgAl;e/CX"Z_,@
%`MK;NM?\tJK7Pd6d1(5+T39,#?UTDg)bX'`$cJja/p?#Q3c.LsIj?c06^60TVUX.D<'Zks"t8Nm-n0+%cL,OUg<4JM7?I&u7E&?'
%3+WC_J=6"6C_j;32/ES6BX3.]e^t!1,eiq3Js;(_j=/<hcj$Am1`VZ%''$bb<HR<SY,.NLo0,Bt&I]nCVp?+qhA9#mgm5b\Qt%4p
%MZX[3=UHTSnApCG!X&TVDnLdj_bNN@!>Ur*>m7)Qqo";^LsLV+efh)H)CG1$-,/A;*k')6ZW/Xd[14ekR&5nS6>l=@'lfWI+;L,!
%=%3a@iT(8W[&-G3D/AZ[]u+h8":IQ<D35'm*5I.N89k8-Z6Z502Dp+,$7_q&M%FofOeW?.%t#*pHB:PU>[/&"LN6fb"$k#[dDG2a
%*D`eN)=.cJe?Ff$]Fi3kT5@/Qm3)l#aiPtn[`BATPX*Lu=>23OX'mF<!m^I%QmjCjon%ZJ7=E9<)mNXFG!Xpm<MDi$NoIAbfc6@%
%h0eoaWo>]=!O;sUe&Z\W3C/UXoZd^;aSlcWI*!:40es^Y@3`b/:-=pMSl+#DI0]l[D$8XJ@N\&*GG5km;$&UQ\0*XGgVInYb]85a
%iX%.=$;-OX8Tqns5U]VZTC!dOAdADQol_PaL-DUo0^ue+V&RMM+TFF;!JOpb!l4r3E@q@T0Gh_?j^M.$)/T<lOD>q`)>RF@?S5D3
%;5C"eOj?+*;^#_P3+X<_P>Y1)#@%g%\<aER((QjB^YE=YEI]b3p0aLLjRSId>a/oU,(c1Fe02mGZ2q@9<lhXN#\IjgGls\><A&3t
%33\(McW*h%.jRn#,!W@*/p<-nAI6KKR,Y:hPj_jnP;6CqnAN]cncHJ]-@Rfd`kuZX@k\B"A]UcTfj@5\@'bn:FlJ\eDLeQ%Ne;QP
%G_^up$RXVJ6>9hh;3UQRWj,PFaOV;&nIC>/+e5)4nWYLZi`n)Q!\I'jf<>\peMrWaF#aAr#UCd3^*a1qj+KS"Chs2tMo/:h2GK4u
%&7Uf2U#D\5U"CokbRXr@puiAQ"cJ!GS451mUICqNif"Y6m29(o!fDnNMK5D\YjbN1@K.6r+!)@o$8kcj720RraLaO^iqeD<f&GZ9
%(6J%5?cuj3JelccDK-(BP@k"R/jrU_!tbWtbmHVA0?cpiE#+%]c^Dp"lMbZLodfTNZJ!0Ob><cug!O8-%'^fGW'[9lI%8*k?D9*-
%(U[<#q'.\/Oa=<=pNSXA7^7I\c5Y+9MMSMMkG`.5JAPI1omHO!?t3>eKIMHG1N:QPOZ.*)9+NfQ-lqc'+bN/%aBLI5K19rK!Z.<j
%oS]c-M*>AV\8shH'2h67VZre:B]8P/&2%0jO=s8(iNl)aU_+sVHmHCk-Ol:K&9^%.&6NreL.btm#MjEsQ]"Qj'^$J]OBuGu!jpV4
%OQI<V$!XOpZgS+K6Pr=HE_&_;Z'F]"GR_10D+]_c,+&@WVQso.QA\k7@me8*Xf0Efir<u_O\qu@O;A>0qo;^)O:O6In-_.\a+`lq
%bX/W;oRUuVMPMYc)R?uuP%_am3<D:N6]q0&1^cfDA1s#O$V;L(Yk0n=@`%k[Bok9J.K&bQK@!VF6'*SB;McmgCOrO>`8J<HCebor
%1C],d:e`:9[e\,QD];oT(ioDl'/^'"%h^)`@Y9AY/DDF:fMPKt(2n"3)[T?rj-)\cc4>H*UpcRG\E%j#5!N[Q6X[m&++0lJ-P&0U
%-Rh"(\N-I,W-,rK]:;*Y_LN)5]dmJ>1M.IPmc+_L+ZA4GLhGl232fRd>pE<QP2mVXp]KM_8k)2$e285RYsd;`aT2ZOKae_&3;TG*
%Df?j%fgT;k!>ulfJ_NRmg;8D<5QP6pWEi^Jefgob%mI#W33qQIi]*&pis\YtS'P?iJD4"8HXJcm?UmkJJ:n"%3&*j\8kZb:CeW.4
%4Iku)__r!CGB1jj9>G)CDrDCuUD_OHP=Y$_>d`[#P!_otcXdo-[@nXhS4`JTOXqWlZFGoI0%Iu`RG`tf]snOPK8:.>o6>0ll(3MJ
%);%D[b5MCt:ts^V6fLRj%mJ,2("_WkJHNI#^,Cun8;rK_X$-VsEJgH2<nL8+YrF]K?KG!XBX<I^Ug_BM:B5#E>[;LI0W6Gi8r\@i
%*/LdP?4D$NFl:M2C#8H'.k#4BmtXP7BS+@a-83kYeaB;VeG]Ar]&$[tEb!_<I$HJ!%@o07_(PJl4^;4"h#%#oIk;e,>>fe\MRbN7
%`dkiCn=1><h6,r4f,tY^d:i,$%dWZ4^3nn6^g^Kpl8n2p:Taa<2@<^OgCA6<Dd^3uQ5jI%"f;LB[V)I=^RPUteasu!rjCimOHFQW
%e.gpLnhaM)Fa\t\hK.RnnQJn2QoFCg-rctl1#T9no,=gZ-Z['1YE(R:8V*?1h!%Di3j7SWLsr*m`4Z0a6[j;ElN>LM0"L3%;C4%o
%m1QGFgR]W:`A:SfDsaX'=q2meT5Dm,oD#JT1aWFI'1/Ds/%!Ih46q%/oML4BYGFp1_I)gh@jBjdCd][\cU[uT^Mf)D3SPn:?mQmI
%+E$BQcTD)4SmPtH)3,3Lj#ka>^(d9\HIc&=.Zq,E-qE'L16*8a`QaO846]ZO#1ZLUN.tLjnQ\'6riC<"3V;;jo&lV*7&a((H1>#a
%=VX_C:NsbRdibE"LE+)6X?R]iHm'd_k1[-^l?&qB3%]r<*'?oI58;+FC6H_cX?@q%l:HtU>O,-)II\/7n0'>3Gb:0_Jq`Jm=f3q>
%>>K1DpZeq&;dqRWWD8D"#c*8malVB@$nu]=iSCnB_hF].6pm6d>U\-%35+K]#%(-3@g&M'!q=3BS$R3#X0mjAPSPp^SLYnZCLprC
%-p_t@ON^aeed#"Y2mJ&:&n3X>o)-_aSl[e<:UJ@e*u2[_0=!YQB4Q0SPfN%7:D^+(B?oHhLq\X3E>+\Z\%l4q7tJo/dr4_%@NfDO
%>Bl'q.AW^'M4n3$g\D)HpJ:C.ab3(V?=H6jjt#MAIpt*6.qN`r]$Co_&YWUj!mrsJM=S3`?f/WjXGBZ$3duLl0-buCM,+k;5F6Lp
%[-Xfb5P9lG^[W8e+85M/q:kpuK>-gSlUf<Lr?)(&YQ+@sOdp)_\]U0I#5MWE9%!^Ha&D\.IJ:Ylqq1t@6`P<NknK^Z4KiO,P<*>V
%iMIiaH#gMgj\kb-nNf/=GLf,U2IQ7po`5Y0p%#m>8Rl@4Bj?`/s7e-3'+rP-OkBl>A$C7nK;m@5$]"GtbYj:QU@pD/`mSV9rR&$3
%iXKp_r?2S4B5Q][U?Re*8s;X+q2XaRZTZW;T7!BV25:Im=.ee,.n*cC.)?<mWMQ41fnE'-;e`,[FGWl'ITrW[Ug`!1Yf?g!f-FX`
%*k0Gq>BSc[KNE%*dVJIR0O]M@0W2'tn19"aL&,3#V$>`Ud,J0KTQJ39+Y^?Z.R2Wk<5"*#"Jn1hQgun_.+Y,I@-]$Oa9AfpP9[&c
%9`j')3;jJ),`.LTPOAVf;4^Nr3mT+`qWG^Ce^T<!8tM_2*NH7C9Z[tGXjoDFK6@&Q9)W!r."bHbE35WPa6V8g$f;OT`dU-#C,Hh-
%.k>@9W;46K;[Q>g;(#X;JI)T^Ve->Lk,1PrfEX*LpIAWoN50k5s*,U7A4"lb>m'KtU#'Ee,q4C7dtZ+q*A'OqKViNW,*CBU:q\?t
%nucWMO.N&]1nhNDH/2;kh;UJ,ItZr<<->21a1PPcOc^<KY(@_Db2<J'H6+iSO0&io.Ta*^NTfjDBcO;sRM.LKon$N4=^9T<S(F>g
%?%j1HQT8W,AdUSi+eHi8`4hCE.qCub5ilsF^UH#Wod0*)o[tUo>='^Zok.?:eJX3a5<GGl'[@U7FjjUSoWA(N,7]p.5RlB1RI<#J
%Z]Bd1.a+DNc9gK@QK+$pKOLuSbKn0l4[f#7YM4fN=Rf7r-tJ-q*IJb9d(Knu4Z7:F;*C/+))eEHOm_2Rf#aoO[i]V)4t$Jr0#*>'
%0`ZqaDM27s@q2./k%C#rk.k-$UO%tJ?hWa%!27#h3^^Vfk.NPTR`Zr!pKNTK3GX<-2a\]frK9S-P``kg:2`Xq6.P"=(tXFkc\3:n
%.l"@O*&OCfBjMCR_p_&P3ZTt:;co7+Qiq\WYOT:7CFsOfarigPKFHaC45LcUo[X<oCW8"s2cL52%9J^I7#_,@TZQBUD&oqb?rK\8
%B+\!A6Xrp/c@KUDf#nu(D<L`4'9--l`ndTCQIoj/Qmq'IC6-5S!a57236H:Z!S<FKf.ZmOTt5GleAQfQeGRs[Jc8ZA+(-j"?EcCT
%[$X%G=t9Nt/<_8!JO)&fg$5j>*"$S)CMj[O;(JptEYR,T-?Ro'IO91#j,_'\GRe6`87\7Y%*kfGd86Xm'R]m($AUAC6j'RIPCl'6
%jp$$K;/@="/hI*\=\O2:C1s:-R=LgdfLMRC+#$bb9W$EbB8/mW?(gCZW^Kh<Sa!?>hcN>@%aI21]mJ#O19??9"Tf9G&d?L=^koAc
%@)_,\W8)lgdhM$>XSd:SGX19ZCnnm)]CkO""7#8]'a3."/f,0PW]r`i5D@:Z+g=[H0lRkp?'J*-rt?5+AHT3`TseiEojmei`6V$f
%O[uP8Vr-9gF;<uG)^H1CI9b5,T*aN'4f_C\Up\"\#tgFS)Ya_G?`)Nkr'R[m7;hT*9>C)i_+T2B_72cE+,HT:G3&E;$bLA*E/Fgq
%i8".Eq"k$tNp+k%Yo[%6WJ-I!U>o0?Bf$D]QAR4*K#o&!pD_)d+S^n#!_Z\<@2_RB?,PDYZUKJG,84UcGD)fK#_F!aDD5?T%-I=K
%CO\WZWDR@dW%'"dI!a5)m_:S_517WCld,6t*t$FB3Su\9a4^)B\bV1]F0H[ae,WGp]+pi*1%i&8T2)@('r_9$%_nQf9;J[,X$../
%o>;&Y_koXt7FiSZDTiHlVsY'*M?3kk:nTM_A-@_4VC+`9.^`$-?2C5H12t`>_8YZ3$'F!CMnb",aRR$=S0&Hq3R0'E;0nmilG4.:
%U]:Z(cgpI[0[Jo17=&ckZiDDKEhqe9OABTL5M*DMr"r#KY=o\b^ETVHO.]lJ%E]M[,2<(r%f-Y2U*2L*;HZW3+;lo;It$Errt5=U
%<J(9UGfoPTHJNj_4%D52,dIQ-?dq=FjL1?Of+J5^!<mT/\062&?s7`cj&.up3784;WBT5s1%Td1"&`:UTjXLT:_Obme)AMK_&Hk_
%R[:ogNYDXN9.M.<gr0;%E(Dk:NXW4th]mDcm_s0k\m@+!OL^fJSJ2:MBJRAZPjH2;*KUc5TV++s%>,>-Ws+onD:0md'Y_P?Kn:Ej
%(Bt`if33A%KpFaA2F3)U*";s*@t9@=*fO(MPnc,<o)oHieY*^/\>s[#Te[imC;W$40@Z\U$VQuZlPr_YGt;dSi^L4\5+c(K.A&".
%,jCJVlEb##^gT@LZCL@H&6&04n&T?:nB%XJE]Bnp&t8;eKY]`@;S0km#-=Mji"^gDl[8.^0GRZRZ]*p!B!SjT6'1P,Y^4A.\a"'t
%-E@UXo@L`NJ=*)E@5hg%"&9=>K8QN1BE>d.o-g?GrPSBf&3;OIOWf8-kJP@<.1U]_?hg,sT0s'YEr9V$".j>.nR\l2'T9d&/8O6&
%eVQ-U)>mE<#+mG!WQ5d#UBfF,VH7\K?RMS+,<VZ@Phn`qiAFA%2/?`M--15O"4*!Ke=hCTZ/->;g(8Hm+.7;5#l\&qOip)d(cA6o
%$Q[>W>-"3]]A60l!;&M]JL]7A11(,DQPL>:GW(k-L"@BD?;$+W'F`TU,[u\n*&,_BecO&`R/jAa<V7%1*QOiS/\r6[<tTQlD,e[3
%37Fj[_g(EPdT+6G,4f\Kk*6UV+%`-&V(s<1j2`@<.Zpcr!JtVt!MmU>-L=R:=m6L9M<FR;7&2tt""4S(5``(gU9?c?FE?)`[e%A]
%rhZf'Om$V+hu)%L9c<f?'oB*_or?=IoHb3JVK9Q=Ul,T9ED9g4b'EUKptSlBFSiV/i;[T`4eMYmSFKjQ724COc#U_KV4&jQp5.*3
%oX\!If@Vg_3>XI/HE"0N[HjhN;<'`Dr[1@jS^ZT0$H,LaWG95L4ZG>-^nU]_2Q:1LIgKRqW&?\dpj"</BC`-qnX_b#'gl'T,)L!^
%a=KqM]Ms?XA9D,\VL4#K"='])*kc\IA7f#R[ZMJL:@)0K2`gBcXbig(+:No,HL)GcD_\B/P"s;s>!Z67\P8j#P@r%_:Mk]R3D1?*
%Lp4<_Bbbp%J7#_(%u&1s@_.F''c^8d&jRiRQW4%&WgLKGnQCb3cPJ?O.*GIX;ajg,B7pYg<6X\RWnBETcM_:9'GjW@$iMbAWMFbu
%G`f3](?9-"C'\\Se@AfK>uEVAT2k!\-%YNYnBW3F>)T50956#u>'=p%s33i#L,RY.6=p*<@QcC.7*lYRaB*#6h5":kBrs&6j0uSQ
%ruC@0TD/q?SYA0C..&B-O6%*e58cNq250rO#U1g0B<U5M/aiM6cL>fPIUbjA,%!1L5*m_Erpco#Ok2O@K:a6OJ*Qpks*g"`rro7e
%J."?g1B4?Mhir2tKV!F#N@;dti-Mi)2A?3Wm`l*R6&o6ZO;3j(9oA/X)ktP$#V"k34gL/>Il>7)@#*.)^$d$0\0*k3eIHU$V36F\
%j%E67XXmGX.R)N.a-Iub@*pb6WL;^?@Lsba2Gu/2E?t-W4HDP(@R-,U`"s_B9m16Ue56ftY/;t"*qpBJ&9=u;m[mpD?\h8g@Ym/_
%#L6K'kY\lu_sJa*NZ6UY7AhJb$o$>d,o"kfL7mb<P,%)<&SP/Wk3CC2T3fs<jS"C;.iST)E,3HL,1r/[d\;i"c-jP23CL`.]jr>u
%SQ*g7qkR4gF8mtN@W5>WV)PD+M\>A`hK&Jb>$]O>/ZhNAP0g6Z_6Zj'ob7#XG%VPpjA']!XO1Z_2nQG:=i49SY^:,1]qV!D5%lRI
%`/h/)mWi<[=CdGu@&p,e3-D'0C)qQQ^,9GGSI-47Rr!O)=<-%2=B_4I:$QO>+'uK!2jB@ks+KI\U6=0^ZC"juI97KFjK'dl2!o>a
%`Gd43c)a>Meuu%[=%]=7EE.gS[!;)(PG1O8'Y0Zm3FoSZHsN$1l^M#*ltu.fb=^b%[GkkN0:o6KpjrtGTC:;`I$8IC!17`a?a-mB
%l1Z,u>b\!r82#Z\0"[.G?Z20L$)SP"a$;H4d"-WEqI6$(es_F\05u#9U_t\IOH!6dD29+AT[q)UH"sI.@BrO_X3[=ChP-mTG5MI4
%1=iP]Ga2+'/-0"'bt9K^^pVcFa2/i*i9OUU?"B74`;r6sh$%lT-h",<YG,c3;QHNs][00M3%:'G4=@gTJiiplb4G4Krc:tbPniR1
%!E]d;SgrE/bj\7"e@QM#s/QIt.ZCPW/l_fBXe7>0JVB.qSUE4cSY<b)nr%VElTeM=2gNM"YT3=aL=GI5BFPqhF2eRj_/R5&A?AfH
%$<,UH8"3lZ(OR@Z%1XXUZ)dSf6o_t;#_b,""aU`NAks[56:a"O?OULeLhmBu,hPG*(ogA2L=!7,]WmqX,HhtiJ-:.R5/ZB>"qg,9
%VBfbAaE536[\TS@cOtmT[(HMf<2G\%i\*u`kaA+sMI4"5^?aAe+=#CYNcShWBo5A/,9Sp3EuEO;@*YJElN_r10IC<SI1Df,*iP-'
%LA&Rq'pRZF_M^g:]c7];,h1.rfooO7IW-q@F+S,k?EKtri):/^C@&SE;FSQHr]mH/437[=hPsYeo[$s\/0j'Wn.Q)q[a6ot?*-VM
%=u2uM"b_a+Y+o#A`u:T4AL+u`BZqKj"JRcdpC7a=Lc+e`=c-\Q&["hVaoYrJ>I1?]2bm,HbS.4md.GS_.bCITm(T<@5J`3g5#8+L
%Gk45k23grFa?It""oWn5'gQF;neKp\Kkc'&Opm.I4,YF)JH]R1O$T!6,%W'Y+fPoHqLp?nc%/^T6Zj)AK$]oI1lK2Kf^aMIY;)C\
%KR2te_9X6'D0,1jEbNk4+*n0N%mkEW7n!g='P$RVaGFh@-BWa[-A5"\/k"RKP(0X1@K^-$3=mq%@fY_[bR2&-6qI=#1P&DOl7m^D
%15f&b8]ISD2:!f95UKcp82m#)qmf!1:Mu3\eAm@jnSCi/'FLkdL1\s(:J0!RUsE#7?k.$uQ*0lc]84P81WkW0ZrM7iMQH#6S$^8d
%$r`Vo-'a<,7hY+;^X1&/reme_Ih7hr[VC)]/4>rbp(nL^?b8oe!jUDm8`UPMTT8K7oH2]rQPIoW&gAMT`TBr5BhJkaIt18J*\HO_
%8T!bBkO(!>7ANR5pd2G(,ldmp@#j%4"j.MkpYpn).B(o9W#L:b,&g]g<*XmGG7&((8<?UZRn<hqW//Ug0>,ZJ&($+L<07^<3-RdU
%rW1Tg#NloEg_-XmF=ONDOo46&T5"8(ncYL56;%3-<u$iVc3o=P\4#d[Ya1*,XUh't`2_TGm-C_5]b02,,("b.A)5?im0Cd-YURO$
%/6\g"+oHnlM0.-7?`:EQE`q]9IW*`T/nkMTrk)ZM&O0ZF2SEPQH(s\:Ggcf2`8m71FX&BW$/Q>DdXmR6#j#./]^DEo.'Y>`)nEMB
%Sc,E$GSaU^rY,BAF#pN+`/CV1FDSqR)O,u90?(43<"L-08^\YWV,$Z%"09#=*%9hg'$R^9&kQW/2L#=i>BV.L$YsWk;Cm]^I.AMn
%Lj(M&Ph.+MH[r%GLe#?3@9-],iE5Y?A%*!hc.`58[u;N<johpccUBH%^OJqI^EP*)B7chK]Rb,30_HCrX?'3R/Nn]:&e*:r4nF+'
%dsmpgr"?MgAr\04a\Ul[;LM.D5]a8S:$n,NHZ#ZW2t2jG7sTT.S8dU&OK&WPg3''j]AZD_F5%(eg+jAmGpLcf4_9t[!oi46l,<8t
%KPAK\auU.g@rP_KF9/CYC+ug#]YM"98joUm@!!@U9cVjga<PdYH[d2fc^<Zb[srh"5sjDInd-EORbk5T80cLsAVkp_#pm8;?qZ3j
%R,Em@qEi*;!JEL56C8t,<$<]j?a/h(T_R+TIFSi_17SoX6EAWF)9^jY[l#EDo-GYH\1]V=X/mRl6-,O:E%c26'%Y8O?.UH]5btkc
%]b5!`6J%^TKh\W^j5)b:9cJE^'#%r5iDekGR;]AZB=j#&'5Ds9lOX-t02oZmFNJuo$(6V#?Og+Ri!Fc_2CCKb-9/GegpQt\6Xu61
%D:L;h[]COtMB-p]J'4b*(N-^BCiA5+hNC%/0+8P6$+RTsK+"%4RT`P!;up7NV/I-IKK_#H5237_0]c1[#5^[hT"1<8`95_goitVG
%HLlBtUX,QWhU)[BW,P^9AW/3jcrRA6qfTS\faCMn#$>[=<[ArZZm<d%puM8AJqGN;Qoc.`0t!Hb#JWZm.=DAnp'!`8*R=!n)-HS'
%4mki07C3jH$!(iVT^N$t5!0ed,Nj1d>#$2gWH''H]u1DIHAU8a0ec(OKe"[)6W3][Z:fG[PoLr:%4=HXRS+DqomWU\--,-;"!H+o
%f!-N0<.<Is!@=Gj"_9!Xo*^[d^pIs5Bo1BXCil[*,eX$#3>6I*p6Y,C$&gU*W)X?'p]c2Ucm)1:S/<46TID+36#flOliNZ4*@#g0
%7\$F6!pGe3`XD_)Y;mUqN%i!9Kd3as.aJ$E2D,-fo%6W4EX@ilr<lk.`EPC;^$s:S1ig>Z.)2gagmb8a/:$lIo)hd:*X>3n!:,?N
%/sW@tJc_KKf"2*CO>-+>WnRnNik<RaU>Pu:KpRO\I8I]J1!po"<e3%?)Dh+;^h=pcG'\_j</UQhTlQi7a%[OH0G=IoZEBe^#C=Im
%dRNp2):t0&FaSb]-)53q^)(*I:j1&)=HbsL<GkInEri>oc2NW_Y1[('quE](95&.U5%*]>icON/Qn0o6b*@Wtq>8Jt]3fgWT7]9R
%_8ZM;_F;>%J,KWWm'tsjX!EfMA)-tW!BX3W^Y7X2Qbg+4OU1eZI3W*lo+_Zro_YO!1];d_$X3N.YjZ.q+92.8J%s#(Z.LZrXrcLC
%+;TF-@W6]l_K0Oepk9>L]!.:l%6728QX8;iqel5ZH\>d5'$W+6q&l6<rn(ENK8@ZV4%c)29s;u1IH_,E'jDih]gcE`:2!cs(08'6
%@3%fl$0nZ;q"*)Rr*:lL74%@%Lk/F7e]D/(E8_:8elY7mX3#eff,%4fq;j9ZE=&kj@ABZjK!)1a'#+REfVeb&3<`[/jZUCU?)<a0
%ih_O>S(GT[if.X_:%T/okt)Io#jjt<gfjLL-BcQ3D[WWZnm-q_j%0QKJDktfU6o(Pp,cDf#HhNNePOhH;*l>Z/cH-/-'Ac1;5-ID
%T]8qJM=j=c6.+cEs2?Z.-Bml0o`@5.f:%2$U8$uib:bE>e$\9XE.9"3/:5ie3e1<r399"\@-o`MSs2u=MD(jM<t94c'Dc:6>uiC%
%50UIg>)>R4!fegQ*r61:C>$&R4Q4IPibmZH(XBRi<qu;/GUWI5orLj6FHpqOI\Wr38"q1o@>SY9J"bSGH*+??E:-f]\EoFPf/lGW
%p2!L*)qRMUWTirs3qN#o>"(\9k5B9o2=^25G;9_:p883-N^9=*aR]0p9S2`"`W,0ih]ML$-@b[Nn,2RuieGu_7r&)_(`YH1QUO'D
%_?iSY\*ue[7`2r!7%C>UXMc'W<BFFs*Cn.4W+?ehLeo;I%s8Y^/rJLsb$[Y4YDW8p-<b'r=bOB(lbpc`\<Qt4@U!*69H?KSKVmok
%%tPDHLa)I6\Kl96DhMkhSWi4U>i[3s*Bud`>Vd(m"0dU%*po)CZ;#=>]V*A71_/;MZM9qcq>_9!Yi;"5f:<=e7nPTHR5/\4EFX]3
%TO3-SqZUPIs71VZhh+k_mb_=jDn4a$rX8XA1Uk-V1Lmilq[Y//c?t-:9_ddlG;Il%5G&"%@f,]&aHBQ-s#s?OAW=P#UR)G5q=0>+
%:@=_j8HIC6l]3t7MH7`DBQ3[$2jjd3b#)jND5=EGbJj6<,d4cmh=n^uK)Oul7Q<LHl_QdD!N5m->KiTks*R-&k*A'IeC\<,rukX0
%m8f5^4(&mpGQF8B"6]bSOHJ7-H`*EIg1-N6gj0Omm9S0F^9K\g8'RU7kaE^LUtH)$g.2E4Alr7e[Z*^MS.H1EaV-fnF`Op7[@#sK
%;_Upe_Z1SsTq%=?Y&`XeLNBN%Q!D3b=+?Zjg;HTjo$!`#a_]Xg_+lT$6Fn@jIpl3NkJC\p.4fr3)8ho=*#iDO:">hHARE&@VcAtI
%$OQL1N5](`LJr3bkB!!.:@,;.LO^>g#;t(D(bY%uO.W$eK(Thl"':esHde*]K@)-'-'9C@9nqTh5&:/I/W-)R<VKDY(W*YPqPHsX
%X1>?IF>M=WhJ:*!lAkm"Hu_Y`CC`J)DZ2;MeLCXVk7KGGe[d%K,AH7&mJM4_Cm"^cHmpPYW:H?0NhT(n1&LioiONc>G<#k./U#G;
%%$Mtk@/_-?b0"Nir#'YLA?jA=1H$uK[,^h+&0Hcrk<7DH,]!@G&<nTdhe16R:-F"d28s[tGP0QU'Vi_JGHXNN<1GT,qeAYfCH_@f
%qN_gIFo?R.S7ccBYJEINDU5F)0Vn24]%Qhf\gJtDTA_0pc-]lcPXCGk/3cTZEo>MT".g6-m:eeKiZH&c;ki2j4h9PA*cheRJ"qC7
%RR'>!SO`/Vd?gX5p[&VO1XN[kRMg9or\/nYW`48[-h-pns80Osqh7O0b3T#4If/h&s33-K_mW/F9l^rEpP]f'HGg<;%cLo\;g37b
%fFLs]a.T$OT9hK$]h2DrGdSR/BN:*)=W(:e\Np_EarDnEgpfCm_gTEOSk9ApCBp"-Ff&#3(Q#icRGZOaMKVRMZ-HZ[9G55HC<K&W
%YA2=Sr0Sadm6Chrb#><SPNqY4C)EX1dhC];6U,'P_X"Brd*X$#2"c2nea!e+`_5rXC/JgqHKf,m>>Ej!G<.!S3k!mmTH.CG3MU@&
%PZJnhO%P>*)LfdE\APgCikXrufQ\TZhSLcI15KHL?+mUa(?9M79$aimE]tB+q'Bt.-Ud)//aVPY??Ee!fsY*BX20L=*j,luoJSj-
%T#ik*`n*s+R6$]F'2cK)1.1$,[C'\Y-;%>En/ETg\n"cFICHi2C^V(QK8QE21_rDXqb-*;h83*gb3YHCmM7WEjN'R`\u.!@C1o+6
%,=3[p];h2q59<_9X/e")L2')qDI(f^R%o4e'GC4\'GAqi2OV4:X'StS%?##E""5_l;8Ca>@/YoLA-IK\j-IhCp7OoVX,T]I(:3tk
%O/Y(5q'+Xf=H+<=Ptr""Fk$m(ht[)=ouq==[4HOG=m\?GQ_X85DGqQIT/T/*d`.\U+bUiBqHUo-$!!)EhgC`bVERV[!E1Rr;Fin"
%fW$rM[k7CUk+U#*B^F:u=)$P<g13cEW6,,SHCCq*Zn(bS[He0aIWAarJH?b.oi$pdG10P_pF'o_;pS20$(D>cDY5e^Dho`U*^*EO
%.6!q8_h&tSd_1de<O?2/*B.A3f^edY2NpAg-CTV=$0*MakWaPO)Sdt6ktPH3Bt&qMVhk1D`\O]Falc5#Tr&<$Z6TP,@4cD.4-c/`
%Fc\`rmCZdY>U04j_o1,6rbF&H]?;n/W`P=Ae*%).B3:=2$^#WO];\KBMLQ]Q+""LJ`UgY*KNT&e_2=jiD%7mhRL=7aW*u604&qH;
%Ol))k^FWi<Z-`cLdH.5uUB><T#^+muDR-D2BI]#P&"d/0p]PaL8?O2N.Pbq;5bf\QC`k85E?ga:/.SiJR49I^"4sE_a)5D8g,4_`
%Wm1N^#F3mgd:_pQn_$ar6:0_TJIM\Hh@YXsdg]\L0oXhdIrMst$8nAVEh5C6`G')9<5S$#M2?+;ArQ.UH:>J[C8%^4\4;Zd<hTD?
%q@uaC#VkQrk&G.1XA"Rc//tH9*M/lMDo.;=-U"f^R/TgnX[%/MM9jbRhALRSmC9L:U8)j0LK]-L#1g"8`KXC)hn>:\2a2:P+B1(A
%:=844;^CU-mDZ*l?>V4>7EhX:;jV1)4/D#E>-!_#BgoFGWZd5?7-qfY4hVa'2):KJ`lO39'hGs8_RHKHR)lF+B]?%q#;F,ueLDYF
%WESQ%A:(%cT6u)*fiP@L<4aPg`PiTC]@3c55?dF[YGX-(H&?$,."68gWEn;=j@WaoOK,A4r*!r(FF-2/H:9Ep%@>m/hR6A;>k:X7
%G0kKCOlU:YM.;/#@?Xru$"dm=]lB>lU1W;faB)cN9FiRL^L_hq_`4ctMei[L`_jFql&8HU-^*Jcgsm:O8"HY'O,0aV,ZUJIAeq63
%X-7W&G%]2I?`k^p_W'G"GBmZ5LZ]IH5bk<[`i.;SMR&n"1di^,Qi+s*8C9*,oKf%]7A=H^E22/"]V=\f@<M5abLSY!4mGrI3E_+J
%`c:D)V(^:(FXj97'hb8LbJu&oCdm.rD2Jh\!GGXpLdSr@`/ZiCEl)QENf5_YFV-t?-K!f8G=3)^WAC*r,+Se._b5)A.oi6*#3->'
%CA81ZNAbcEDp_(-elYq9E3!:\B;WWdEJ!O$Z:="H@<cEGbNu`?WY^hu-/<BHXd+IOg-@+-N(G.E0_KjsYY0c+bc*b2*pI..nP!%k
%PY-oi5<$3@gFcE'k92'H<gMC:WDP([Q#][^#Y/A&O280@X,K12p)0K,'EX$GWq+2a8Bgm+lPn,*^SCDpN("8iN$H:SL?gu*"(k)@
%3oU`42-LK.'25dub7.HCI+OF3ke]9WL[:V;,LnLBQTqLJR<a*rCKdWsBE0"#\#Pb/SL-oS\f9'u7&Bsc4[W":nqHM>D3Am=)&oQc
%ZC6nE'+,VL.M_-DePUPJ>jp=#Z&rFn(a=lWUseb]`1t9$\&[hPh6"8cp1_O@/8Wjj<??'!gR7)V<X/rON%mE8+E?A$RE%(agK4.:
%&X+SGHcTC?,D?h!#2^^X!Z?gbV<8mnHgfB9Y0Y?BC[BSpO*p-(\u^#:RCn8(&@=_3=kUTXPc_s.0A`F-5l8Ocr9Rok/TQh`+hs..
%<HT2tN`*HTah7@brYjNKLS(GuI(\_c%2s("Y<8-P!2a:b@p-6]hE5gAL8:gY?Bp^FKtp)&*bo/XBGcAFcKihVo(G2;ER`#+_RR/H
%]dtq]Id'p>A5(7i7MbfK0$ED%jV'+XV+o"jG^a\3[KUl3d%YbN8/+CEp?Wmum^m[2eVpl7J\2aWPgn!Re?:`Rd'e7tf0^Se?#>P2
%[h7FeP\S;&?RHgBE>\*i&7TH`9CYW4d#>&'M@?qmN_!^5%pK0EeK3!e@5M6Z=&keXb/*SQQ+^S'%&J.++5U_hdGR$VnoVERX7_Y1
%dAuunBmERMp\<H'N7,nP]'"bOT5)_YSNj[rbI-Jd$d+i1r<8SQW\hH1j=@F'&-M.M4N2^n1lBT3Ls2):l"d%o)0>lGa[@X-MRq5O
%0dBX_8n@6=*/qM>bpXQ1Z7]Dgr2"#H1n!mOUHVJ7(GuhjH)@1rM?PVc'RKCQ%H2D@j=:6,VBU`\LgR77<mer(C8E[#b#3Yef-C6?
%f(.R%8)5kGG\=>14R5U]-92%)?5bi%Yt8@J1gNMdi))(mQb`Z=DU[L#Cfnpu)0k52J2>C%nTCFNYh[e^X-/Y[CDJZ9Z%@hi;8Wf@
%O[pTBlOJ\mSX@!WD?p/:.j5W^7"["-DmZ%+TR=OA&WW8oFptZr_A&%dWes,^aK\WOi7BA)<W%@.Q<PS<3DR.RNR29h&@Q%2Kj6p7
%g-lamMQm>_XNtQmqAUM'hhL"9Tg96CkMicUkB/m;CY2!uMMcuENZ-"cY=Jh?-kru:-eUI``XkC>Rd`?a\bIc*r9F19Z8%*6<;gti
%jUcap8-@SnQ(8ldO8g1A,D,Bo0R!0Q0VD\_rLP17+qsURBP32KJc#S\RsZA?@V7oc2!K&-@Hb*#)bc`eb<p<hTq\jj@b'?/aNMk*
%,8AfE.'c09JMqac$pE2JlpJf,-9fP!<In"&1fs"1F:hFF?Q=Zn5h5>AL0!_-/Ul-S5?YM7g/HuiaM3[4\k4u?;!m%P##Ab<%rX4b
%<T<Jnh:r6+NicSMmeB`4;p>i`\NYLDf[BA?(-daobq"PfkoO$Rea*-4b.NuC\u6eT7W^RTOVl[F%Rh*i99YnU,@1QSA1/1aNF!M=
%k3*H-=uOfPXRk9(]e@&h)9t0"%B`A<]f+O5>HQDep#QN\-r'O>6-%fU0X$Z3@onR&U69Z"%r0Xh4*4qP43U9S,Yb^OUQeo]Vh+QC
%!ZBf:P9-q2hTljC='"%lXM!*(j"&VM],f=`B?$oQ\Q-8>(o&Hb`M-fN0#K-r;5HUeHr>m"#*`ca*2Dd_<-j[*rOHVLaqG]:+/=*0
%;P%SDU`p2(.G(qcaG'=`op.Wb;1[!A4d$ha6l_%A^#-O#5W4Yp!,CrMl9Vm;kl9]a@Wcc<J*m$1*ZqnXpcU?dArn^Sn&(;)f2up]
%4<0dO6:uEbNinZ\3srpX)D5l*S!1P\bUWS^r$B?\QTspB;h1;@Oc8[.lu9#DG8sDkH/)>&XE9$BSYK8Grl464XC2Fi!3W\.6e0Ls
%\G$2,.Z9;>C01,n4J@AUK0lK1(>g#a</%h<)Z<5&Y=S;t^p%>sL;OcY3j2$T7hqtu.FI@rs4gOuWM*1K7'"L`iL.JB<i?0NoNMr!
%]n.[T*j<m(rJ0i]BT7X&W5f"L\>X3&;;&KuXo'>dqbQh>^sn'k\WF0-Ir&pLrYS#eDuqV-"kC75:4O\r7j\dW-ZrmZd0l4c>^gWm
%\$oNsqL<\>5C!'GPgT@lC+;t;V.X:@%QkUoMn.AsYsE)3UJq1H]kk*>GW'9UqJc#Um%!_'Tj$55S"mR!eHP7VlcL!020A+ckO`Z(
%4($2a/T3J66L?9XVuk",OCK#//OuPe'L,P!>)LbkCLE"?%tq-%qu@ldB?(N74RV*%P=5!)[L]SX-^C_uYCko"rGb)[%uRitDr_o"
%AO%C#1YAk'n_kQEi+h,NPHY*O3gj[S2epB?_pCte+E^3RH8S,O/]]uJo;5QQR/jn\PXfh'M'IoiocE@t^X>$/j)u]TU)X)TJ+KN=
%\c3]s5ILh,BXmIEa0iI6#M\ni%)/e8m<00a7/&VST;U3?FMsNG`9jUCr*Zn>-\f5/Hb/P?oc3@O[eFNc[:9fIV*ol94P/h?<nqQF
%SG;TTDK?:m,B<":^"o[!].LJBW'g:ls"UY:;si/F];E4,Uom^0;Sl.1/ee?56(T5'n(1dCWhmm510#?m:9Z0ml5?d%,#^&YQl&JO
%@aMD6Dj"itCS7ot&G`k@T<c)]b>Xt=O&9hPoI)KeiT@3G'LPGXXa*\W/Kj1kbGB'PP^ZoJg@H=?'tC9Bm,fTcLRJ7I0S\9?W)Gnr
%7QM,6'aE.O5Y&\a6:O>^R,cN@4]L;Ns$SZ3L>;'`rgB0u7re=Zn7qD^9cJ6+lW_\qNbtdZ14/(26YP6ga>!PV*RVhLdL`OX,09*c
%C(&^t`)V6CPJuMBB-9(/lG0O'Ro<?2kRP=]jK-<T)7Wr)!XQnI;]Y_spg=ItXkkl/?^s*[XrGE&ET"6kYi8MQ"0b^J*DMIPNbJ#K
%*m(_?MU"26S^:6]^PAfo9735Sk!lpLSNokJc'/s"/c_F(\RtqX$P9\Ek++R.n.\1`MGM\@PtmR%:u,Ct^q*^C/q(1,dhPHT[LciX
%m4rWLTca6ZVWq\ar6\QWfofMt;Ag0Db4,&P`"nH0fPgLWEa*@FJKPqPs%?u!e0?>sMWuJ08K*Q_?nhaK2E:k9i@O28)_)r?E>)69
%$X?fi_GL`3iQB>Q%P65Y2G+'?eqnuSK-nEA>?CF&.(>iES4n1'@bbob'RoDC"Z?ufNIVR%Y5!&_XDF?ZD![UE-@f0b7Ii!/abqr0
%J$/,M[BW^_6e@[+*KR4-obKSsnZEG,<]r]O?IZVB2t8<f140jnCalB<Ug_=%;#[`QHd-KblJnX#R%?$R<GN;t'$Q(82/\J%3'Guu
%/SR3(44If&"a_)igcg#qC81qWiPp^RJ$>mg.+N%^`GRN5k;@.;7=%X)O[RnAAO(S#qC,;'U)G?P%Ul[`2en!SId.u+\t]0?HJ9Vk
%Dr^En/l_F=k`R4Vm[(QMk,ld5OJj;(VV\;TWB;[jcV7EUl-V=4AJTAnG8+ciX\1PD*Q<E1*hJ.uP6jVaR0^QFC9/qFUYmRB`A0id
%3)N$Z.'4kY;4MR(UaTQ3YiMYkMu7Y1_?m'P8ZhFddbNLM[gS6ch?U^DXla<d%W7G*[-4HRR4nft?BgpqK'/Z6':V2NlR7?6o3.Sn
%<_7'k\E;T):/Gt.Ju_[BI5K[>q2s1(]=6:\#9leX4f.H'M\*V'<FV,tWaY7np,uj6aNRK*1?5aoe>q7f,rJ^T]D/u$&T8EZ[cW43
%$&GUeXl\U90<L&gSrEekEs''_-E-VHY^(SE[YL2PP<)HPc;ri/k9nI6<eq1I#e!T9V4&O#P#$tTAtDfa)XunDMX"mQW(YRV@^cfk
%9/YC3($FH(obF@heN*_QV%PhE.$T6cfrlh*e^SZR+c]Jf51OH#<U_L,,p(UH)NDs8XZCR/=Mal4_agC&1i-4cI>hQC2Kbu@)N6"A
%@'F8;(c<k.<@o;_FId44[OK!#,cYTD;7YX&=l,i#'aLZ&?9,Bt"`\&&i:8LD*+SJ[K>rh8&^b-RZD*<=r1(DH](:I).9"D8CqlQp
%Png.i4[!Et`E`b:nAkp%kBVT'@:Z=kWaOo$UH]kuQ-%OjQ'AhY*UX@.=tM(0n7jo@W7EQ](FNcAgZ:Fhnjuk5:'.M&ZC^6u/a66(
%R]L\=;q/]gJ!$iumfF*Tcjs:-=OBuH:=I)kWqW/-amHs?7q1=f`8C2ce:ls5]'@9kDO1-UW?V@cmIJb"RSGCqph0P+YEXO3V#;aF
%)JS84@r/.h"aoVhdj_+3r'lr-asE-1<<4%cKlA=W_#SmP]*nYB5M$'>SR8Shbtt&L<u$V=F[sugpKr9&^0gbpk3r3H[Ch?G\Q_9&
%\$;O\05Bu8GmkmfqXmj@huX+JF#N\Dj6eB\#s1V/Nf(uVBp,BANNWu)L[CP[0%uC@c397[lHdIM;6gjZ_`PBV-1X)(:f:G3!l8bP
%Ms0Eq6!5NmXBIsqTE`G9L>B4@Es.pj4h(IQG4R_%AE(]@C"D'frIlF<Q'0T3",b(*HF6s'Lp-Pt?n[l%I[`7$Uk9gO=\$u'gc`nf
%27iWIWYThLO0]6jn7oO-7c+Wt:)S*A[6kqVWn+)sTsIuC-@23(;!`tZ$8]46e(lFQOV_$>_LkI%Do/7Yq!E=2>W\TYpVgU)MsmdV
%YZ-HQmLgUa)S_QN1gbhon:1BA9.XXh=kNDl6_\t*ZIG`9TA/s,So$6ShhfiO1*T$5*,N!H.1mZu@f_BaisjjX"l&]3UU&]t=cehl
%l!*3U_&1d68<CZ+A(l?Ue`Q4!KjPW%:AR_,)4P$^=J":C^r'oYma6gaX`3>RJd>rQUV=u/4>rELSGd.'Hph^WFpr6aXaWg:Ef)ij
%#udQD1oO"2-p$A`%(?Yop>nS0fgbQU>uc-b'ebRa.Cu4/<`>_NmYMEN?2U>)ctNC3B')Q2AjKp]r8/R)9$d1\'6ZidZ]s)I2R6ji
%A$m<,<E[meB(_40\Tk1W,kifA$K"KjJu`Xs0d#_<7_V<j=82F@9j3nTe+IZ"71>!%bj[js9ojh`bk(%PkYQVte%SBt3@NA47OpAW
%U0"`Q9-@BpeD9-f;J-:l13QGLdW!gR@'E6oeXbfD3P[B\QT/@a?YuCM3\CGO'.G5T5G!L7&;mJM^8RKV<dD&4\cPS<<2+B,$`?j-
%B?#](mP)eKM:@P^h(D-6_$ZWmF;[R@K:U[6/(O`DB%WcJgP<W-nqqBJBZM+94sD'D9-(pFka)K3WUsr<3r@)^0PnJQ:9k*\AjJE9
%_QHhITN0EEb_5[i)%V,(c`g/R!nJcX9f[l4nYW:B<B?T-gt#`beq(DeeR;$!.&U,D'!]>Zr[96$WqF//Ahii-U'cq8K)/aQIap%u
%Me:TS"r<I4FP0`AHSE@f!Zg2QUbW9N.9pm=_O`&E49od-%!b;sp$uc:j.f.0j9hVZ^p0-))*UB29lfs4,6/ck,<dP]:1+9"JKpA1
%@G-T+neYVA2Hik-Tj#57J4aiOlCr[a\h'@s*hRdJ:I:7P>Ts9t)1eKc*,cuN#SCT@d!AY6'Z,p+;9i:9Rg@1<8c^<"`tb4H*n/L"
%f=.J'6K>gkK-Z'%[Lr&hN<H!VkZYD!L_`rtB1&KTi,Spj&DiY5CuBeNGs*FZa[pEmOB63an#g:Vk`IKHW]baNjtV[P6k6i]kK]G\
%/QdrU0laPU\,k$flUeS8pg"E,/M#U5!kN/_nk#u>3B2EkQ99NJZ^_jq<8=YS=ZZ=WE^)0$N(S>SWnaU$+=ua8f0j+R,cA=hm!]?\
%Y>Z.p.Zk&XC,)HO\uSOq72hM,NV6]BDHf4+^/sH!]%cXaG=gLt!fL0HgWqkJ^MaulnAKX#D:h8J^5#s*pr.s@dUK@`UIF=PI1NZn
%Usl17Kk,rr-AI>&dL-7nJM^>9;5Op]<hXK,+?Ii+f.EDQrnLUAGL\%bpC:tY#i2]iTjV:[VTW^KA$Hpta0uUGd?5ZXPs&l#)ZUml
%q$IW-"\%IgI7N)[V)$#'^GTY@V53b<mLQAp6L6;V!h^*c)VbJ;e?Q_)14tOJ&j@,Ek8%Xb,?<l(A&H)5=qt]X;9c$FI#VAH6-Ma\
%QlJg<I!BJM_a9GJ?BVo#+0EIh@k3mMGjiJRdV=C.@Q.m)$q*s?1EP]gJ5nb,rj5=/OQK]T@2?1NoO5Cu1]Vh0cpgf!jjl-bS?t1&
%TlO?O.Q:T6AW>^=0YRH32/inRA(NT@+H!J,!8,c&A*?N4Z'N6A8(AS&;cIsP$tmj.WG%9"NlR02T2f,K^nkh9fJH#?4neUWd(T)j
%TXE!U"2u?]5C$&L9X#tH\uD7coGa=!&ZQ9KZHb=QK03X&q4PqXc@RT*Y8t1/<1S/Ga/^Fg^%;m?![^kTKZd%Ggq:cE`'`7jde-6Z
%[9-eT@Dur[*PHWRN(*GGf2Q(kc,^f6US=<)\P&4UG$&d?r.ekTBPiSbECVRjW)&Y3#p;O5.sj+VlK"J@BfX!P(U>g5?%gGDpc<&G
%itlK]:lpVET%3)14#E=-^HEu_D/nMWD>^U9U"u%uY!)?''?mP>=Lteh)p)ubC&0+>_$T=IK$iO/]hJc?5NiGZM]\:m?=)-Q*29FL
%,t9,sQ4)ICJ4>Y#rag&hW#+KfKVEJgQndm*OW->JhP@N725Zc*=Nmr+Zi/Bu^#DcbBa_(]bYn,smTmGM7*<fr]6:Y)6!.q[U`]]>
%a_Y.BfsQs3X4L'W?I5,$[nB8_jSlM0>AY"d;H,1uG(Zep.#-?`m]$k@-2q`ZCdqH1OTJ;!5-c;q=Y6B*%98EQ<b:O:>at>4CuB,o
%g*P%+W>\+B)haDMrD47nk-)mKHq2eL(4Fu[FuK^HcZg15]8.T5BAYP`Cre:mI.GA?1n89S>!40KE$.T(==04o<gtX@E?k1^WMW\P
%ZVT1SE2GZPYN&1DcU%*aa!]5^1IV=S4-EI6SEXrU)s3-E)EYmAQZpUKhu^KI@4)7CMmdfB+jS3ZF[`2VKoh1*BeeX8N=\:G*3(#/
%FiXGoWBMj!Pp.kd5XP?_,dV=TkQXB$C&0-l@3N[R*J<Jd57-P+Q*^e&J.+,t=6r^V(315+[<?.<=ou<'gI)U1"DrjR*Z7?:1+2)R
%P5C0<I+-7HJ%o/E5.,*R(3Q&+;'0V0r;^cTZXP)[i>h^'QfGR;Sf'$k`("nL0=Osf8m)nKmlgnDXVo*ue5fel4UUSsl6jfR"jR8p
%=OV;K$E1QMBoKY+L9*RG5ZA]=?U_P)P.M%`@>Vbc/-d(:.1Lgca_a((Su&T",71lM6<X<M184<l^5?:gCm=J;89>.j-RIt&=F^]@
%5B$@%qpcQ](<:FUGZ)YTGIrN7MlUWKDiD"qd!#^IDS*CcTZEP;>!l+.:R%$r=kPe]EkcalWQD*,&$)2DT4ojZQd5Db1l<+&PCVHM
%(]Vg*)_W4pSj(=i.n9g3A#T'cJd;d1"rUm:E<h-\1PQSb1EIX-F_8'[265cSST3)mEhR*LW&LA[Ps$[r96=CcH"ROCKRgSo.KRCC
%:A/EkTG37j?<D*lYbFRlMaV/0%oPdFEkeK/_oqV?D";(o7N@r_HMj5BeY&^ln#['c[%6!PnZG]D9&:?PD=2d(7ti,+YVSRU=>Y't
%q_O6[:TNgMO`/:XLXRc3+<FTsKDMdH/\D'KXZ!oW/0]PiFi^4?gC`07@>>s)Z.YerRNU>\HdMM&**'iFG8G1.4"[L=Ih2i8(M#@]
%IEQm)X'8S*hkV/Sq,^d1#HUaoL(h6iNH4CPmne@frFgfHb<*JqgnIW,i7tL+VD<sfrJ*QE<2PVH2VrtGS//9LFYq.LEI]I'6ZR@_
%1VOYc[(_ltSVelqj26QmPQq!'kYP&CqRkd<%pZ.[Xe9>3<g1d+kQ7QZ-Ie&3QfdF!I'#GGes`)Zo5O^Kd?30aII8_?Z<qeIq&'dP
%V$PV6eM:0?M.EWJH7MTtTpc6"AR@dS/(maMP4_3)dIGo@ZD#]A]#p*PNuJEHZ^s[22'b3d762`7:96Tn(Z6^18(Ofm=/9;h!OnnM
%FIpD`)<F6ZNY<L_L8idYZZGFKHVQXnc&I5(oi\,DmR1?b.0JJT7$-pnc]+au[LZ5a73W-h6$p3>cZ^I6QYN^04j(5EZ!/0R>RL2L
%)XReXP[b8q)X['n5mJp<N@/6l#o.t/As.8;nAt`SX9q['8tce<(2`?@gg#3m@41m*T<0^^FQhKW@Z%_Y552;T,NO#cKLQ><Nmt$\
%;Q5/iOLat!H2cVm*9e,;Wg6IR,,<%PW0-;gKm+9.BseW=P(ci15%.peEg\<@1)hnWP35Tp;_RTF3a:V'.88I1Qo-0^JX?nV/1J2Y
%hQ8'_h2Bfa_,LW9.l,GBa'm$h=6$Af1R".6%9Fg\l;jX&HY,4FCO=>d8f%p;e/,F=_R$as[lAQ7rh$\qC_<E$4"ZR-:.UX=+SfAO
%Gik%M^+rbU_O\+l9bssg;XoY2qiq*Mp+7oh>.SV[@#JJ>e%^?Ze[]bAr$/>b)sLNu]pZ,fqV_Jq`>&#E?;Pe7Nd&+1#ou'+Q(b%&
%SN7?]TGk)hWuT2'=>DRo+4.>iqNW-D_ML:kDSWd<j2OF"lL[d92j_uOU@NG.oW.X^NDbG_DniAeJYJge_Cp,S/*A7.EN9V+TV6l?
%l3QSW#ejPfj0'KdNjVs\A&6A>08kinZnt]=JI@SaBI3!t9n9N;o7j8?AtQ9"=U/?9HCF);_q8K'mX)tJVM9:Fs1E><lrQoQd&lI)
%p9(9,m"Qh#Tri"cd%hV?+SDi93]P[NPGh0R12>J]d:^7-FP@"W-u$SK]u^`,?KaLI_(h\YoS?-!Vd7d/Zs>-9l;lQt.(TJHeM_6d
%mgu[PX8>MK)o@P"HTqe.A6hRIU7JOHbgC%8kO'Sr4n/f+di$+FV2FZ;cjiAZq&PHf+sVV-j/+-!q&Q[dD7<O8Y/%ch7J`hZ4#YjD
%O#*MEM%WFr6-?#F,a$UC186FVRScJXF?pV88Vo%cjS^BtM$i=(`FOou>G3V$*X[7qWhqc7GG.igr4M^G:DRWCXo=?H-bW$W(TH`!
%$Q*_gAZ(:r%&bp+e66/Rg!_`)+&@3c(I#c7qP_s!/%WWhX$mXgcq7(p1\C>HmMdH;=iWr&Wm=re(0!KLhP'\lUe1/phO>Ck\09VO
%6CL8qC=-rY+t:D`"*T*g$2UaRNbY'6*O7Si)96OgrOKs6L74af.5S:$XbMNl1Y\Rb)LYFPE69'8eQp]R##=E>:fF,WhGlN&&>urb
%=&7!Ye4k_<P@.NFcHDBZ/+Xi)l$-1[2<K(d/us<8:hm$SA&%*MC3\9U:i#B9CC.CNlS\$_q@U)m(*U?'C/netD)PqL)Mmsm0HsZJ
%A91q9bfISq7.'hE2Mk6<ot7k0:@iH#=k+NM9.97C@Yg]0Vq^MKg:cB5"KI;F=-dGWNa4LdTV;B!f;[_b5-0KWOD@Ph;b"4&#J6h.
%)5S1M6u(IM?I=17NFsu0rtX9e)"Y?GhXlFL9ns)n#JP'mPi-*"%FJ[n0^\&/25t=-0PiKLQG6kRh3Bh.jZ1@7/Nn.X^@rCjg3\]Y
%^MOl%FD?j(lIf7fNaNs$k-_FM.*bptlGh:CQ9.BZOkFRh]@\]Q;tW:6bbeBAUubf!ht*K+q?n;e3)X^)*@!;$'tlP_qEP<TL!gj4
%3RX0^[2VH\DV;\,esW.9h>..q4q8KaA@=g<j'/_6F\(#9cY'^e_+d)Xp+M2[k5k67+-Y=K6DLg[q9<](()@fokr1]AP,hOUrD"6j
%b(5WM6JenS?I\]d2T,oM=SBcj7kH*`4Vp>"O.U*H^Ur7pN'CqNrCr7i?eFE!Wk828C@Kt8=1jGRf!d29h402(D<&2J:+\4h?"&5+
%-k:eb=-$DiNS0bT7/-tsk[4T"$J_^a!59YTE9e-^(JtYO%n0q)1;AFioIQ8TQ?&R%n;mVdTs$&Z8j^AN2nE7Xj*8_m!73E9/_X=&
%F('i.lDZ:*J2kXu#RGGdq'GntnaLcQIP%9MbCI'^kUus4WO2FG#MBl?V@Bj<2T)n5%Rb"D:6=Ej7^.-.])l'';@h`F%%%:TG5CHo
%dsS3##a`V:M9%V98mQMVlL"#?:e['RnNL,XYH=]TqW..>&<QbFTZ!j1V1-Q]CHp55oF8W1`6pJ7inT8lYDOl6oS>N0g`YCO5JiT*
%BO8)as7l(aiP>:@9^3pt\V]=r03OuG_^]V\KZ[0L08aTtHdu!MbhhG^3Qp]tlF5D=eC-ipRpcb.TG015ROSS@H#Tin`T[;N+cCi=
%PYt1,S&;&=jYd@aTdQn>^42?6AQeR!BNTR0a@t!$1-Z(^8Kj;2#u1"A22[<O0JS%//,b@c/(TSS\"=eX\4.P\aWk#;$-"*V.I&ge
%RqHpkFA:QM.>:BaTm(<IL0C9cEoT4r;fSPF?HNChN3OGN2@PgJ>;3Yo78<F];c`"h\/jim:BWI\meTVag.;QhJ[-t:;M,$7S]tkT
%8<e%5iVM?3?)UfNrHWR_Y2G/;aX]#F*A&#SJa^'PWmkOujtY;a6+^?UOFSh1B?a8gH&O,/:&#A!?jY(fe&u5Z^,T6&AS=Mb'JX]"
%HjP-V_cVZu7IZ,\=>s_$*rCr29Jg\qX3D3%d5,@4)60(@74T(;D2/tod6IolI6Fk1<(^7:KXDRGc%YpC]C2cHPjb9;PbPG0/5QdE
%HA8$1D+DZ7KqFlB>!IE76;"-%ba%?V]MhAf*D+sOor)5!]]a3Z+VEud]"rl=RiTdAd\nm2=-R_Rkk>h(^f"5s$Mq2.`Bm%X(9CT*
%&L@1*ld=Y5d/qS7+FRmqb[i#%FdCg#@'_Yr6DC-hW1@'g:q5V-IuP"P=[GcW55i$r5L[>]iQ;F,&!K8V?i?35ef?3LNN)\q2d<M:
%6Ybd&6MS/p?"<c0*7Na&B(bNr=tF1FZX$iZQFF_3`/0(me7-kLc4/c4nTGD?s$STKT3PB_\qV23(dr8d-2;"Z_l].h-#J&G\6O<t
%FM@m+Ekbe+.#F(ZP$4f@S\5ZrjmlMS#n`KC&eD0Lds6\%F=[OW=OG.*\m8rX#)TW3!K?s3C#SHKT\@M0S`2o1($Z8TeW_V*78D`j
%4m;d=eBpc1)RL)[UPEH#Q^mYhU^N3"RDmp.Z1H\C"B!DMCF:\6[58&.T_WKURsUUBj]A>QEG?oR>Sd%DAGb<KY%1-0e/!!B^9%Sq
%8o]>_i8J<_$H&a,Zm#Wb-MQJ6_gTn!W"mk08Ds"o<Om6""].percIP:]6_DHA?*=^[`/nE6lI7[[*8`0<ZH9s+`)g,9\5^55^Gf?
%j[@aUMl,tVC[67d\kubH(A"IGA9oV5A6.<FQ7E+?IC">Q2ShQkl/^T@ZKjeT`V#gD[h*?:chJU%\h(q/V'R.]%PWIF_:olg?`LuW
%/Iqh2C(b;YU\c=_7ak'ClE7reMqce'J0]"J+BP+e/_)R9%uN;RW8dYL;?#)[)S647R5UMRX8JnmUK6D:4e*(;l59c]D$A9F.IBXU
%Zu)QR0].$RjAn+FD&J?TJ_=T9d,q5sgh]AW6T,2XCV,sdqjZe$Us/Q*<DU'icH1dkXH<K<S<83bjs8"n;%j+UHZfZIMWI;I^!OA[
%,/a,@Qd),fm>*t2p@?srlPa)65k`8o3[Je5YWIq;(:e0S+mW;/@#XkY<*:@P\2g#LheUEGV#m<2%dKG'q16Ie69N,Y5o`tLQrc+A
%,uiI;/J<>*I-\-\'-\!aW+AeKG]T!JHE"fi6er0rfYK*^*RuJcj<ik+8k`HS@Iliulp8&7&+a#'GAXRD4@p7Wf_r^oOjL?r2<+1o
%o0dfIIH2Lp@p]c6$q0(=Ze4/1W..:o\)uqN,C]`3kNIfG?@!5VBa+AVHDd:;\Z7Vnk,P;(.SfaVOZl_lIi=GB"-"D:As?/=AhrOJ
%+^8Z<?aKl&<5pf,0P'FXmVide`uSJ;R\#'AMS7lpa&4I8o_r08kS^9&L[LY+);_)R'&,h]$Hu=.(,g%D;7P.iRoaN);d,EuBmFsY
%Acdb$W\0+#*@9JV)HK^M2e%QK+rf>4<oKJ'8Igg8&O.O[`V?CC)J`h$]gQq+&aXmWo"pTThfnLG?%':aYl,OfL:Ptm:/*g1URH26
%:k`OB9!e.()7"HnUe^*&7aIX5@dcOOgSV>/2D\b,Me6dk[)cDp,c"@2q;qo5jFE<bF+[2oh182c?a:Xd<j+?U]HrF0%7Ve]UjUm@
%BO^O#<h2O`3:4^]?CtE/b.CBO^IQn=./u((8oS6J$B.c]aaREd#X_gXbVG,"Z?n$9+9/T-;Nh?2N'dl^4m`oF<\G6hj7d[^``sgt
%T]tp-'4UV-+hsPIVU#P99e@gTKPi0lGF%;bnE&/jqM*nrB_m#DKu@W'W^US=\44k3l;doGjE9Qr<+)CPCpBZeEc<TR-6X#Eesc4i
%*&^QV2d22J>gd^/e`4EG19R-AOo%quQa+e9S4Gf%**Id^]QIuZVYm>aAYP-hZccFp6N=$Y-4hVPRBgYn;4<b*AjT6O7eW"l9R3^a
%S;,ULVH<BMc]]Pcl<*h,W$0t?3m:DpN=X:JL.MEF"<q@qLR2J+Q=IPqPIE:Aa\mG]'+#Zn`TNV^pBm/uO/\0+9cu=BPgJF.1Qgg6
%noj>YnoAE=#*b+?MFg)kNf6on.]WRdo%%24VAa6+H5YL1WO<"!:(q;=g,18_f,Hd7e:8"V#]#Z&/2eon:,@CHP78@L#6%u0Zb\UN
%L<N#V2QGQXqQI)YNN8rDKO/E&6.*pCdZh][2,JGaPn;7NWhrgK^/T8CCa<X\+ibN7;r5T%,ha2@9Dbn7i]_r<Jq$1=j+qLKQ3un$
%eTbD`_Ef,eB*]qL*4YFKj[KRka.@1-obK:meHt<K&UMKke*)Z(?_U(4q/K?#Q[83_-rLff`>`>KT()77Q;Yr#_i/peI>&Pk9tPeY
%@AjQ=\B5890'PKQJZ-A5;\6hC?8E#kV&UAYJ3H!18@]!')0HC8$W.*cJXPq[;QPhfP&c_sQ9dFaX<I?G@)cNP;G3k1^oG<[S^c*s
%CtSUkZ?lps-M5JZh[5o'5-9)^U#VQHJSWAR%Dg?n'*rYX.>+30bB>sW[;<'D-E#VE\m:4KQRTBpK:jAYRe/J'ajN\f1fYhb+c]6E
%'?e8_DNdDcM2/OMP+e218F8n;WDZ_R7kcp;ngg1'NG(6^+tZ.)I^:[bQb**_gm,/urAhKBVDsP'*QniP=%,$Zghk'7O4nEmRruZ`
%-V<$.C3UCo;FoCF/t7*_`,0[C]#7>q*Lo$PO#eueEr<N"[>_#fD@Vr&ht"D$E3uIm9;fgIoXfb!.R>-mL+@brrq*VkKSD2RJJ18>
%K]8(*njC'sJ#%g?1i('[BG.^-"</K%Mc5j/s,`=%lD[tso?osGCX%UY.@T>\`JCh(E^EBV>/=9iWCLdI<XL]3BXSqG;pIBh?9EXB
%\kg=Td,HSf4W<h1XX,MC*P_S"0o1d>POGS]^o[Y@)+2fG'gGXfWTcMg.&mn_Z0PEe!P[&cbjrGkX?i"d%6VfrkYp95j[%&#Y6Jf^
%*rcKT,S_8-L6^C",q'`)L>O*AngG*TVJjqk;kh:#?7fPY+ktX!>)/M`MLri;c*?0kTs;S\D83e'UELFS?1cYk%<[46O!lhX6]JMH
%6W2Mm[d8B.-C"W\U-j^cO&Ck^<\)%JSk9sNaf?]"qTWZN&W<h`lbDru_OiU5>\o6IIN="nT'%tTnKeP^0HWG-;a9uO>1hBo?XK)O
%OS>%mJ%p"\]l#obV/D941$pTclF*[5d0``CMVog1KOmKLQCAlXa,[,AjGP1-rT%>F4%1_)9U-Zm'C0jUq>OrMru%4[[%\F+?>6DV
%pWU4<p,,`n9RY49Y#&dd&XQ_a]qeo%LaLiQk%h7L\a`/q_ku3S:>BgraL&LGGE>G'=k.CokGZb&n_*3Oo;,<Q52Nul9\L6+ekX=#
%TiFS.X(!jtI]Pp[2,k4qJc*#UBZ3D-LtGpn2<FO0JepB+/$-3QE>P*WYo*&.!n/peISD7-S"Oi'`e@`jOc91Upem_Y1!YrW-^bmH
%jb?#LAt(h0NhBX3k\[?r)g<HB*8_[KPprC'QVe@4"b64@@AP41MIeOKn0.UrDH6?Ac*?n=7.uK/,uU2%l:fP50bXqr-&a9tR^18j
%k4TEW9o`KpH)-%L'^Ad)'f%9l$6&q;N^Ye5r7#TR*TN`q-&5/RA`u>+W-lXPZF#kkUpOUdWa0+5:r_O/[`itFc\UFpWb4lPoJE*i
%V3"FCrg5\A&\J^g`NM@VEJ-Zj*U:1bGr:%`/<[>OEX3Q_05%<=m(^Cf/]8EBUcaQHI@]_$Prc(!H](t]'RU@+IOoh==kHh>=3d.]
%N3gHF9dPL*6ajH>15-]bJ?\J`),=q9'O<;R*/U>C;>^tkTp/I9A3-'7._arqH6Pq.r/q`.,Qq;s+1M(4%j`$)Zi936+iP8,gQ*-I
%e:e>tCZB=71*5!;!6;:HdYq#s@3YAXKP\9kd]KeI%Vl2Fho6V(/_+=)I/WZu`_-R7q^DRc!6VHBVMp@E0S0<C@]'6XTVcl^<Dc/Z
%gI]Pc#`YG::5Q%Xc'*#:;N7MS^9)mBUn=9bj1H#a/tW$#VC5ddQu9h<c]j>"lF)[J;43/Bb<CET4sPBeeu)3$QSd1N79[-nmJk*p
%;tN!/JiqLaK9RX0f=q[(^H^_&n5`;t=`JpO3b8!XU!F0b?MQXh8glN/*e]0*Vu"D-3t0O17[NHnjdI0)#F3>t2<Z:d%Zob"UEh.o
%huF3E)`p'6K>Yc%0A@`o%SeU&`n=WK79(tka75F8mQ`'4^9(bjits"Fq^"7cF7kb"`J6c?+Gm]Wn`!^^%Xl?ePE\)[2dQ/KlK1o-
%4e]kKMW^A+9DWTnL\Na[:JHdF6J'4K8M/J*TjlV!Yei^!A;Ecs<HVU?G6Fg$QC%B!!9aBkQ`DJiMsJ<Djlals$n[jRA#d6\m+%oe
%El2=iQe^?sOoNo2^r>5SWC!ta(Y+j2d`p>P9(7qVmaEQmhCt^tY-8L5IPIU/T&c`*Lcf2JF+8V[apc^sO1\$.<4YbY:@^1EQa'3p
%%>OM*0t;U's&,hOLpYi"8=\uhe8N!ffn>g+\@j<G7-dQUX17!n%?jl4#:K#2!p?a/ZuJN-NQjlhntBWh#:_5>\jH-\jZMemrbSa"
%@R;O)1a(K?$JB>CC%CfIl:,qM9"gtUNkaq-han2H,'`s(HZ<UpqA!;Heg:9%ccfuW.2@YP^](R5.F9RV$1=QNd(?kH_2j[+$u%W%
%TF*9gONHF?O;&5<HIl/(b(r@$2*&^*'GNoO!*a-nUpJEmEte;7+G7XM\=l7q2hl'X27/nuC2%,2H"I?t#f4-Z)332j<0=B7nf]Gj
%IY=cB96rA5#:)p$b)jU>LkJJp(1u=kHN0/@$k"HNYHKj=aa1YBVh0XP?2Q<^;B)@uJ"Dgn+YM9%FC2U"6F2UV8`6AI<En[O#_a+O
%kj\-),ofhTVM6Qh7RQ=Q.8gL9P#e?+;l-k&A_!OQO]tE;`+%jbIgVm*/2t[s.AjIs)f&&['qmK_=sX1bX(>Q_>]*H=`Ni[n7gq:b
%M/OKDQ%WKqdOCh]I2H*W=NdM!N8-%#U+&!!NY'>+=-Z65G/I6(jD,H,mRllK1i?jSX7Qu%VAO3LootMjTpcqcHYG/4d+43J/DI&!
%^I3=H"^/=(C-AR2-1!c]dmkgTD7mf:e<]5h+fA:kPV\co&#gipng`q>IV95-D5'U"MA$;%(GS:n80OdaV"Uj2,\isc<('XXdTHG4
%-4*-4M%j'lL4Zhn#`M\SbQ1)OIXs/oVCnt/8g\8M^;GPSP^raOr0F#;LK9YdnEWe;.<fAo\!QZM@!BA[Pc4/KG-CE=Ugk]M/8]V<
%??u%rB96*4nqQ;OijSKc]\9<dI<DuWK'O#5H<f"#g`.P=]*t;Nc7L,\YK#'eF@7Tdb$K;c:`i=\9PE'Mn0KP"fJHc:..o<ip:01U
%)J)7aIWI.so2(Y')$PJgSdCZCUUmYG+S\lY6Mu_>M:S8aCD'iM]efEO,KU_&&sCtPG+30PX:($^:qMq#%bu<[%L_G6N)Q54mZNpZ
%nf`4WggR!Cf9u?n)*<Q;AGsj7$Sf:.m9l9mVCl5PBe;OkrG1]Y=f54Tp^68.VKKM%PhWP2Xd[4qceYlDmSrLF^sA1SNF/O+T273:
%^$,cp*&Ao>ndQ]sg;fA3/:XVZPa5U\+o(FnI`3q/L'>MM7F*W&"%?j',f0^N_3u\ViKq>$'-90uXUrkqqd,XDYfZ:(bGhQ]L:3Nh
%Wm:6Yd$AD@34p=m>3p,oV(d_P"rsc9^.o;/94S-53ADf31d2_q'L(XN=MiP'JokCkP!q^q^nG\Y&XpuV.NTHLcZ"B9`Da#BaC'X"
%V&<E,)igV+k%XYalQ@/3F,(lC`Z@;TT"nS2YW4Ra4!LLoaD[\<,POc"OoIIg6Ko38,D>F<OR=C:qsT@U;`5um#H(adI)J\Xc"O]1
%8`cb09qYAl'itR[,gk-)04rq.!\5@PJ,PI<.;#7;-/6jFgLBl@G\,C&hUI/AUcr\cA>L,aBV`O>8BZ`GZMW4G3OAl4(#;ua[0aZB
%d\^]F",6GCTp>&;;TSf0dGXbsFr,s3&iTcIda7YS%q[2Gb\g`XKE"O!V29<i-Aj;!>"KeNUNC&Cp>qhp]aUs400tle[E(=qXOL&"
%pmgV8AQbAGa]`'b@p.C7>YttFK2rqHhd>qj[7^X*k"EeG;s<Vngf6LLVn]CW0kr*#<jc9QY\lBZ3PcMDBde>A=iJV[*jq@grE.a%
%[&+A*Z;umfPmfRW<lhM.rR.:N!N\4ER[ms<&db.3e1)"*SGT$bCV00d9O9V;^iBdSltp;Y/V2lVGn1fB?bQ*mK*+KK];&IRei3j&
%hQuZFd`\W:>P7[JThhqsZ?qYbl;P!jo97]WDF$6U#Q9&X&f1F/8b-9B>J@Oa1-ODBGO,.1m\^0s1Hu7+Ir<I6fD*JH-[N86lQk/U
%RW[p\,QWKJbPI]O@#aZ)q2,S7I(!W>V$M.`JStG9/F].$`,`N/%21kCI@a=<!G"A?+o3Z7^uX+&kp&V#@(=M3+5$h9Jm$o5jX\Z-
%]5UhTW_:AuW;.K4m@gRMl6B4C,4:qfA0:aUDkdehdYGsJB#/6DDfQP@nl5JYdB.rhT75Y^QDq70jQ3QR7Sfk?Le9><Z[9.>OPbje
%1AN0SQbDK>7/%&]NFY(Ka%u_u&G$IeXu*jl5>s-uoorAr1i]rdijttBLt<ZCl*&`Q;Qa'(UD,"KWmrW,WY-pMY+*nO`37$lWh#M7
%I3F:W$SO>b+de^9ob?E3<)tHJ>j`iQRdLBPr<B2V.O7FNX64NIlIq>J.?kEY_]7>Q"A92lI[t+IMTlE,*JcqC1a_7'iUNaMS*C]'
%KlMq(1je:#plWEf(jY7n]ejdA-2X^9_#kkDjU=^&;L^("in:<P$_8?diKdk#kaSP#rlY3G(&((BklVZcNU0/+3)t>h)5780OM#2^
%\jTSMCL`#30PW.r#Q0]E1:$Y]B_![/S?h;(X%hCqF61U[r^gBUKnF$eQBYfQnH!A1J>LjCFO-k'$bHZ$YgmF`/cV?jZ92/S-HbeX
%i_P$1Us-)A16eN^WI0#f1`'8FgF_jJ'bXQ0ZU2S.Q+DjCAHc^]@]*s5Tt-G-Q:Nh>HRWbGFlbZ\\?Kem.NuCb[7iFY9CZrAH3qlg
%?Rkk)Tj(Fo/!2Nh[RD=H`5MAPn`M<_BKT"58IAVke@Z;TA'1,U`(`^8+.]`-qqU]_UkX'6_N1m:>#?==5Pf,,^_*X3UVbT4NM6-4
%C[2"'/sj.eSpB^KU"%u4_<#!60:=fI>#M^[4h4[=,o7W%cM7[&?XE#>Y.LIJ]h-5Hml3CnU_:9QC:3t6'sDo18ush3cg-p6.s"'g
%YIg/Xp9L+\3ojB;&aW:6R([*cXFJ@of<&UJo)Hhk3`6tIRfG&7kNsS26f70]nFdi09\ec#''9>Gh(J0"YD%Pi86lg"Y61Z]:lF4l
%.=qie16hZ<-P5RXIMaW?UMeh>U_<i3Gp?+s"qlf7:FJ6Pej17TQ*olV^sK'%LWi=:&Nl.i*:0NP@D0,Q.lBJ/cJ-I*6Gag2FnOB`
%;B[=.]#pH`.1sMlC[G[?Nn?M[c3,8T8Q/R7'&8R&:"OW>I:Z0TFO`Cp9+FCNE]b[H2atkFQD]52X.U)3$\;V>/.jtQ\!bTY&M!Op
%L.BfXKh?$0I>P^N<u4-h4J<DJCX3D6%S=d`gWm<sb([j3B9VkH16%XVVm_f=Y=50"'"J^f0a)[`Dkr/XZ>`AuS6'i*HP-Iq`H>"e
%7T0q].Qf-VbtD\aocUf0ee;hY?OW:'c0UZDocNkMD$<1>"TRS"C']2rj]CkSXoh8Z8>7GM0m,XX%.2jA;?&2p=+aZTOU8!JVuA_#
%-R-t_[gpZF/om9X&gpE1NVd$c__bdqZl+W1l^Uq_[lMl0&>_^hKh/25;J?#TafEnkIY:Pl,K%C:5,9j2f7J\oD(\`:78r.9GP0SM
%Qtgq<W5LCeY;_,0;Na>q9Y[3%mU.U<&O<HeBkdn2Z]UMg9_N+,L9`$=DG'`e%c*VME-!<uqBMBV<@\UVWN=Rkcpr$X\oUg`"dO^=
%W(1Oqp,>D^5Im6XRF4;Pm,j,#5]A3:\cLuk`eUm)oYO?X&6\kX^AX0&Bur/%psKpP2n"'kOHd;1^+Q3R^1tYd:JDL0;J])Fg*`3!
%?>QVU!ia:Zh+h&gVio1eq1S@E'N]tMLK,R)(*V;"?hu@V[-K(3SEdbiZV>5X_71u[i@j"(d;\I^Go:Xr'gP]Rd!3VjfVW#`RSM:3
%dA3k'd<T"d9C:IiY59+,gHHfA8f4GKI+398A,5lHgrZ72`k22*o>K02_3qTdmr6KF4)mplrisK(i\Ol\)TthuVpmD7U9#cl\8+Oq
%i>q<nh[gjNf//e;'ILomdI1GkLAa4jIq/JMD?(C%5.Gm_%>rj5&%s0j0Dn:(^[1jL5/7-<4m%1!R*DR.FGg!G7FVbMM(8*@FL5m8
%6ioejT=eo,7WMo)Zri25KPDd!UFL3>W\.9X/A"#;e`$3iJr<slBone4Z7a512cC/;5*F/C+2=,d)ZR08EdjJ!Pq<RukB!P=+ppoE
%Gr2q^a_N:8pr0BQ+Pia`0e"P'<M;=+*sU^hT2[p>Q;r9:jj2lt$:7A<Z[XpA9KQU0mV[sBI/imWn9@+MV*<5k^cb]Gr-bTd4mG6Q
%5EF/#h`gK8ghQh9Rk-p:r4JGCW("7JhWM&(38(tlT+1gDcM72D2q_hLY=FT3crI^(qtT?<HHeYH&*0+E")sS!MGA;Q^>V@Wi*a;e
%Qrf68o-g>#VUWd6T;L%j.b4QDFuLLM^=Ra!q8`L/a+`Dh<HHpbj0u^Os.B>B@8Pcr-)QClHe=edEcfH((5dU4a1ZhXL^Fi-X.!At
%^.r!dnDIF<<!6X9(#9WKS6@VI*^-;bUPC8>VQa,-$Dg-0?#g8M4]ZOeQ#r'=Z:5BCJb6H-Jl/<BTpfsH7TFRX2V*Et'EV;MQ%fN1
%WlV-</2HkLr54Zt&*mEKN/a=oS.)"@cg>)q500T_,@S@<LiC;H[[M`OGo`(KAO<s2nL(TD9WkWf"\-V>7.#`;/8D`r1OVNlVZ8.O
%":"igWp>G`*:K_i5k.51`'"1,X5XBEBY^!F_QFbl&9"Q(BQGoe8Eqs,S`f/iUBCR;f`FF:FbON#".<u,`,t:0*JPUb-fGDPXqZkS
%C0#aO#RmU$LWJo6>dd7O9R6=E^&&\J<G`I5W]2\T7@IcZ6tSC3JDuaKH%.5`B?H<Qb$g<]VTs/q%+Rt<)n=8rIAU%T>ej3UH7:l6
%f4n;`s-l%I>\EZuU8t?no&F*<PXO"HCoYH(p^T,LN?*S,4s0!)4Z*?b_TBQV$B0]LA;Vbr3\)1F>hH>Q7ZW=+U@AAOU4NQoV(^a,
%p^G'_Y7ThBd7*9fWmt-)AZ:R:9mN4jc8[d_p?9FW"H5nVe4[0&IZip7NlQ/&OQb(1[cjQD\#i]>dQMP5)/AcWU.%1IbNtgX'lg;Y
%[%@Le'Dl<c5YlbhJPqtUNuFfL=7,*05Bk?ejUggG>C2Q#Wu;S*CS/:cX"K!'g>:89>OP50G]#>aeo.,]`hRC^(DKTYCZZTg?a".!
%4D&/b1i[]L<Z8U;;jt9a96/=N:mm*A^J0E&j:<2=M]SL`,/b0fJ,*omiA2UIaRb=P4cKlK1M#h:2'&;/-+`:ARnMif\La-]+fP_F
%=^";bfe*"QTc,a8ReLR8C"8OBPPTe[qj>MiBfE+g3$?YtMKY15R_#0U.<E:[&4PJ[QVJC-'Cdh0U8LgAeZpU]romJ&6`+iaGu,R@
%!>ICGi/BD?&A=9n;'j`./WML<Q?E%&[H1QUBp*gbJ.q:cTnTd=;uXasX5!P%UMfJo7LDIAg9o,7JmgS4Zi@>GGopQMW3#?s<WpFW
%R$O9>RcZaaS`b4'D,Z2@$;S1:.E?3TMb;]u7ik'XmNm9jbLQdg'UVFf?o=.,49oKP8mhYCF/m.VT$bhj0Dmc_cS6!<$5<i=d:&,G
%!t1cFB\3V=1bDm(3u,[a3+DZ8B6Y)PEP3GaJIfmppV_;T%71?-Aj_EM-(fd*kf:b]eGJQf5bUn@Qkc0ESgX57Cj5N^KP%,Hf'O>3
%&]GQ'FZ"\<%,LQmeJpZHc"so?moCH*WJAR3O7sd**NP5V3>JPr?CoKJdP.Q+R1DH7m:u&25_K:b$B+A+M=cQ,e?8*m,*kW;XSE)T
%Ue29$[og&IXC!4k?/?ISpDpLc;s07;QIp4SpF=u&.%7*?[+4C\.A]A2$[M/24*mD9YpD=GFX#!>AT"TiZ+9mc:;?10o1bcX"\V%Y
%"1?:M71$g<(LEEkK7*(tj>PS3cr%KTGbZ*rCdM-MBd@Jj?E'u?GGI&GB=('B/`OgM"_X$V_KUN0BO%qk?Y*#?eb@5"kDK8WmhKfY
%-<5bjqHKTZs&kC7YPht07u+'U<Lq0q#$s%5Qa46cq>8C"9&8lAVR5MI/*JEPD[/=n%91,hRnfmN&YP\nOtQN_rG5=9&>C=a#O^^a
%m@ZP#44DPOot2R8W89ob+])]a)R;sRWE!i&0Qc`ohJG7O2nlbrhl2`V1.57sRhldH'((/G[QJ/Xb/&Q;FcUIio0PeCToSM?)6t$_
%aH/:-7.?c,$pFX9HePaD*P+`uD6;rC_i3g(W3!E\W!qAf2f`&mWEjNU[9hu),GDr#;7^du%^ge-bT!!OQ#j.3S!"pg[<m.a5Ln"]
%_%g,S"`Q;5WYJ:<NIQDLDGk7R<PcC`_E@/An/A;J=Ri=8lhAQuV!#HtSIq)tl]'*Z5sM3ge',"^g6[n3SJ.ZnP$bSn]iE3\dKVcA
%nE23Y[$Y*C+pb1]`eYXB'D#-Q1]AtfF[-J?$=6=<6Y%hie&fOih8Aic7"eB#"^)O/UOcjMY[jIk2LfIEC?],=N5jYF<[MPY/^8""
%la-mi%sj`\DT"4dB%I)^D,ro:`Z-KcK[FRY_<RT7VrT0@\a!-+,#:S:.)rXH:QR+Hat,C[i5@OJq"S[]*/La6dKZ,J0(r'-[8lB,
%<a_^Eb"Jt6&,lf23V"SuVU;tOog0,arG9;MnqXedVqs&U5'KV*)Z-`i9V.1E1VcQ#T#9Tp%Ol>cd0`L%Qhc@Ld]@mId`aBNMCaS$
%iMQYOQdmFK+k-U*`4VV`@QO)7mT%-ka/VVLQMtHq8&CeM"5M:bcsY;ah!u$k7QA%W?H=VQ3C+3Y%j5UfJ$1DLrE7QdiLTgOaPKWH
%PeJsNdF]HpLf.P(b,dc67;LuKLq52F?^&T_,hZJpP$arJ>jCsF+*Eni2XTm8!7+ml'm5<uUf!tj=A1KJ"?_<#<uf^C#@Q,%c`Ab!
%kOYeujjX#DKZc=\-o'QJ>>C*AI<i-+l";NjCjh<m1M54$oh/$u$nV0pl]+))Zbl8_Y'9ss99`Ppi/"KKGsS.0c\]KWIP+kb=>=I2
%e6\&pDO@lZA6`&Bla]X0\PTN1MD3CkRYpYU)[Vd+G#M`s1=gG/U,-)AIuM)V=YLP@,)i*"=9Bo`?c+D4nn(FgC8-l`*AF(7)9ErZ
%7msZE'h;QUs&/90CMnb,?Xbp5=a.,/2]-gbc?4%e\9(mNGLa!uHhi.HdDfa1gt6_eA\PI,C6$NbFLsNES@5Db&SYZ*EH8[%Z8bQ-
%D,D@#Hn9c5X=6)9I1WS)XeBOkO$C!Y+d]A2`Xt+=>GnOG@@n!]ceYn?*$;`.?FQ,.cHL"Pq1.*JKiKG_R4KU)bK2FnJ7j=]%62.B
%1&Q%pYK&7Yl&s<VUR%1VN0h(tnu7Xs]#9+2q(g'Ceh:);HYi*2H%8DLj]mJ0`uh_WLok3NJ/rAf-!rNnnXhI!b,?^eqM_^$=PI1D
%0F^l6LC@2HU&g6Q'g-;9=LX>@;:F.(j#$]P4'PO\$smVL>+([Ie?oT'Wn!@Z^!LTHi3X#n*9:[cVb'.f??o`64cC=-H*1%h*LYq-
%UEGh6n<+=J*/R*MXjs>S5Hrb$Gsg[=0=ouHagXJb#f+@V=t%?LQ@Xm5,&T`%.pe477^&nHQ0E]^1qV"D7=lG@\-!oJog.Yd->lcm
%L"DsH-ZnL]Vaf+bZ#8J(mN"$F$iY(Z\PnO(3ZRCso%\:4T<Hs(3W3B*5tE!Y.+3C?X>8'B-[%k;!0qQdD&tYNXpOR?k)VPEb]l-c
%GH5.=!qX&OhFMdO\1+srFVO''UP:^=$uAC>eYuQ4A[(%dWl:J@NQ?T^q'Z?oFiL%W^q$?H$.d*&ca]mTT7@LtLUH6QAjR5R=2>Ls
%@G0WPfcX)%q3mH-"<>#UTl9r-C4+'f&O-uQCh`f)5!`e)!1-s0Yo<SLN`CZd<:3,)%JCqm,T\@][BYAJqB$NliC$OJT";c&LrfH]
%PQKL/E5opD1&M,.:D3u"X]:F5C)b\>&M^\7^hp)KI2)eX`48m%MZTe$cE1neCq3Fmlc<7nI>fW.p)gopk-5J>J)BBf.Z(,7Z!\^A
%KV\gY#lZk17hBDLN`)P^\T3'!1f/`9.8^I]3$q0Wr_='V+e?RI9*]89_uEuJU24A(*YhL"J8CR3,_A#-dE<"dW/6F!25GgL'2i/8
%qT,o;\oQa"5#ap/HIalWEh_4'+e+\_$K<>CZLg$N-r)j1=.6,P<@=G1@-Z*j<1=5Kpg8t>:?0]CS/=%L8:abh>d95Y/[!'ok>aU^
%8Z]"::M3DePd+=0=7qRs=1PA75H^&]d%2iQ<E'qM>Pr>F32O>5UdDdr$n8c1<D]l7MILt#i>5IEb,Stfo`onoF%9W<F&gWd3orkZ
%/Me7[q$-_!B*6Os,i0edX!BPD(Vm+.$M=BlC?*U&f%H-FVH@Y1C$/rY6.r!S*WS(SS=W>QS+;tRqp+CXH#/hkAO/4''J6YbZj_ce
%VkZ_4*3L\h#?!^!5)ps6[-+2fmLk4D-4iIHU2YH)>\8E2M4A&K<1a`$T95dEbH7Lh+X)u\:J'_gH28&i+TqVh<oo1SQ`(^+SbdCO
%@Hjd06\G6dom/(@C`07]5D*Fc,\;n-%Q'1n1L,\SaFlUqkY?(>V)h"mm:pq-kQu76dPtM8Cb6+,F0ONuIW8;c*#gnbmT=_L!.dZf
%?;?"&,K4,O.c-[r-se%l=69?&1+VP>U&bRA:\ntF*6n'jic96t6,VPlB%<UG_t=>HnC&7e6^b)FY%8Uq?agc;qMmr"=GP?pJL^oI
%r@5O_p-VZDEbg7k8,\d/#i3g:K$Q*HJm:G.R'![@SZtBI!$s*#C-9gXR^P\\Lm>9RH1i0uqXa>hDs?4r<A2D>#SsH"H9&qt[Q0$h
%e6POOZ&R`E#k%=6@u<#E2RT9Pc);X*50T6?T<'3@JP/M'b>kg1EsZ_m'l[;J5)fk\HI\f/h4(:+s7']V[kY/&\2EQqhFO9"80O_*
%=\e#t3ir=@.:9`]=7ZRjF2`JKs+MHrhePjkIYo]!oXtOD]Qo'k4X7P\[]ea*-sA7%fZn_f2f+o^^V8R%a-($pdb>GnJ#Ef8"#Q/1
%*O4,$7XtI?dR"S>e_m0D`=\aiKhFaark4=Tk+3s$\i%+oNBUL5)&_Dl+(jY(pkn3Z.Jc<5S#F=mo,3?e$:kMs)HHhXdh^E6";s,>
%$47MhEKN:jK<%SOb!DE!+!%*B^?n>ih^<I-Os=2YVBr2lG_1qke^>3T>d`r\;l6Kp-5[$s-1rr.P_6RN76BWu+V<=<0mp..E"Xo0
%U&Z(;G+0CS.3GKsC$b8WlrgWs\#>ihjJC"&kgd]HPJ@M#:pS(MUUl.GHS4DKbF;71>t6ch4STAkAkIM&rNeRYTEBZ8k$*C)A!2CK
%^-W&6<=^7$TXD))0'M?`.."40H[9Z]"j/aibO1u4'SRUfgE->4lB7:sC>6lf[OWO'Pt$3`ckr<W`UBBi\h$HSZi2'sS7\*6g2=0l
%jd$Sq*h;e!H:+dDU(SnI79]D[``gj3n_#o[F-dj\Z&:;uPVtWZ\&14saa&cmTol+62N!D7[c37\88k]<Z-^OP0]Kn@XEeYO,-TI`
%r:%>MW>p]gdQ+(r;-A>11..3PY-+]b-.hGCeTq@b<DC@]c9jtF*Emh=)euCb$TTp$]7)/be.^D*+NZt%N?''c35c!5*-%qXm&to5
%C&p8[rOfDF(8m/<F#%>AStLG0KedZ\9@#eVa?%`^/E478Q\P9m1Z(Ag=rbgX+]TZg^`&*2;cnIB2gNk&&Jl3a7pTh;+@l\%eTs?M
%";,_as1Y4:WMp2$>3AQD:KhJn/XYcgkFr(0Tb#11E^a3/GV^Lu'?#[cS83.I"Jr9o?Q,X=l(OeFa:MBMH'nNn($BC[9fD72.VddM
%[rCtBCAR^S&cq[C5unDAG0LgPMl_FrX<ESD'%+%H41'!G0G3Y,N^[B-*-h?K-&efF^J@d%?R7WKcB?E?073L.&%P%Oe+m<IQQ*Y]
%(["jU>+6=/G>=MS:lf&b790;ogsc[LjfrrIH0P_DZ0%_*(9tM=L[[OK@BPp$W?+r@fL'r.JesG?CH??jPm^=*f[01f9/.3_/I-(Y
%k)JSU9r)3I&4k3%ZGjpTG85Ot@je+JC(]-iD5W;7Iu2$3_WU!Z.(;Y013D*SEe.-.Q",/*bNl=d@?X.S4p=(BrSus/'76"^9eh@M
%,ek>MNH*tI]qj[k^dQ[3;dT1N7^C^]lM6`]_Sh9UFr0LYK$!!E=Iee.jO>sl0Y?9X*\B+XJC)DA(EZ/l9"GGu)<P[f0YT*4`?)OG
%+qEAP>4YT<,L*8qnTTE9f7k,P[g5tR*A\14QGAUcD7)k7`r+<7FO?.=&e[IGMPV<PLI[e.Kp4TqL+#DFcP!2aHLbSP<if,1H;m-S
%Yl4Ol]T:#4R(.e)C-EElZHW"Z"\0sDR."@hY22O_'qP,;O3qM>ZcA\:+[q*Da*i$m1QLLJ$%)\K;p@_cJ*o&`\F4e:I_b]M]3jUm
%p\k"7,'4u!r)uF%TZ;?MbG/'p-U6*JmSa$g6OiE"g</A!0%D@cpJB2G:d5)`_@KlLn6]B_s-g.hG1S.2D'GA!=.UGGa8i.gdAu@d
%6"jRkqD@LZ0g]mDpIg#8nIPUtgdu.H%*b<,BPKkB2qUJe%re<XEbHA+_Y,^;8d%NQ$J:h;n"7k71@Lm/jUX;0pKk(M2'9uc]&f1O
%6LM0@d8HB?E%cY0*tq?#0e@NFMOSk-k*Rhp,jNd3<f/QfotF\(52ATZS@F>=f@O[2]P$U++!`WhQ@g7L>d:3kq^6KLL]!H):b-\Y
%qmAZgp_P"okN`8ka#SZi-8Z8;$lW%8$\iiN+`o4,8$C:soagXED?VcoF!pumO.kGqm-B6%_eZ<;O8npg\no_I;l;XdOqmmRlV:"X
%AM+ieG@3b%\S=<16doconQ*<89M_8o.GF[Q*nO^)ZkSRkXX5Sl@>,#mU%il\p.+ltYD&0U_1hCd)2-NhCkn[g)ERB(e5i^Z2_0Dk
%ffTVta%K`b#Y4g)\Aod2_I!Ddq"qr+2#<l%WqV/&]fK8ro+RPnl,sF^W;7gR0n-&5;[N79Q'ft4Vb*q0</MeG8gS5`e>4Rf]EJ*%
%5:5s`4l?S$_?b7j<`)pY]L18!$<NoGZV:#.Ynb,06m>(,ABmGCO=i*k,m,\"2'o_2)(9Hce3NL9k#RlRjnW!NT50U/fAF0nNgZA7
%;W,m-IC0#,UJWni,Vi#>.dnU3Q"Qk&W[l3@kBrd55-tshL_a`I;@FK-n1Du7-0T<Q*48:+M5o/-Hb92!a>Ta/+U<neL>(ETQQ3@A
%A4+ABKW7L9-s(cCY3]#:g!'0TZo6Xn<B8(NaEI(KdgpgLJhaB&W8+Jm'5Pfs.0/n63BP*Nm:?HJ766XT./b"UBk6<;#,1j7_fm"s
%l=EN>NJR#Q:L-<L5Ld[<;RKF\WHGHlBGiT7#K8EfJqFQf"'#%&gI-n5qEasc*tJe1-EQDi4]6Y%fGCWVl=VW)3:mmg^tqI:q'`Nb
%?_1i(OCgMr>7g&Y6QEH(oqiMLf?-Bp;dgrjWgP?2bg?jdJ,6fq?oEPcog=#?b5R=0^pud"]=X8u.[k?8:deI+W*aKjojn=[QR:\&
%@SQI!,([LBl9=H.om0r,%cRD&/nnFh$0fVTQ2$RsF&^faH4\fmU8#+&?Df(a`Wn?\Bq*eArH`Phfn6:H/$.R\;>TVD5U&=HR%qgI
%s%l5=?$:0'"ERW36Ch#P&GGB^!>IgE6f:#b'&)qO5qJa*:.g,6e(g%on_&G,c:(=3j-"R^=EB4Q7ta&8P`E>:Sk1eP)^rfuW'FGK
%VcI;@8#qJ5nk3Eg<:m))MMf\rH:WqM?2P)<5N]m4eopup%]j3N:HStM=+n<QcT@tI-%\Vj]KR.&<)2:k.3J:O?$hL0UP`i\+_V#,
%)l4]S]B[49gQ%gO2hGTD2+?JR$.KNq>roJP"H]7D]@r)32#?:V5AV4+mu#`-8B"BmCU$^lJN@$?k;EKY(3[]*Rb[RGP%@^jU:_q>
%_?j0t#ocLKNr-JCcN6">H9s^8*)2<OI/qLBP[r8JN?W*7Y'9sh1YEUs[dBdK'8+Tlnb4YF10NspKgYH="Xu0UBdTdPH/41c70fte
%2kJu[s/m1OEo@!EP[DDnBugTh:$@;L,5n&YUS;J3(s!t>!<-C3Bk]oDMkqit/g;?A'p[Y_l<C?p$NpHuHT27^bm%>+UHJebN:f``
%hapGb6e@8?ANo/&%W"UMjTn]M]/"N/m3qiS'=?_@l!p']%al)-a/\?,KEWL0eu-k>*'f$a3&*?;YEc&J6!(fMqkNplF56[FW!b%a
%"i6-D]BPD8r+0S)'0e%;`@1('2I2,LEDt5RkA4GE7/0OkUo5?=+/LE+/lU&4ACS:l9!^^EJ7&Vg8nf5<et@`Ir"*4k+s?itjWpn5
%*U<HaP_ka#pgteA(_i/(SBu'#aAa)b`9d9ZSYdqqbf^#OW'O%"5Z@"QWiRlQXbQ[Pi`Dts!leJNED/7\L/\I"p?Bi4<q5(Il"Ct7
%#/,m@j@"V?XP,VsGiQu(@nmB7?K"o62G^K)Mt-&A;4<hn+IQl%S5,ZDQ:l5^ab#cj?]/V2eNgaXQ"[8@9B`Fuq^CN<VfGTq#`SC<
%lbc6HO\;Xcs.i>lO+T?Mnd,KM-Q2c+7F=\`'"[)Fl_d17.LF-GK%$MVC!f`El5Gm`3=Qe/r/'%]>jlcN/KHE@e33Y^C/;<H`><X?
%*;HJK4]QWMn4\A4PDW:X2BWHE)tnH?F?q6joX':`>\pS9\ld@!ZClB\YBFnqOIs7*`rKr0>986;frbY3F%4YgOn4qik3ptZ6aQ0"
%W/8?HM7R(-cNC%g0^kLn9+(mTYn7c]M[i6l`kDFfcupOeWWI6i`W_0+WM<725,GP=I?UF8Lm+tVe@LB@O.2Q@G'r0g5QE0(#GXVu
%=6FNQcrCMurhcATk"F=?N*OKt3/&[=Bi&VHmVa<<X6/hu++#C@KYDmm'4\.,P[n?N\LH43P"NsRG<r3FQur>_1>J@7d?*W34][Ni
%:a$:I%enKIe]e3p9q&ll*n.3#=;sohieQURSGcE+[H&WtM2kQZCBWXS?WPf^mF'Oho+NND"'Vu%9rXXg+lB\,CKjj#LRAJ^CH3bQ
%]2DHa?AdsB.=P#Gm2,^d]TNFHJ\RsGR`nF2P*1MgUr]S"@,rD:h+M`XC%*ts^mmhDgiukg[;*TM'p'6C63hqAB_B'3T;cc+<:*7%
%AK0C(.QO4LRTV:0;+0r:=<@SGM?+&TG%097:VQM_(^P8up$&E17uV*_]JQ8'>?jdj_J'`'<Uh]IcSrU]otA!jjJDuIU7ea/V3'mp
%A7Dp>QcU[?Ungm3kBhdTJ#uB&4%9WpR8>=7@EFh6LGP<)$JJ*'S11oVS]]*<'-$E%`oobMiAE?t\7Qs^7r2=)aKN?3cc4.0RJNn$
%>!^cGarS,8m7TXDOq03A<&<P]oD\'Z`M7XNYNcb'AimhMA<<'h@"g,D'RP1PDpW1*lhE)'5VH;13D$l-E$Z=&5@-k$<^oU"l[klm
%!BQ:(msH^FW@M3l3V?+C.QSHRCfT^2/m7fn%Wos0D*\qjCL91`e\tNX;YH#]BHdF;]i+b:2);Yp/+CKCqDrh-BI"!55t\iUP(P<c
%-5A6Oq_j?6RS6Be7M^"B<P3@-,6"^97GC&+_rp3s+pZC@;lh?m@$haQZC\ie?0BXVX4&24ED+.)0,p2U@5ni`;s.,",UH/k4OB*!
%:8(rQf+sWhfmYuo@=V<=;sQX`IJ9Rq)^?RP%%Y%G<WKfGm5?^;>!$O1nlP@MYClS0\f,-XG-,R<]BJ1T8i9X8]4TXaeNqAo`9K'P
%Au\rckKbRIk0n:k)D0[FD#^Kd>U6f/mE9TEV9`cJ$T$D$BM&g`G)oY4:NAZ-8O7O!NjID+Ld5SL;R[HFZcPrUX_KjRX2'oiBYc8O
%4DD:dK`[9$6`J9nKrG)l7m/4*k19T+>dO_!N20fp<Cp&*fJZC(`BL:54i=`JefL#c+>'*bS(<`'6/shrhaCg"eQjk&_U;$47N%Sa
%L[.4@=+49/rY/ECEiW5)RDuqbgc$*^gKgNE!mSCahaE-V7hlc&Lfcp(f,m80N>Pok2&%`0>b"P]i/rE(as\![G#'XFCq(*t\#"b8
%+N;k5IE%DS6>&On=]K$5YR$#$MMl..Y;.&gZ"+>rRB9tZ%Yp8(r-Fb8l7i]^TnUGHXc"3f,C>e.Of;J!_alObQ\[*@B5,b>'Qa_5
%K"c6nL-19T!D\*;9DeQHk6eU$N@abD,uC8hf)kYn`AsdV_k%UYC,jXW9aBGtA1:K,qo0Jbf[LSEl`QL6Y=[4'1=9<E$&hd_eXV.9
%/NP+H/kcii8\P?;)n;M<kkOY?g]\H21ID6>#1;'r0K+,rPE3D8&uu[AXuI$@oH=V%XNhJn:FG"]*-6dQii`YtLRhIVZUAC1Zs&ut
%dp;?oW]+%>%&@igY^+nGPJ1!$-Ce'986eX=3g70H6PW.8OBq7d:9bsmV+pVk3g!B*,?SP%KYW)+pt8Nf5S3JY<lIm<l-aD2dT3f$
%7qR,B#SENlKW9J;%Gg-S:_$=\!Ak-2d^=]V7e?6c7iof0LdGJJL2a&`S<dU`;i8\OYfcheP$#k(]\J<XAX%'7d:=@WZo[LhMFJe5
%A`:`U+A=s-m</FeXbWoE!J1_T#3_9fkPqI-HPQ9DUFUF*&5^`h&al56LMHB'8go"9'.0Pu,&:<>nrSqsPfFQ6(C6SR\O0CM$87D$
%UmaC,#"?hlAEX>I?8!lW*^.DdK+l`cZ-GtP_U>.6N63_WWC`r]BW-[`[SjRZ.&6Ws%CL@OBLkL`ISIsQ8LWiD<hoU5q18hG1_C6a
%*``c1:hgG*>iP6!TW)&-'<qf@C.&S?@?W@[\HL_B<=^,2UFZ[-6`AQG:jaIH&>0^`Eh#(Pp)p@f4&a'Y/1lTsPu(^_KX6"39_8g/
%E?1D:%n000^d2NS0?HU)qQV56BHb#hBnjDI<kir,\uRQ$0m"k0<o"lWb\[g>3<Ws5ST&C&[A#pqVn^*WVf7UGLqL%%668CN)/*KL
%ItHU_nM7aH_-bVs"W(0sI<N(Xe(3qDg#8Tg264sb'cp#79pXp3MfVdfe%:i+d@AY72d$cX5YrDk-jl47HaWO\G&?DbLO4`dG3_#>
%Yk3FA9Rfn@<__l3GF!IX"?/uHi4gFYFo;'<$a[$d<7"]PC'Z2d%dT=CULmbZLGu/ATceNtfe6W(AYNb#NEqa9)_Jj,.TmlLXjd\e
%8R`MZO\!X%5flL@_J`P#W7G3QHCX(W_MH;><L:Xg$49-eQP$Ml]`sX$r:cfYB*C`@m8hi5BN8jWE&gdVkUXRP`)ct@XjJ?G$^:%M
%#H(Es@9^2*5:.Su'mEZ9%\/hNqi'.q"L'EH])dDlcuj5]25i$!F[V$,Q!G/4B(rgBg)+W,i8[+<`9eJ>gQ"ec+'$5m<ohtl%MB5]
%N?CSO?<5q:n/0=>&oY#(PnJ:FR,)MEfnlC<'Rc)F04tM)bK1Nu=eh15_`k(o6$N9=d#c[WY(+*S#LnHR2Ye[OB<t`^7$(&\-$#>A
%(m1BBd;_ip6Fh>fB/F6'BS:>li/-N7&C]m83[3l;(KETlJV(MHR<)fL61fmr)-AX'?>W3@r:JqMpe^KGeOnS#aAud68U&Y5Ml;36
%-T<4@V't_a6s-8=LUDs]S2(3NSTu.49'cDdAC0gZ.'`'=hU9b_9t101gEAO4dctmS;;SDT0+*>:`BD`Q02QW/d*7!?;=eK%]pljZ
%T[af^V]_%o'67@P[6PR^EY8i>Vm"n\bNrgA'BtJ"$kS<UF8unpFWt*0=Y&R=+>M&KXpK_f7@Y!eL'\r./W448]:-MQUcSGu_FY"\
%U3P;c=+-(Bd1J[[_RC!)=O]c!2>+c%\5X[;'5r&Y_9``73t#FS46df"c5?"Y`]Hpde5__]Q3ErF^G<*O6eL[.+DR^rb`'u:WPoMY
%!E3^*LIWk3kHaRDdqT3HjAHXW[TUe"OV%9@fZO7>'g<<0V:aX5QTSD:QF0V6GI::=\K*N.QIF^`9n)s9>ekWaS#Va+DUL%r]_&US
%GgN@#7#>\dmJVHJ<cFP,09nFWYo,3B+/%cFIuFliT,)'Yl;E=8.&uj-:3-h1"]/-qaY*,^?Z'i,Yql/+Q<qO6Zk6S/Lc_#IQ%OA?
%*K;7-/QOR'?/<]e*m7'-1A4LDR[+EJ.Pt?nY_=^dmC3qIP6?a*%!/[,QIP$Yh`OKXnbpqJAT$oi;5G"':,CV:Di:+*8?\_KU>SnC
%8>HRI.j4sa$3@66G/)%N["T8=G#e$`RFAgN#42RHSNDR@m^0+u5@PTq<WL58E+?MHSfID=/)F%:'$p4@f<0[O&18_UPuNP=+Hl3D
%a3Sju;j;V8bd2!M`NFM;&^,t],h04UL?.?:k&1>B<3BYq&M,/[<K4A?@j`q\G$cgF!IJ/FQ7`(Uef7Wl[*gp'AQB:4M3"_$!^^>'
%Ir#WoRp%Gofel[PUP7KcjNK)B%='!eC/mog=!p-a@K9tIV/>>l>j:_@k%#H-M:-u=qRCdh9%qEbT$<[J(n.p-,3a5fEhm,rctmol
%<^:_CAhiq>\QZ@5GG![ugkn4K(q5ZNOOD/1S?aDC`,kt7gU&L-+9(F'21C6?-;;k-=Me)'5/Ya-YaJYl*I/OZnKE=smn3Ru]"kKN
%5Ul^t!6bC*#ZHsu-JSbEj2.MqV$7@p&5@<$oM#,%b2&=0&5s`7E%af>&urZjYQj9pqTeHA&+SR99G^Mp0fuQe7fE@]^eCP(&6<72
%DMBWN!]n.f;pK\W0/15dcML6`SlMf1pne2s>KD]o:m;KXOY`]3eqg]Ld41o%8mb=F/Fm0u<5Jf_&@UReTq%/%BWWb7;k\5&#E5Hh
%JHpf):Q6(<9Mg?<3:[l>$gFhX:03Ui;R,_@H8H"<BI%e85=V,#F!6L?Z=o5g"Z<]=M'`X*rB,W<S`,q.?;RZ`eP9aFBLi1UYX`lu
%Zj;gl433hf-E*0[Oj9>0Tuu*jJ_V,8Q_#WXPrNRA,QSoO\879STI&+V$df>]Q7-,]IJ?NcH1[=(+R2U`NNm>UjBFe.6L&)2A%DBU
%q(SI=!cHfI31NR0fn+nISi'n#[9Bb")M3CKZIT)",PgV7=1&o0V%fN+]*f`te39.mT.Pq-cKlu%en1:-g3kG"=@s@W+u<,1)U0HM
%-k5\2`]>MiXfASiHOPTBj;D]aU*a!&lF##nb#Nbn`K9!uc'ZmJH!ZEol6A3Q$;W2_X_cspo]KoKiP`K9:d%Epot(;R>5?Q!:qdiR
%W_$l1gbh^Yj(4jLf7B+>/CSTjX!3=Spd3/gYYn%hpO=Fd!\R*MF3h1emJmGDOAo*/?72-&_hLc$ZbuNdR?;Fji(:4,MHtN)@#FQL
%Xg^t^'t([O_fC]Yb-o:)\2W`E@K6DeaaoqS"O5'REt^JGAh7)k72,Njd&O$o/UsWb0IkIP8/_8k<M_i]e)FWB2L5aeQR]gH$'OEd
%[Y-8f2>03HlH3P:ZXU>5(%WPdWOq4Qg`[Jg3:K\f5(1ui#t(mfg?0:\V^+*<O9GndL/#3(gFI$<g+skV-n0_oN%_*=$&;U%GUVS"
%r1?QkW6pU7HoTC,@hHtO'R'+Y>*qnsLr:K$P_2"N!@Pf=#VlA\:4;:RL+?(]\klKsQ\iJ3;K9*V)c*QMImmhHisSYDMNk!#AUjcV
%j7VqtAJ#0N4F&^.'9(C&k5:t'aCr&_C>m_p_Erk$-Ne!9R><7PW*j&#PtjFs&k^1;)G0gGjgb@&!$$)sF)>-!^b"fm)^O;#=0l&q
%?ogq*/4tmh&F(9UM_#]=0WFt1p*]t!-n%FA'O8P\nY[abDE'l1J>!<(@AO^6j,(/>`uh0-k&2mD83p=l,%WQ5jX'dWe7lLj9ZL_:
%Q`d??KrUbs8NQFGYCQ?s\hg2A(^!lR"6,dTNE<0f(j[Lf6QJHm(fXTcXE8%;ZuiESTqSb/Jl8lOD/0SgMhiV'L_]bg(Oe>;P`cCb
%1d`_p#Vp(,,R%>%ql35aON4>%CXlE,<=G>(':Wd#dK'f1,)YHK:Or%uVJ#1@9gf'ej1u+pZ%=0V;^_k?]'aUrj!Yk_bc!m%mIq.`
%q'S(i&_<A!f-)F,0qEqL6)i)AVD'i7(BPHYDd8XsiP=n;3DIJ%V8q>J$oD7--E[1CkBQCa+`MU(3@M#^#Z4Q?ecENCIb<$D!BVNk
%6o'Mh2$DfU]Ei+!'2_D+!jR;1Ds9.pJJ!-OnA5kTUMb\T!#QCuQZe@Y#?jJL0i\qqHXn^[jOu3#Nf3enFG^]KeFN!\D#bKFU$M?l
%_orZS;!,@X*Kpp(;^^W-]#W!3]n315<$a/i-H6uq8D5Afl*g&6SQ,5<"P/u_,Kq_!i_7Ds@Q`+XCl4<%)HE:\@(K[Y'**8bP_p[.
%F<44<D?I+rJJZ@r,e%49kR?`S\LeNoQ"0/4+9Z.g2.J=n`Y'O`.d(IJCM:kWrI$DHc*"3c*3Q)*!d-'oo&t24E5;hWd)[tq<PMJL
%Q6-:Q=g/g2,/L^]9qmJKC;Z](@N4OEjFWF'*T!28'J\n\lpWk[a2nXA).7r[PFeebTCoI&a6['O[+!)DYE>P&Z`<]#AQ\:XU*_Mk
%FQ$4\:c*1ucBe:p,[?*7Q_X\Cb>&+f2(>EE%DfXjgH0FOPA[H9ZI$%,9e9;YX2b`J;@jK9cqG?#;)M-`l2Yo9qV^-8hP0"cEH%8\
%`H(MG=:m-nPLlO<<La.?MRd7*Y%\r08BIqt*Fg[+^D>OhPcOP=g^?7aPj#YO7T&Ic)*Cg%5#IXT?>^<'&$@%C]M=dE&!<;$&Q0$c
%BO/5GMd5I#IRjtfHjA2`"Tm7l/N#i.m.IKX28HPM4E?E+\[:ts2(e$'+TkVPEm?,c)T@'%0#h0#fl^G#Bm)_rEofZ:XlY,tgFgri
%Q$_g,:WV1S),I.tBHlt1,(52`YAl-M'$s^>rOa/`1%1Ga<0NWt4><N+Hh.U)C6?f758TWSZof4c:%&p=gC=B_4o3P@YS\V,0*)FK
%4`R&sfhoB9+sgu$*7X>[YncSI9LTBR@iR*6eQhn(6ApZTc>G'8rFsRa-n5_Rl*6=_4L,sb\g%]q"LPO%pU>Yr/lO>XmVa\#RGfQ)
%\]iUYZtB)p44t)UlI(N/b/YT_Pc^8Z92Q@U(qF'gCU^!7_@3luHo3Y0_H'\0N15PC=$L0Op)Y&.]h?j.IEq'uila\ZG*SbHf2uYW
%j<6nU<Bn.sp$%'-VH'O'N4/L.F+SsZp3;8'DfeLAoVgN"_kWZe7/rJ&MOd;M)M"Tg9RQP>d_:<r3^Vfn!4Src9\E=+4\oh^::)GN
%P0u-P5Eu+PW+#*bYO4g]"G4PM/UjE]Z*mGPnm#Lko"Q;?m,lJt9++Acpl$,jp_/N:3]Mob5RXF-`c=Gm8K53U[8!)??:!IO2>U@0
%EH9<3,e&DCDIuO=/0;*Z1+h(1S-We^%76)O-KRL\BMIo7R:QH.OsU'D=iG\coFj;eas$Y,]nsjKf!udjXXu&I,7E40ROE-@kl=/3
%4/>-8Em>QQI?JE1MFiXepln2\oEji#$a:%B_jR&sUpi!3)&*CY.nu>0L&+Y6^k)_qk/p>X=ebc"Y?)J?\g3#B@4)cK)dRg`4$nKO
%M0KBq&AA;S(^%DcG\_g$+D#=SS9*N`A!0Z>G9HXK^hiMfe]g@n[r,"OX#cVA?WrUO.[r"[:B(#H_%^5:o$GQESmHgqcQ2O"k8!/T
%=6k)?($C.USqSH1QTn>MJcX/6<N<t6QRu*HLJ<6"O;Ji"6iDd?nbJHKY:/]J[*KBu[ot`]VQVOBd6(Zb9^=RWK3.#7RjCO`&m9qh
%CI6g1b-cQK.7D/!EBZ]22>m:4m(6Z)b?8"<?/]6lmP.(@JBFGLkPMY=glCbo.JH(Ych;2<?YeAU;V"s[%MB)Z@^V)t^&s\+eJJNr
%hMAJa:q;";K\\p]X2T[Gin_(r\Q-BE]QZCe0N%CW(#16UD)NM/ZmtD51H*@X6.-\*=4!V@$1^DH^@pVUga-XO@lo0*bZ'egh(!;a
%oNgL$_Qb#*@%*M]h*M]R<nFlL4UWi.5[LsF1$J8/0.+/H"U(YkcU$h!QN8)E]W[gsA]r3B(+E^e^U8YiQQ:6kP<D)#d@pgf;)K:o
%,]p`=;KgDEM.n`NSlqXl0?K5Q3LJMQFZXTt"^%;9>T4l^1.&dY(Eheud=DHHYrQ9l-mEUU`Ao6o>745-j[=Den<S+DEE8'ZRmpEA
%frjWD^$Wc0b+/)8&/iWXl#0RCe1))r1@I$/&mBf5?sB(W$ZXO-/Q2:b*TTFR,?;68l,D,88j>tM@qc[CO?G%%ISZ_S!m4[P&I%dr
%D5I1UjT?9=5hgQ?fZ>]*C)F$3(A_L'e3,DGBnr;[]F`[EZ$ulcRj)_G^5M-I+%,)o-Z"J84"65LqjLBHU_F%L(u(hT;SX2sK7\l_
%AZldPeUY#o6;(TXXoC<<hFA\LeZN,]1jY3J'uXM2V&RJZB=o"ce=.'#$\2@84NK[;L:A2;hLcJ)fgWg.#]Ae1UsC`d0)k=g9gVW;
%qtZ]b!UBK9mZH]2hLkW+Eor;5Y<9F']7iN&f9]GIpi`78+j<B:R<$GL9t@G#D/L.VI/WjQ<k6&`q5IDj"MT=`GquGHa0u:tD4;1H
%A69/5I9fDHeCL%K-)WZl!U%OX3KUAWp=C$Qo/5D`Qb&X1Pa4X"C^=2W7^_m%F4;UJFgA3]`SA66%kmXMRWV%_p9@sNSkT1$pVp7O
%QprahHi)8-lWdeuKR0T,hNbN;J#bZgQ3Kj/X-Yq0dkYXE(`Jql9LHFfq?)IIJ$)noi*d4?gYh:Mjj_0k,l9L'C2N4LFAFuWp-2fU
%gL/K![&rpRl]T&T]B54ep0Vjn=2"0(cp>L0X6Y&$T_!(nPK15/S"/'\j+(#lWF>ak4N7pDhktodn*"HLmiCScgYhc'3'>`_-.)VZ
%6WU=aQ@4HLN+o&C/E_FlCGAS:Ore6t$i-mpE!"MnE*eAo_H!7Sq(1EN$=-;fk4Ur-T@%TCG#6\-l.ApZ4#6H0)<L,P\@iSG+Pe6;
%_OK``G+TVahHD9iIWtI_1\U4anClBh,GMhmn'm\<))@gZi97/Fq",?BTRhKj?LW?"EGU!Mq,Gg1=9iat<S(sdQP7Tt.7t%$U5ldC
%V!hXA2Y?g#F(cqgja'1"XRIhWB%!69cAkMW/]GfW9*5I:D5![/6*h(B*ZaM6m@c$"".fX0i%N[ln>XB\l6[>i?0KN6^/2k?$r*[>
%UoothqWXmNWuLE\/4?S54bAGM,n-Q2A(lIWbN`M;[tXiUhH#e>9gXck^#ehDUoor"TXdmdl6Vd,0kF1;*p(d,n`.,_/7LAX<Okhf
%,+F:fR4=[%Sf!aPLk[n91id2ebi9&CZ=D/[Et<a1KpZ&4H4o.erbFh4%4^ko<O.12*a,-A:gJT('QjoV=>c!,?B?Ybcr*/tiF^b.
%29`M-UoMI*<cOLV&]J6D)(INcP+\2Qn?eg2a]?Qi&mF4K(p5_aASdWle=Cc^CXE(1';bW&!E,BS6'(=Lcpic^6Zq*(IJe9Un]-NV
%BGCff?d?A-AM_gF:Z7]n)__aM_f`_!U$]F2TeQZ?NO69qMn`n>?Kd+3a,EbJ+'15ER<LL/,a\8e"6i>s'I)R1I`Qa#`Tnm8\'EHG
%nL5OFJuVp+O7b:peXl>6AB8_LT'J"0,PS]?HRrAaaIYQRC0KDmld]2$f3LXEYSjSZgI9Z?JZRY?WR/_l<o.?\C"1+SgnbZ.JC=P(
%Pr7&bf6HY-$C!K-*90:<\Wb7]HCVdXn_kOt7bO6Rg&<g#8gQkK-qtM7"F@"p\Q8'UP"`gUKV=hO-W=:do6KTTZLT]9CDL?1VgEHk
%LS=]7hVn(N*?k#c,T`SlpT.3:d=ZDI[-^C$>,m9kBlaP_9U.lA2:;SY^$O\G?"/(U@5*7(0EF$G+:![L/1R$MOSJ'Tl0(*m/\9d^
%4^qbs#mC?Gd1T+BcJE'9Z8;&q1t#fH<r[-nH(D`2LkA!pPi;7bAnWLjNuS;.le$Q.#`0P[f9u1l3X/Gf;\]7=)B]]^M>>sB=)#q:
%3HL&H%ES?..+^ft!R-4=Y`dKDXD?a4Xs!(Ld3HY.&$LEAfUP`;R'rm<NtI/$PV5UB$!fFHZr3t*!Wt!qguY5uMMo#UPn\tg`P$kZ
%rj#uO\-tUM&r7GjUTbF49j`dI](LbuBR7bdf.WJ6=dYCs^u0FgNT3$@C14C1NMD@e>"MO%%D8*b,)Wq`\FKR:>U+9D?RCY0Kf=2#
%..URpf]Baro4mXDo)gSu?hWZL"K?@ko6Ysi'0j0*"PTgGZ#6sMBQH62@sugeH[$r^!L!<>RU<O^63jud^\<up%&^j\oBAaa`J!D$
%V(%M:$b;a@gMHQ&h",F3>kZbqYEiM<p%I/[E\+Ao5'N+$MIoi)A#nS$X?%GM;Z:g,3<SX'he+E^g-ES:8rAsmjhEo]C,4)#^(Xfi
%.PA#;7kW,<#W76k[1oQms'g+5JKoF[Q!SVH+tg90(rD,g*_p1t8YT;7I.f[Rpu/NZmcqP^U=\Y(_ItoYn>(O0g5Y2n0l>kXL_NB+
%>mkVmjGfS02KTKEXXgQf;DCKW$gd/;67*09r\-u"I8Zu`KF;n2,X\?kHTg<n>Z\=kV`EtKLF<=GW$\P=4M2f@ngl#AChtA__Lsff
%%p_-m_A#eti#rWm+X?O9:,c#=eHqWaB*blsAJ]\3b\4feC.O_*VjH'#7i7L\:<2'\OS9JnCL>L2_WhUg/KO4jYqURA6)(:O(-&`q
%U2K%@VNJq\^EZ5oBZMrRY$+kkgs8`Kk`@>(6QrV-FAZ7V3%?q/rP`oAR1^&I2d75'qs+dM-pA\3RBjPT]L1`ERX_#JNg_h?\<'WM
%OsK@R<JU33ei@<KbaqTo-9o0.XSI=&b`on!Nq^^b.+SV2ac%Z\f^&M:Rb&Cfkd01Xctp69042O>/i7-@=j"(qpXJ1e4h>EWq=$F%
%Hhjs6<,]2d9<P$]o;[-j`IaQp.]JJo8NufNo<Ec+=c^tF/Tgr1/0D"!,N`"]"7WR6IfDl71R.$dq+_I<-3*^!A"%aG6`F:cpJ<`B
%euo9C35[N?m3G=JOC8GuS?OAe]P?*d_sg>,Hc.dUT`?Jn?ls+'1pm/D?O`Uh+>eVt12=,k.1c#1l*]"*D.`0>X+`nRkDqYJi8q.A
%aBV($r*baPDe=jCYiFH-B]Ij,mhCM!F1G.t*<I[,pC4H2T$/QjR%[>[e_;H,URYdM7<pmdN#7SS+e<6aR`7%SBK&9_"g,us!DR9L
%!)IPS<i;<Q3jdM9Bn&_u"XI/_g8GufP^5Kan,Z:ITpE;S%"RKJRaT9825no\fE4Nm[`_!M5LQ/8%lFu)jVIg'5)lc`h29soX-0uZ
%I';Mlf[?<hTOJfo!d"b7&>%V;+7TG>L4Jd!fSPn1Ii5l-b7'5Z^9+g$5VJ:\6eX>T6r?+c\@Iii(b2'$2?F)+A%j;$?i7)#'/eAn
%hN'R.jN&[=Jc/lN-rgmW;h_R.d'/`>]ckoJ<tm482\^@uj0Tm(!]QBj$[BK/gO9NUJO68*a42jb-%Lp44q$2t(":Ums$?hEVMI1_
%eNiL>0;3PQTf>I!gVFUf4:>91rXaNC#Ah>eL3!iEg\Hn*=MB9o/NR?kLbOqA&MsH?%S/H1V0O-(:7C/kC2>+Nb%h+BOT&LEFRncn
%]@qWXT3gBS!KT;p7?.]Bba"U[=*,#fV1`RrkG9rB:iiU5aBfN&aE/@U/'2.9pC?T,N'XG#.mYD4(D9!u0r+ROE_+#T#PB-gd%k,$
%P.Qs&cqp)UaVS5d;QiU*Z?gU1.gNN?^]PbYK]GJ[c*Ggi=B:i`Q%_2fje'8fHb0A\';A+hL#o[A+BG?A!Q&#-)PTXW$@Ts@\SrjA
%XNdK$_d`9o\-"^c6CeiV^3QiPcl/\W-^n5EJl50Rjo\DW;j>iM?Eu&ren@B%R0[^Rpcle4C@%5@=^g]CjD2e4AgGIMbT573bP/O%
%ZX+kk_kh9rapsuuU!3@/J(\<iMLMI&Y_MkmBg6X*pf5YPNg8Mb8cX]A_tHh!.`!I-l:;>M<hWbMY1*T]35Bk!;Q[_M)PU45\r0&4
%js:DsF8ER"c45e:;tYnlAq=ltGh@DF@J$D#n1I7Ohj2Ce7Gq]1e19'+W+kkBFpi+^OniC^P[15])."Y*5gK1cg29c?_MA(T&2HOM
%rS7'PYa>5/ku*=$V`kdc)X8^VfX4,W?5AEbr1]uT6,!IaIC[MHYBG^8P]!oae^T`UBW==M\%-OXW'qScb8.%L=WF;k&?7lUP9Tma
%i+P%b=S_n5+84cCcs\oZXm>?#*EW^53$b3EZQ^a)kOoKq=i62a7H7nRlcH![ej;`0)R?O]TdkoHKc>ktY6]8i[@50keZL!#NfX\T
%I!n^/PflrH;NhEq"/@^rY>'@\JbQ,=42@4qO-UVD:@[VtAuqR,)l3LaFP++^\4YuEgpl5IP(VF%=sq5peU]&10r.E?A8P"P$'&u+
%_d5_&X@9;IO=IeVbFER(d:*H[Khj;Y8[^^N+F;n"B&L,i?aii:BXBDi!cR$CU%0Z[7nZ"I=SH*t=\^B!p;Vt0EndcF)5+VDL:Oqf
%9l'+FmGG]_2qK+;piYN-2U%mjenZ2CS1*3gL/-(%QR3DM$]seQ99A0hQq,spVGk-2GeGDTCk615d6E03as(]7?T,kj7bOCLSB7m3
%XH06Pj6Xs`X0l1W]hF9VEl'<kY(lKQe]Di5b::C`kHT=Q,XbRV-Kr3d(GBlG%46M*/[BA.$dl@#OKKup4#/:]\78[3:j`k^rPK+`
%n5R#Wp%kh4V)gLTebM0f>HB6nV8.3+7Jb(Dk[7q*+VKVP-aO[B0fJW9TofHOciYL,GNc<2lXmSR[;RG>11KoG9.58:7f5FAE*T,e
%kU"2bk%-q&UZ7#.:/N6V%5l<fM6!tj[UJB]4VI*jLQ<W+B'Aui26^mY/MusX#KlLi6;MghOdCCBK#m75)GYr&Xg16Va_84]-1.j<
%/el;"Nn9/J0uN[^REDLFTGBRUh*!IbUM:O2;68QmV4cV=m!U=i=YuE:*%ib//mo8;ct:md[A&\F&R:-=E&DG`M%GF,$laM\od0B&
%YTiaX0)O,BG^)hVRot9./08SAcB)=9d5jmpE@)%p-BD1pJJ?["0)r=t+4k4371R:FYUlH9q##0J_H@kH=05e[/kg3r@pY^J1iuFY
%:e3S/D'+KuhXD<$1/L0O1QcajGNus]OQ8lQ+BiY-are94E6q\@2rdaM5tn]VWe0+:\"b(gN4(IY2FU!N6#iZnp[jR/9[pN5R.d[[
%'D8>3l,t7NB+1C>063nb9Pa?o$=kN9BA#h/bRnn1&rt)?,uJRn]d<6`Ng'*m=.IM=H1Qi%_+^'&1$'F&N6D%O(Q&Yp.k"Y@>qV-&
%?U!sR$Y'Zl+Jl[9nPNQ<lL."KAuJ1'G]Z5'&MH-6;:$Q<GfNuF)C0+9?ImDam_\>V5#R7?J&.-?+\\;O'R<pl/RL#K7!s4W7?^PO
%$'-'c=I6Y,n>=lA-M/_Zn*Ia-N%7<\Hokh9c&@mC`F.o*.SpLVktc5!UEX7Eop,MJRgBRJe/+bl/UD%J1FY9ok3d7ELIkWGqhtWK
%V4bM+E>P^k/26o76pa8->s>s@8^<,#Q"u7fH/mVih[A>nIf&'6&pj1mepV5CnLIk5C7;C=UR/GbNNYpWcc/ejXWSGDhF(Be\DkW2
%W"f`Oa4C`0c:Ag5o_,*#87(a!A;jI:HV(S%;;PhaEWeo9=3;Z2JAgi+__nd0<b#4a/_g9c`EN7\l"^K4#>[@&-mkJZh%2fjW@?.8
%$>DB\5.hM.Hi0#IQ,XaKUoUIJecgJi[i.#7]!PLu0)DRt#a\B1_M"mV-_UgA85=a>:B6dCPm!^GbQTFl/SN^a')A2/rk<e`gMK40
%UP8<KME<iHA#GokQn$hub26?)aV7+o&^*3R6-qX%An5sg:14?'JA:5".8OdH@"6a3%ad*G+1%q8VbN'ci)Qq9ikQ_MP,"n%BOh9;
%3NXgmg#S:DY[_$;mhp/f;04cLhQ#rYggRV:.e+EGBc^da8d$o]5cVGjKtNgc)$-c*86?<!.`/kdo3I'4Cr&?[E?r>.04e\T?Dk.E
%W\rki?LcPI++GL05]LMS_\k("DL+tnqB1;d>W^cfS0+mK*$_+'A<T@&9aJXioZQ@b+W>ccU.@e;EJ6^uhEC;SaJ`k)#LW70r1Utq
%kQ!2iL76G'.-Osbqq>opUJ\p1Fkbn+?X=Nn90QbV;!NsF+d>WS19Nb3;c=+QSQ2CAj#2PFD;W*7.dcVfnXd$^d$aTbDa?,A\$$H7
%;Ah(9?^,&!3W5;.L3:h\]"F!0K6Jdl(%"W\+`6fk1)p)ns*Q93ImU#G#r[Nu,B4X\MFuKr$C;nD1m,nV9.blZr_e(C.(8e$e0mA.
%%hZc#p5#jc%!c![Asds@6+WD-Yp1#;S`6@d/(d-9cSp/E"Tk>&@t6n1`Ah0k(]1BBj_A'4Pm7D9-)4\CEfo&gMqjTc_!=t!"p'^l
%5eg,eCBg0&>"8E[,aj7fiq=!b*JHoDHi:KT&pq)?+)^kBpaIu"8+sisp8B_^+^tS\*A(i+8rssen%n0fIh?7e<V'noUT2d>"8+F2
%:Q2)j;biH+Fdj%$#o\C\gJ9Qup<65Z"-,CB$Yr^FXqVF"*U(c?o1SXI<Mi'k]I5Z^0)K@Cll,ks^a%TC#1_hE'7p>o7>r=aRo,:0
%`g(5-#39fR\/Edfg^3a!M1&Ll?&Ee_f+X,F=tFO<<f(9k<"mYs"kgMV%]9t6Lp`j@9#X1QgASWaN2f;<f'k#ZKcZ+#Q?-^'!bJXD
%;AJ7l+U$JAD/"kZ>O;Yb?R78t!-(fF<=DT^U2,FN;A]%*7Um&[l'U9Y9GUdL'&O+:3idP<7PE(0?[^U1U%i<<*OPRl@ZLt0j71Wo
%6j[#nGPbj]dq&kep.6N0oh2&;[`Y/il@O)Z&gnrm0E(0VLA[/XA$i*[3OptPHW&(XKGu/%J:8d+\o]U/*bP`r]P\J834R'$C$670
%R,84dXt#b'UQIP&RU"<.,.Z?GYs,mt+OqXI)N^8Qb)Qt%&*h5KG!IZ1NfQk]G#c&""D<Ir$\.@#8*3\G,/!dIP&K`5*5;$M?,B2s
%LWJ<^`54mG+LA_5c9#+'C<6\O483()S?[fpGG=Mr>j`5lcWcKamRiaO2^`33?3+-oOj<AO*_O7AZJJkTgQb](4PhB!kX<T=M;AF!
%G+7X<[eDM_nT<pS3um/rbjA*\]8o,F;J,b%5hInKI+/5iX'q]b8("!q*-6VfX=eI!.h#qtJhNU>L0:S@^moQ^5cJI2./LSGiM4jq
%,\n`0+OOl5b9g1dpu/=#H4**p9haGu);Se5TrYKcKXW@,Ff!*QkH3pMe3l#^ZaUsVB@TPVJ*uF%dZWM%IOd_SdB%GS[Ao7EAIHXC
%'eKm>:^MB5^,e=?1I2>i/p;MHa'>pKV")NAI4Mku_1PT'[5iZUX(LhiU,"uh($-.rA`,3T-!9\nGq!.iZn1Q2\o>`HaVp6:,.ACd
%&>T`V&fW]As3rNd:$YJ9MOI_h_[30@IWi)+#S=:2g=><<<9Hb+Po4]f197RH]?>ku.*ZL;S7J1&$!3n/5CD(/)00BP-jXU!R6L?n
%*:qR(E`T.nGHbZ35En2c:L*j)mt,\[ENG)S;;(A^Z_7joq7EtGYQ9e?q87a<5=>f2s-iN&*VfeMP2F7SmZ+N6/u4@XdrW0:Zdu<m
%.ot;KJ-,An\c^GM%ql8S-,ncX(j&2cQM#]W&N&3)oncl!:t]P#^c#jS.,#1C6l1PoUmroJ#n=E_=@+Jo;VW)^!PR^(_D]Rm0H(Ae
%8.Pg`i6o6tDZW*Z3hpt5+@C6geKD[3IRJ\1n,L1kkfE)M#tO4h5%`l(^oVWh+<BH)^b$IaltLuX\oIcTj<dbo6d''3#Ge5trb$7q
%5]=4:_9HHuGYXTLjjkF_(f*YUq]ooVGTSp`&K<&H8=iL'_EZsGpc"Q:huq>]+bQ'^N5WeG_*1+Wnkhk4C+7M(E]o-fe\j`G68guA
%/m5IC.bRTrMPIQ+V6!_cL*J0uF;<8?p4:L]$)<'VTV00;q08624E(J(,:bPgNJ9Gj_<J<c4g?+Xo4[,eFmIV&4igtSW\2e\oF3J&
%eQc:@mrV\RpecV-$IKiAB;nL=l0Nl"UV&d0(HBhPO5>SoNplAT'N$"=cjt?a%T#X\FJa1Vd<E8ubPEu*+:E7loO`+0.,T01XWLoM
%I(b^H$Fq^FJ_c=7"'e+5YU`U-@Im?#lm249khK!fm"gJ#OHC]Sd?0[_H2=[XG'++q#Yif4[6ub\&d?^D(id"Vb"AZd%11]=\TYOX
%+jUaS=^6-ff&$Yd0%S0;m4JaZ]j_9,;Tcg]AWM*qnVXnt-UDUKO=2f,$]B_^7iAn9LuXhJ21MlbHUhAR.q_ted'9>?rJ/`E@ZjI+
%B"3IoMYlL&V2c4lCWA]@4'$X,cLi5]ZnLul)BGt7UlM"37Yo\?Fk<Ujc,`h[+C8]uRJ7K=Grgr9+gaji]oKhAj]LA+I,3U8T8J%`
%r@b2uVllYjVt;A6+ojTaIqlf\67EIlY?eH`'@a4oRDBEm_4dGM:*-9!iB[=g$,"V>*&K1Y6FeBG%s^F,Pu8Js6[Q2<I\Nu6m.DfE
%-i1]c#u(`=!J'No`J79]Stq_Wr(tl^AlJr$"mJ0U>HIE;A:34+KauC4a);4tM^NTSre\uC7+RS+KL>.PXUk@qPL.Q,$)'Y5ZtkZ!
%*9$@Ed>J^-Lu\>2p%me'^\UM39SIP-WO6gGG`.4aeHXg6q4T,nd,"'i?UAp0N0TaM)&>^I3Ph?Nq4V5ocnQN7'KbVi!M)JGTSV1X
%p,L+k<_hr^ma(5r!.:ruUtj_V3c'5.PR5i0lEtbWh?1TC$bPXhL0MTLqO:SB]pPJc<f,:@\1;$ga_<r>AOKI;%e@A]EBghpqU)k(
%j6<@JVkCKOO[u0-4^,DYbeN<'<@?:=B/NY&lhlSXQlP2[FD6XHiiU+r],n!pV-mZC6\IkKqQXk?CdjWcIp*P[PEA1_&d]t[3tu^e
%K;KIAV/P0UOl)3CQRP`jFBH"g9S8:t83GD<^ZZ]\Ausq"KeT6E!nkc+Ht#Sb3Em8pc=.UeiZ_<_JrH7U2[_cZ)`nPuMKE\"43B_D
%c0<jlJlM*d`t^(oa@1:5:_SMH\rmTM3<^gR4u`)L;l3GV`eqc%D`u9]PZ2=P-sbYCi33=[K/f`'lo%dE1K?7h>#/mK,.GZ)m:(es
%-[r"Hm"[-`dS)G^TqS*Va.#p=ZH/UWMV9hlQ"#,)FfphU6FBT$MkdG>p=%Mo_r)sEaNT9o]<q^P%_#W6MLp=3;K9XtJVjAX+VL\/
%(=AEhVZLUR?+uN?[+(Vp3iJs+';t/PZ=gok<9t=C'qZMGFk9^E$,;;UFX;SWVbsJWBk,/l9T;3gQ>5N9LDZXYJ/'hdU"VGY<OXSg
%CAV.$JjAuP![rsgC0Fll!i;;?6>S#+"f7SPj7P(bK8`tE,ZP2,>\&2'WFa/4[5oD(LBH6+T&QoQrb;Zk-T+giE<'YE>eO/-i!D#+
%i?=i6=5GGoBghZ*Y.=eF*bp(nWh-oSOR6!CYFP;#pXAjWr<1>-<<0GbU.\@^"a8<P/)C>!_*9KO3%`+s.G8Q_],n%ffE#Ch0fi%D
%M7U0,h12P_'mjWKM9._nGsVU/[qHrWRiY+uo>^V$U8U$7h!7.4+h]6,P\ZMf7C'1?mhkS;;oMOA+8+^2#lh)<g;EkX&l92YZerfJ
%BEo%DGF6_j,(k4"g03Q9O<Tpmd*:'cBGM)BYasJTEC68ta2uqt5h*![R1XY>.N[n9PSunQ&,hQTnI?ai"#9X#Lo2)^#.J:I.G?_Z
%AXtepOnR72Rmqlk1]TC:%#7EZ5UhhS!0`/5i:!]jXHPX@']<jCg+R+6YEPDH^ss9ZN(8EPFR=7`c3O2?!Ro4%'(uN'Y)D+cZ6q&.
%3^m3l&mnIZMTVgN4sW6d5E)sI@/)eM^@"6GY^YX@9PI*q+E<hNZj@c6Ui@'G#KDkpaIR>bN2StMI<HoIYnI6od1:&g7]/OK$%hM]
%"8@I@1:/(^^L;>4P;"!XcdPF\jqGX&AtcIC*ah3Q+k,MU5R$G8"0i]i_*<>&q!-ij[MB`)cu6[.e2oBnEo`RC_/:qIOf=]C"*GuH
%+B!t$cVq\iZkMp_,(!lK3hG.0m)O\5'D)GVOL3\7lk[r6ALB*WB+Krp7Sb7f:GAM<qLE0*A5UIeBM%n_cKY6S*.('>1fV^*8KaT[
%IFG+b"0om@S>&Sg+,LCbN)'F]=1=fj!5Lu0FsZr8dM7R)9kfUD%08Qg_\^HFU:d]1^O]FDrON*.)8N\1E`R&M"CQh3e,$Oe>/K>W
%@V>QIVUO2'\m8e53asOpgiV)!en5<)8dHN6$V)_PIUm??(J@.=J'QF"#BWeo<i<tOA#QcW2VTjHL`J%toaS2Ts"b!\M/DT2o,'Cf
%;V@5V^%`Yi3K;TiSe*t0>:sPN&r<Gm*L@ljLcqmMXB%U`,!X"<0`FieEPWE9iWM,BFuE_f2BCMq/$qfs*WH&SJ&WP,8'8jkrq7it
%8Ho2A9MRs"_/D#uL5sq[&(DVFaSl>*fc]neSUo_JOLl`"Tme_"52MYlL>9:$JV+Bu6k1Q\&/,^!4eRUuQo1Ic7G4$NV3qSfXeR0#
%eIb&,"U$]5EWN)eYG2'C"*^Y[=I`,ZJ=\t$>+?'/j4!1N(0;$ZT2q8!I>J?uE5"uFpot6tKb#S@]m%5O\G0m5&bS"fY81e>+H+!a
%g[OS5$$$q,Z#c$6M1q??]-/1<B4qC(kOd"+Ao]*h#4;E6$8Jh^Y!;m+hs`iV#>WD?Vhl(O3+0'\6NRVjCW8I@lB$*ai;_ZT\`#`o
%4C1;>oQ\ir)@=>,_RHE-"0na_1R7lmp@8.Mhj=C/`T'%efAB+b:#ArGUagm/%f1[HJ@RPerI16rS:%oU7W&n'*0X`InkGpV#79T+
%3'!W:$8AIffFQ&p7_;gJM<u7$hcJ#O#XEiMk0=&YaA!lK)jnJC:+IK,+:lR/VI(2P35W1g!(Dui9'#BIT6NDm)Gc?+1kBl2$K6Op
%6;KVa?&<Y)`i#;l<ki"@XBH!<e`C128YV1D,_^L1A8s^3L'TJ&BA>`rP4-&(#e].=^.u[8Ou`f*QT2E\*j)?A#N/<DQ^-;<(+2V%
%LB,.05:<_VG=t;RG!gSe/>F/ELPf[CMV9:LZu3Dd-+pU0=!>bX&3qi;=l%`gL'm4H<C?Qp;CE!EiKf-'4R@idn,/&>";Web84M-r
%(LZ\NmRX%D5%P8W&jF`iJ=GU0D1gg\!(H"YJ&Ot[\gZYHVfJb_pBTnS$.4KCqa>)=!kIjG%HG<MTjW8#]p,^C.d[6D)k+W?o*b%)
%Z9BmQ,fFN7(]0(X@r0I2>c<Q15'85N_qGrI,lE2-%1]_Y*]U^h[b(D-VUGlT'To#l4!c8PL!:7&-i4QL9SqaJF>N%;*cO>9(X&6s
%JIBs<CP\5m4?2QS?MdfciBY-F#tEF54s[BHYXmoHeBS`[aDS:'?QpW#8JYm!)^hU)coTbTHNP`TC(ZcI>q34aDG1nob^lGcWa?=-
%]&u3I!V@?5f3aiZ#rJTTDi55j@A?At`eOhIW?U<=+a'PV8MCTH@_La#_qJnnj,Ij)IEQfkSNssh_7][SrA5\[Y!?-l&@U7n8G:&j
%#I5At5reY_Ka`CLT<jUTjbKn\YCGs*4i7K(2E2mLKaQNe%j&&3Ot_^#A?kp:*+`*q'F5S8V(Pl4n(,T8=+Eu;$Of:Q-.!\@Q)NNE
%"gucn+hC8m1NFiN8S&W&<pBh3K02q*ONm.[Ab'P0[MIlU_`/kMmJ[k_i3"l#F*rbiR$Bj?,ikEA#o]Ouc4a:)9A7?HA\d'sdZqN%
%hQnEg\:H(&ghlcfI8BF3eVGhVie>'C[lk22IgM!5RQ=Gm*<-I%<Zu=/afPT:,B:8*]tLJ*aG)O:;pc99$#H!Z2&$2a/=%Rne?Yf]
%EGAigWI`-gcJRWD\Qcf62!^S<d@8Q5INiE&'^IH@]>r9_QJ0ZP@L"QdjsiK*kZeG!&E2)*WGF;`[2n/AR51-Ag0&d"cQpGqFPp7$
%2n]nmnX3:'.FZ^5dId:GqR</)YOVQpQ)@5"F`q>#OlhQNkbPb'.!l$NeAe(/\[>*J;?MR[+a'%P>0neOka#F[pRC!f/B?b=c`a$Z
%>r-97-^/Y!9mk+^C"KHiI]ibY(Kgk9?7Cdb/b@_[g,.YMcaAQ%=8fEg^Di(b,-&Z-88fOe7Muf3c)u_<db%B"?WY<taAGjX*VllV
%Ls@'<GBt681"c!]Q<6nM6<+J$>%6Mq+`PiTN&_Gd4TU<?a8%S\LK$JZV[rk;O!a]!H>BT&)dN6/EN,I=2TpbFn*+Ve$o2F`O>hYo
%KnJdM]foab8/8S#Y86[l!\cU?WDWQ2P)?P%UI6S(W(0ik#gc%WL,!HE;IVJ[J@nS7LLVV#Z`!lFYNe`*S/"J>h5%K`B4*Aq/5Dfe
%;6"(X%i=?!lcs<#\nlk0+LAUM!.q%-+H*Du*6X#pD,&m^5dR!U@?n<Z.U9#_cB]_k1fTZdhfgt05Tq^O/A<XR\>[:fS'$h8WEq5D
%H^CA=F9WjiEH>C=r5fKk*Zh==W`ZCtqlX!,j#oFQG"qLUR/!Q$OqrDF0hn^el*.r9`97t)<BDL%6A6-;h]Yi[^>Do?FB?d6hlcOU
%8j4Ua5TRu>lNW3+'[!D1mTrb3Q7,B7JW=HKYk!QW:o-W@"**(\*t=3"ZteU5'j![Gh3shm@-Q1gOH]RYDdTc.kD:82Z/-##i1)K#
%le:e!nC:Ei"T^d5l=58Bnn9nXi8+b&$GP0+>BJ*6Fh[5meP<<]TA+;!0la`qL!E9*p:Zl:=0#]bS,O-b?1(1%Rg-q<rL4*R9p"o@
%1c7TlbZ%]M5uJ)q;qEtOFd0qh*_TTpBf\=oI%*DE:p#+&QUbW$ou4#4Q5?SONNZM?(pWRtH\i&0X/+f8P*fX^#\nf[%9^p5n\m@F
%XE'g]6UTJ.cfHAXjq+54/@0C".dltSk[QfKX&dH%P/"SppJL\Fp15=r=E5Logarbbn*f"'%$'s^^&8FX#/BM%;usc&AX+NF<c,P5
%dCq2._f1@h*8bWpKIgJ+9;A1g/VH.4LhiARZZSP0Y,?\0k_#I^&Nnl+[P,'e@&3&94)O8F)h+?Uj]+IV](knOdDDGWkioP;LNH%7
%>'pe86,J%,**ULok8C#m[+=iAd;E;K@I8=a$/sN8rl[fuIMb-m&%LLK`TNj3&Hdjom%G-0SlVjlq<63$:L-0Fc7;D)aO8N]jaunC
%InL(_!?bF(K$mV95jLa-M+5`d:5SHu56RsaauFQWadRsQ?.7,5W^9R]bHP?9\8WAt&/qme0?icDJ+VpFRR]'HBnN/-8VL>F5<0De
%]e%hn%^GX=O-30)JuG[kb&5$4g>j"@k9NVO[oWOkp7k4beW?)PCK#La.\grc)QC.4Y/_X$nP8Wt*LY>LT8Q7AQPDJq8j=9-.g-r_
%WsE=eXUHt4/Nn5??*<IKJdFPj1'\O,HC9<t;[<kQm8@U&^b2r\<@W7iO?;M?KQfRmT]sGFUV9[LOr(9`CQ5qo3T*bXq(.'SJ^;O2
%K+4MU;o4%7Z?%F%1TC[V$"6eO7WYWP""Q==?+b#fhKP`MHWFmNB)@@t;e:ui&j'7uA3=4"rSnCr3O@#rcE`aCQr!]3o(LUL6Trfg
%dY^rmP4X&@I/'H/:@U-#(.dP@NphdL/Z,nbmh](KpbAteJ+<9`,V.9U6]IKD05,P9YhA-GTiAMX6id`4PI<_Z+W<&/S)-pY&*5:[
%k(iu:oQ-@0$`jjKA^*P7lB=KP9#(:#hR?hGoVDar9DNeb4X_`nh>#BTlC:0d8cq[a=62fc1?/urR10B+,2)MI^V49=OuDs42>kOc
%,>+H>k,J45TSpW3U1?s,U`T9\Y*30Do@Ne%(1:P(7<'%D9mPEM[61kHDDZEg3t!_R]<$]ROO`T#9S#^f9AG&(,'@Nq^n;9/a\QWL
%YP<0=[ce5p.Vd.YlbIBaS%b?Mi!l3Wk"ooZ"?fanFYdAq9r`#/RgSIbd_b++2cK@VKDA3`c3R$K":F+3MB%208G(iYk8al]'C_-a
%#A!tuRP[tdWO#+17O.tZJE[QJXKX!\G[4%ol#^LuK]N;OGBIXRroTOiK]Tr63O*fXSdUb1OP0":3AmG%OG6U>^<.PK[?heIO0FG]
%31+ioMO,F_'Bgq0P(V+fJSZk_;ig*d*it4B^ImRUj<?>^AUZM]qE^i7DQ>$49&7W006n(m72:sK>8U,.1p"D=GF^h\r1_St>!+i,
%-jJdKrI'opdKKK^.`+#6@Th(d?oK)k^Pq#dMs[\dNo2'A=siGoOSTF01^rFC!ArTN8=c1`-COe*,7!Q]5U=V=?lu?a4\dY7]#KN3
%S$6]?eqP7AqVaWU'A1h%8#EJ`\"H@;S3b=Dc_?AUo&<qL`B.19bZ0d@bKr!1aX]<51&B=?Ib#u3dVoBCJ(_=jJNf#%h<Z9aO_jqB
%=oC->#N0Y,Lu+AJ2)J<Jcn&3Cof>5mK(PkQaD6,s^@#%l;Yk"+a]]D*UIo>!4C0rf>c0sJbi=g=4<,VBRWm]#[)JT/>.I</];mSf
%:Fm_HVNbqWqm-2[JC<Sp-99c>&%"4Q-Ut^UP5GeaLOkQU1._=H.m@hg5oF2ZSJ(+^6>ITI/q</p9cE#[PD)U<Q/a:%;bc+!hNmSU
%SGmfT]NfpW`bADjR=GdgVh*OQ[7W'cMHb5VZ=k&48+`5^#K68+a9r0DC11>XFI%/+E!0>G`j$E1+04Cc)H7#Sb-qV\ECWoj-Vhr2
%E#?"i8L(fN6n4BI)'mlXE.EWTr/W[kG"!,dUc\"PTt0`kHUXD<X>_=+d)p"qm\pH6`YFZYpoolZe9#$KLr3W$r2$0k/8pef'W$"[
%lTPW`MGNSBaT\R'(GA5#\C'f'pD+]9+(ld*J?;@sfS4@sD,cOi:q\G<5>9DNao97Im@F6^:^jJe.'s_>%6JBo;JX$O\'M7KNsB4L
%[_l%X]"@$Z$a)$6ca=:ClP,lDY&u7:W7PS!4[7*<#*P/sFea46bt6@ljV;5.&l>7b8(@+k8sC(-77ZHA]g>om7#G?XBqV_-U842f
%2f<XQaut/Of9JaXLI%S3[B%=e]a#/;_s"PMU$.()l<[dk.3B^^4":=.UpErUgS'(leOk&2W6B*>b5"S77O4&[@,Y3M?iW)I,NH5t
%63EK5T@3S>i=[1hV]Ten.7:2jB$P]U!Us)^Z5#mW,mt5Q)8*!#pJb7hFtW3jMpj"l^e]TN&*\PYqa*g=b5u#ITu3bV*($rkSKCG1
%U#4`4Boa@,IP#kRdL#^2U/S'W+a!dRUij%j_ke<^]NQco!Y&M&NPW]0<'j[,P*aJ8N[[mlU'AoNb5HWIRW8:f)bf9M]iG6=03@kS
%W"=lX.iYW)\/#es3nU1o.!)b0Gk3'@Xr06NC=R!53DX$-20?Zpe^.m/3M_?+F"=jP$C%@j&*.$H7PP,t`=9?@,!r>44e#gF3+_et
%=@O[I`2G5fL)L=ZoH'<A!Jn2u6aPC6&D#8&ldR_U23A08cf.M>b0TE8Z!<PDnY)S(k1V$pYTYp'^0Mt&?a]YTa>)\jPP3UnWch`$
%U.S@L(8^8g!$'o?(".UZKJ<"q&RR/D1<Q+$jSM[\D>\e'BmFiE\&A/Xd*]fu9Jf+d'JNMi,-$VP=s0o@I?>kPm+A[YQX^a&/M?mu
%MCk7R@a_T;:od8CZBl$#\(.<#M(jVT+NPO%mf>rZS$oEakTgLUF'Pd,!C9DSgsCTP[AD=nqE2baUd(q,^r7F"U4pm0KoMn).J(tM
%@`ZLqkE1lEi\,<anVS1>JIUA(Vk>NI3n=)c@[2I3\D.3X?j!<EJ24RkSC)LQ^r+cY1CdukUSEegl*760SU@bmffb!b6W_OaM'`X2
%o8p(JDalO1)IIIjJFc-grK9>EYRYJ&1X)lGjuLYKFYlVFpKG$d+tZm\&#GUh!&!XHJQO66)d/DN757_IZT!r0H$b(6OB+X)LH[cA
%q-;d#`Qm&4&UDR/*HVNC,-SA;f1Mf/?c%3m27,if^Q8&c)/W!%$NcC#/[4VgN!(^%S!i*$jhC)/Q82r=e?G0si[aPshu0rgJh5^5
%*'7spffU/lnSskI6A>K<FI3^,`p6@qgd?[kaV@&$/FR\8nXnPP5)$Kuot%=ab>4m]0Aj_G":_aNYes0N"%7P?7`=Z`1u6f.L7GqV
%!!k*o^P_oS)81/-2P1c.N.0/.V5i,pEUdZ3>jFb)TE]_>#j419(\1I9L<iCQ!\g2iP;ZCDq5]cG+g.43MjIhb>#<+cZ!,"j1$XRP
%D*_[Y:BRU4mATZuh-_LQo._mh*,2>^()/g:J^mT6O[uN']%3)QHO\[8)2*S230me.=6I^@V<",\cuN2A9gAq/g`^#=&%P?C2sBZi
%;_IG+a;%[S;B?[5f=OaJ]5%'!Z_8WCjqC-]lA[-U%'XAu@kd$KIL]\/osN&M:iYBN?4)"I+Yj?k[>)6-?e3T6C7'pC>@,DXT3UUU
%X3.<Q8'bVgQ+^8D'j)QR<a$V3Bunc:[44>TCZZeanc3DpDiT(P*kkGsM,aFgDJ$)548gHY@iOZ7h+'FlXj>bM<."C$`A`i*;FW]F
%-H2+a^#JhOZ).ZjMNt'HB6&D(HD_#9;DB>bU/$G;g#4*,m_k;/at+"*W<mj/PiVq@.$AM,U[_peDjW!80(bGFfJpGEUOiU':OH88
%2rs2G#XT@JP'GcqEMLL&RbNVD*66XD3oR6:m#'5g[a2<*W@f1mkt)'iRZ)ttBBDmq(G3YP=>sN+M5]utr4Cs!*.DOB`5TP6?`6<9
%f^V-&5%Fc,fA/3<\/67+I$,g!?b:]cLl<$A6$Wmo_A`.Rs'q]19O`5!=YPHC>"\mqV)&q2%NboiZ/4YsgLF'f"DP#Xk`7idTCK'7
%S^J`V[VHqu/"0$Ks2G?T4ilt5:o3)lfF_"3fAXBlS3?kAqNO66[X4dj\OGJq@&>>"N?.qm!cV'u[A(<u2Ht5<=C@KRa,/LZ`K8RZ
%e8FV".nmcC=]$&K1+c*)+B\8Mknt.ZPd@#;[B<ep1IOPVnkcT*K2nW=C+%F3?)cNu[=p>r`F:1mE#$<$R*<pgZ4>E:9;HG,UsaMM
%$'fp@k_7Fpa!a\0C=jfEc;c[.:^;JiEBGY;.!%f%I$2Z/k8H*8:AtaL_BgTHe5ZD!(?[Z]*VePEI#[EFZ,MCLkmM@<apJ_5d<N';
%$g]\*%EcnF/V9OY5(rJn";4dHfCV5!.I,Un_1`R4G#n74iE0HPf$GVg.$\QT%T%1'jKd]@>E0:_.mDZL(B+]n07LAiIq35``784Y
%=/PopE-s5kC^]I5o'/<"0R_u$G+FN0h\uR?F%@1C#e;"O;R2CV-[$E6#>2?Tq<5<i5bIM=2!4\8cQCTq/1[,UcqT\aoOlbr<mJ"2
%gWT-$i(([r<=<c.\\"/'_Kk<s>.]^"B$+'1lTlVDW!Gs!#GE>(&\6S_,jMCo@#r/kQP(iEHu1SpjEX!Tp.6LB#pj&1L-^T.-Q>E9
%J`%5#&"+6fJkCai]!>!C`BL,33Xm`ig'JrYWE1_PE,ZH8O=<PLAd;.61$H\XjJqa^MM;@MIO=mb/D0-t%l\.+^P]lQ&W)#!ka4AF
%p[6a^jTq*.U-/J$To>%cE@N[k9C:cRk9#?+oD;gg@Y(K2oGZuB/5C)qmDfDZZj?<_$-C8QbF+B=c*4Kp7B]e'*8=Iqje[`XnF\d>
%VZV%.[_83HODPrqCc;-:`hlk2>K'L4hK:l_8XtV6j)'Tn`H$L2>eK<Yd^B7#p_oDcdRCpclK?uG;X'oZ*-H*uRmq!BgN=kJ"E78M
%.!uaJrotns_fH]I+Jrd.?C&n+ZAkVC5Q!l5PD3%E@gHX=L3fZV6n.Z#U.^ik?'K408ZYEr.\.!kN5qn8WCq*KD6I[>mt-(BfO3lI
%c@Gcl7k@N%^5fU<WLQ`("XO2H/=clbr)._DDMQ,!DKpbdVD]S*;[40X&"O#M)\JhecI.-1j3MpVoaXT1GrKQ)]'"-V=O&krMF0,X
%EsOYL!;*uqRk&'r5?I5oa"?W3"]l]lZ:ak0K];4_b?oQ+4`C-;]q=]jkO(9Rrnh@1V\!_Tl^"c6?gcHeou*[TUT`Ms%M0945oVON
%X%t,Lh)EI`f)j0PH?kHaS518#QAOYZ+=OV^!]4q-<Q%0I."*=D6lKc'(`q$?-sk!F,XdAfIHuHYOn=\,Pb)8%$S\2l5X=E2;KS'J
%YrcFoQTYt"']jV)#nX&Ld6RVKej'=g)+#j$Ub@tj,#g$En%1h.8Xj;?S*%^?6%GbLjqH5i\VSG>P!hN+#,Lqg`(4SD0(8fFQq@LN
%bMGmdXqm^;HU+q$ru*352tBE0T+/*nL<.`X%+jqPd\snm.Rd\U2sT3UI3^*qLYc8Ia:c64Y#9DIk^i>FMcpUS"9d-4fs+l#LAnE=
%@tb:i!0$]m^1`4Y.<egW@K=Ns]Jp6`7aaiSXul1L5hnn(V)ZpEa;i-%c?c.-Ua3GjZp.ANinJW!%lYJa2BHWu5snI&:6"<!^"-.B
%XoU-U1Vs\'f,Ik%;Si`N8O?6=diQ5K@T?e^4"m(Z(:;=]'\<un1<h4r,%RK:1FMof*"C_*ObS/`DBqXA>4#2B!h&(<U\0K$U%d^2
%[Ish$LtgTKYMP'XIBj/2jMhYV0t/N(,lpJ+6I?].JOlMT^<B^]Ofn)s9s_Imre<:%"3f9-)ui;2n)\;,TVVRkUggI*k!L$`#,0D@
%NU1P-T:f2k*R(k"0eI0O1AV<+dHDcH^/6XB8*`r!NCL)8R<_/;FQk.$PL(<;g;e[#GN_N)&u(XV+15*9\)@Mod4C8Vc&EWF7$4U#
%Kbr.rWYkRF3$e#]gGVI>?mV25dtR-II)Z'0IG;QJLoPa3IHj)8n1,uO:Y6*CH,^M(ULo%W(_@E!*-t=RUS_q1%P?c8C_'4#k-M&$
%p.#&.XKU1oHZ;J!61t(1$8/PNC@l.ljGc.q_lE3HR?X<+"*()B2=_Jq>^[i<-:\C./b(nFmUnMG=U@ShWFrK,MReLS>Y8<#bGA?k
%QdigP)-g%:\"]jqE)FlHM.e^[I?shS*)4pMDg[)D^4\8u+9JVDchS;l+S2ndj1S:rk_YjZ*nUXYfZcO+JfN,nE0WQ5&2LI+WhVLb
%K"eR>I`5@7#Th4aNPU^Z<u\8(O;]%;kX%BT*?$O$=qBu?Unh*WDL;^`:E&%R@3eag43k5]h?;N52U;Jj!mR;\liXqQ!b?e4>Vmhk
%eFNm]ki5p]m&tpWK\&iM3KQ*H<Aif#"+MO]YM+@%K%!"I1-bnlkE.fVleFGaLUX;V)a$Zd(505<6lKh-=q@tP^M<'b.`nuBAO"O7
%lj5_^h\[`SJ"_&W"@FmKbC;6C;^e"R6]2"MV:0_^f"Qa?OR+MYnY!9H/YrZq&4i-/DBY):KRTVk3-M);^kb^4)PWWfOs/D;*IL3!
%+P7Z\<Imks9G5/$5d3gio*fQ%)sN)DkA\up&94#X4AXb&G9.=?#Ja(EUViiGM'n#/M1^39p%T84N[M&lSfKZ4\.O8>ik.ki'J;A]
%hlYYr=0N0OFUYFo>gP-b?FSridYRU-jb34rC5J65[@P@bVgI#8QPnXE*9tgs52I`jkKl<boc/r:R>)pCSZ+I%JOTlOEc1g%#!-dG
%PCcVZ-LfOW#`ddudDqniND'U5j>(2A%2k%=ht]^#2A7Jo&Lf_bDj3=hM$X'%WoKZ%e@"%uV+cD7RRA'&'5>ldk>S;8ht^5^-#$SM
%Gur^eeG`.elK_61kFYm^q2Uq6G'CN!7n(9K+t8IKn4l#6ArlJn!:AZXB#IhJVMRi5]-HM7QF3%<7<<oBe(Y7PF9smt,e1LHC)Y/<
%>E1V[4RqB$X%O;HrA=!(3upkO!.&2?&]+gl>,:a)D,!'%gduuYh6\F,/e6fsU)S%f&I<ENZeqS``"=IFKL\a'>J<+9'"&,#XiSRp
%JHN#b9_>Y(68t&^UF\br#X4B'R4PFqSoi5Ya^bQe)?gju)7S,En\5.C6TGAeQ\1r$h+)R_?@5u/LTDLm5Me7CXZO]e4DR[ZG='#*
%Mc00OF9+9L=7g.i/o\NT>UUB?BOrWOGBNjK$YG&pY'<&YCRD)<fL_=cV"%M*;/$g2e7E#J*V-/mBpTmYf<b+I"r/GU3=:H+jh8B.
%'")`ForL-qe2.skWC]hfK3b:#="\3NiTbBJ38NhZ5VieA1b=<$qQ-&N6T7Xc9<3/6$lFT^YEQKrHnEg1+h84\6TGrmDC7<"^1sNX
%C#ruM=OUssmp/E&c8q]D@^Cg_R":EVU@ddi2Vc:;8LonunZHis62'Dln[fDtNHsb1muf[aiJ_Ofes4_KB*FA>/+=H?/$W#hD2(YH
%*X-si7"ICE=8m?+QR<HF!?_GiP[6tT#)E`]bjHYN6l[=9fm;dKF\j2\l168'$lZ.k[lf`^)BJHK]cduO(/lS1kpm^&mZEU"6s(RQ
%3Ep$"JRW;]YFKk,)CStdrXIJqa'Dd)U&]_JI7AM!6mbfp0dd8Td4GD:Pcth6JUX?+%QK0^HXd5`,uH3eW?L.*G@=ZiU:UEETMH/e
%U,RBf&eHqI1BFgJ'd?H[!QIEKig^!?,\i*3kOB2A'0co4&0N+&4K]9[P26tL/gD^EL`td^'7@aFR;q+P.;?0#rh"-Ve1q)M&tgWP
%b)c*_7km%;<<J1Pms>+:'OWF#[;VE`<*'M;9'@$^:_P_rmm:JAr\lQ>m(M5mPQMYq=j0PZ)h9]XiTf<^B<4qJ`,CGM.^;1H'$-r(
%1/:#&,2TO5,qnZ'SKZ$K*#nB-bURGd-dI`11+qc;+>7!77&29kR9hRU/e[&3[iP5V2\;'O4+Y*S\=eTM)6q0o=3,&,Yr)M(lHe"C
%kUp8#H91nY4j]/UEJ(Med%fI+4-,rZ8572i4"G`1Tk%*0'>R=N/bLh:!S7e%Pkf88nO.97ReXAnSfFdWCP74'-`@'Ckm\D^Ir,]D
%6)Ed13u=@4;nN9t,9Ib&f_[2(;h/"BM"nCbGsrZ$4GYpS(9o$8P7g8FBl:u5RS[5@gF]\lM90nDA%P53hIZ!i0:3;X:C/-0JH`Jm
%EPegY%<JoMOZ;><9q59aPhm6f9W4#-"=qrNeV=rcAq^>D_0D`HOU\JZ$'.QJQDAjmW"I):Xtm_Rertg'6:j_VD@r?cJ_Th5[CLc0
%]I+H,*hu!:Be8?i?in@$4>T2i,0P*BW"s:WqP:fK_Q<j=UL"?Dk_WtCg=<9_KYD58U+1-bj:TC#;W<P/8)O$?q%pH(V/prd+N2+X
%,=1$(r4MRs;[<[C)&)3uQ-O>74m;rFE2UFf)+rc$1^GQN.0p-hG.HZK/-JENY'@/cVE/XTgE+%UlrfFdi3#@od'K9rQ7#*fMQ8Ek
%hGaiqg!t,7+C%HBFfcS#qda<3'&.%u0q`KY@9Xt]$-u!0\\h!k2][SN_g=e7&_`&q)*;+Fj:YFe*PFR;.$MMEHdYoU&!lPN-FKLg
%*CR:oqaF:CkYH<LA>X[T;D5f,1fG[W^h(/]2k'Qk:OCH0jqU=o2i2/K;*9sd8[a[DmG'Mmg+(e>q^dLn8KF8@P*b+,--'[71md&u
%,T[en`ga-,0,siYa+\9D;KLuo5NrZ]0=sF),Uo>:I/4).A4!.MVCV]po>9mR$n/=or@5l[DtqI*,ZI^Ep40^;M$NVB2],"+@\&_U
%Jh3M8ckI.'"("@AZt=Z8E"k,\]8R9-%]AEW;/QEc6b>C7a9hjNM#N?T?_W5;Yt33$)br6SR<_4^VK_pgm7t='FPPB%^kKFO0]A=i
%)++Cprf@<\q$--r)OW7CLmqa+>"ZuciJ-EkoU\E57b0N:NFT*O?3&5Y#lB_YSNkme.M`Kh0sVdMS,$Wb\?6Hd/H@[;Q2QBpTRM;m
%,W$.;K=^moAQs2XkW(!*&EjYZT7ki!2`"='?;[m/?fT^pcG9VjLS8Wo*G!0ZZZUi`#rVWO$%i*N_lJ7CBUs>W;l4"bh)([Dd=eGN
%M4?#e\\pCrF%(PVbI?(Mlq"^o]isK[.iljNe1"1g!@PXiQ,M\1VO8aXBD&&D+gViW9c5u$>uh-="EqCd_j.=j?R:$/UPaLelXJ,t
%6gU$fBXC9MH!'R/I4e[Q@T1#sqkn26Ho6XJO9&Y<d"mhO7rJtd=$`Qf<\>Coc;<KKa&tI@claFMVJ]''`]RN<DV6rU)^\*i6Ffep
%?e<`G1lqddmM,Q`m$6#a@Kjq1<GIR#Dl=-8]UF3\>S1Pi:7*`_LmS8.CrdQ`<uq\?aP@]OQ5Ca%^Ca>bEh^`H_cjo8iLTqg1tLAh
%lKLI27n+qmB3#CE-<ZU^'o7+DW9ri.P8uu^jU),p]<$C[+.BI<jk-d(o6qijL2N#:+"XFm7'?(f[:YtR]*'U,.++rFX]=CR!($I(
%8"5WO0.iI)&;a/n/r1i'R2bQ:cEdQhM'L9DMG5VHITk'u3tP<7*&Um(Yc!i@%dN+@(,?B/fB+jlnBb>_C,B1IjCb:UX%f'k>3C'!
%apqE(qGSE\<12:bV1mBSr:pMXC1aGqVWk/EV:S:<c8osE^P55?)W->(Xb6Hk*)g>2<[hr.C?Gp5eK#l7L\K-)WGT^#!>%IOfL,=R
%d6p,3,75^eb%57K7VDYEXL><"lb7N\Y7$bi9@ZmIJh7XB,FlR'/dm:IUi7&oTS")JmJoeWPe$aq]m3._VUU!i'odsj]QI%XgL5d(
%.<5W5WW%]g,d*r.L/s]Ckc3g'GuB37`ZOQo3+Ybb]nM,)[jiDC&e2O+jA6u"\[iTjk7?nRntl7A<he?&G*:0#(TZ-#=$YH<rCTLo
%#BrIq3^NH&eoq0uGhn9e7=S-n[Uib#MiLAT1IQU.U'!7`/<!BKnTFLE"Tk:a8LO*/<PMC,JMFq;L8Ml[n]1Wqpu+'doY)hU^\rDa
%753*&]n2::W"S1'ZG=e6c3T6;]t[:43[0gO$k"hEJA_778.frKjkJrr0e,#ko"-)56&>76qF*p#q7]O[Rl*=[;iO6lO&`*26!rMM
%B+$T8a"!B0>j':6Q_Nm8h`"!5HJil=a?ONK[TL_cd[.)7d5!qXHa^KZk-q%)?^_b'V#]9);Dbk[GaO\VLAkq1<#2(kMffY!opdZn
%loB/@lS!n!M%C\Kkc>UMjh$(4@D%)p`6FaT%s)$OebiLT::$A][/[/ZQX-2\KPoAaq0&:tnDh^&UK;PDkrtY'J@>1=(gAJTQ7qEl
%e3mM4kROMbU2)FLkOD,hCp1l>.h&j.3=k.9c"kY/LGi$GkVq@rqrfDBp9tPd5k(B:eQL60G:7Ha="sp5N_eO7c&9d-j6`XuGVGXA
%88i*B5I<Y&*kcHaPon9`UTT9J(WF&Rr#rci6St`d3b?0bYNfU?]Jnn1ChM5;j39-inb*+k7Cs/g$pLFifH"oq[q@-6LZO>a/uV6t
%bN%if8u'4^$u_2-6e`o[\*(qBO+[]I1*\,*V&,+F7_l._m^DP0mB[m`\N9=fo/[EN*KnN>n[`i621!.8O*EoWDGP@E%4nNMEHR!P
%R[.BUTo;>URN_0o=CokA%/]Q#Bs\kL&,;*3oQf5GmuEL*^<oUgaAD.XOSq-8XU?V=0WrYaAU8OWbq@D-ls%X,(;5(>ENs?KXHA\q
%E#KP;1BR*WB5$OFq;--B)p4PLH4Qt3llkHe3X#V%e5$BNBnYLKq_m[pTqUTS:?`A\YB4`R'?MRJ1Tn,@4Zl8!/SVX2:c5Id$lPk@
%eBs'eV,76SBJ.[/LS5^i>TDb;G(a=*.C&'d^!uX?CVSn$hT]FNog:?\heUP'f22m5W@F3Y&omiBR4[\3X%]5q4-\7N^`/;:)>@!6
%2_S7K'36Ws:ZQY5oSgV1nINJ\$b#)0HN-H@+(2n]0*qshP2XS9&c:\]gs61>&b+QR#/Krd[oZ"jG?W?Ek!VS%inQ\<r!J:Ak7f^u
%8pbpn&$>Et@_R$1YFjCW^hl9eJ0*(dFKZCoLY)O6Um-t1kKDT.:`JT.64Xs(p2)5df07>uaU@Qbk;g4/V!MkG]&s9\K!=G"hJ#6n
%c>u(=4%&\t[>5dV#LD5.\9Zua)Jm22nh-OFMVE\HOeR4q'1;%FdEc,a\:Y[QFA33=\P[?tLB"I#)#k"bc)U*QD`$Y/HN'`En#/Hg
%alWRb'G?@?%u]G6I74Y<*-qd%keoeI27<3dDTN!-WB1r+#LKc0DS4ZN,X?^<^,L(eEBmW/=g5l2)OY&s3ZpCAW%Br.SbpT+^c^63
%hk@Bq3o=h";C(c1A0O9$+("tCrV+Jc14%Mm/e0/hqOFhJ^ZITkVju'eq_7h]^LG^7_'HU+BNeV"l#?RcN8VDrDbd9o5ft@gDSe$;
%Mg$WX9d#TV<L\S5VVI"#%<'Z4Mq=bjUo$j8&77Ss,_Eq2'\"fW29BaYWt3B$,phu%A.)BY:ktN%GJK&!8Tr7uQlhnn]Ld%F&K%a<
%fpu/Y0[([4.1K7HhG<Fo+6N@i2s'4PqN$.+GQ70ir:f59s/1ABhu;jns6j=pp>a2/i#hs=^\m\1s/3X1jo>*?s8'4>s1<d[\%hju
%J,T/c^\l9irqg(%rNH7Ql^pB?q/:c][t"G0^]!ichu:g6r]_=K7J?ucn.5Q`J,&L3rpThN?S3BM~>
%AI9_PrivateDataEnd
